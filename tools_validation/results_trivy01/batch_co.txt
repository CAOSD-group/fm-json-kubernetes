
Report Summary

┌───────────────────┬────────────┬───────────────────┐
│      Target       │    Type    │ Misconfigurations │
├───────────────────┼────────────┼───────────────────┤
│ deploy321_4.yaml  │ kubernetes │        33         │
├───────────────────┼────────────┼───────────────────┤
│ deploy321_5.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy321_6.yaml  │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_14.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_15.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_16.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_3.yaml  │ kubernetes │         3         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy322_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy324.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy324_3.yaml  │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy324_4.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_12.yaml │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_14.yaml │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_15.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_16.yaml │ kubernetes │        14         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_17.yaml │ kubernetes │        14         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_4.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_5.yaml  │ kubernetes │         3         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_6.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy326_9.yaml  │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy328.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy329.yaml    │ kubernetes │        35         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33.yaml     │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_14.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_15.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_16.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_3.yaml  │ kubernetes │         3         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy330_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy331.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy332.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy332_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy332_2.yaml  │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy332_3.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy332_4.yaml  │ kubernetes │        20         │
├───────────────────┼────────────┼───────────────────┤
│ deploy332_5.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy333.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy333_1.yaml  │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy334.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy334_1.yaml  │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy335.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy336.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy337.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy338_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy339_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_1.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_10.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_11.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_12.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_13.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_14.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_15.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_16.yaml  │ kubernetes │        14         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_17.yaml  │ kubernetes │        14         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_2.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_3.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_4.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_5.yaml   │ kubernetes │         3         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_6.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_7.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_8.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy33_9.yaml   │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy34.yaml     │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy340.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy341.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy342_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy343.yaml    │ kubernetes │        14         │
├───────────────────┼────────────┼───────────────────┤
│ deploy344.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy345.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy346.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy346_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy347.yaml    │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy34_1.yaml   │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy34_2.yaml   │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy350.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy351.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy352.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy353.yaml    │ kubernetes │        15         │
├───────────────────┼────────────┼───────────────────┤
│ deploy354.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy355.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy356_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy357_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy358.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy359.yaml    │ kubernetes │        34         │
├───────────────────┼────────────┼───────────────────┤
│ deploy36.yaml     │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy360.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy360_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy361.yaml    │ kubernetes │        17         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy362_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy363_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy364_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy365.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy365_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_14.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_15.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_16.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_3.yaml  │ kubernetes │         3         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy366_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy369.yaml    │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy36_1.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy36_2.yaml   │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy370.yaml    │ kubernetes │        17         │
├───────────────────┼────────────┼───────────────────┤
│ deploy370_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy371_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy372_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy373_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy374_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy375_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy376_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_14.yaml │ kubernetes │        10         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy377_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy378_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy379_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy380.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy380_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy381.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy382.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy383.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy384.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_14.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_15.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_16.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_3.yaml  │ kubernetes │         3         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy387_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy39.yaml     │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy390.yaml    │ kubernetes │        16         │
├───────────────────┼────────────┼───────────────────┤
│ deploy391.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy393.yaml    │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy394.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy394_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy394_2.yaml  │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy394_3.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy394_4.yaml  │ kubernetes │        20         │
├───────────────────┼────────────┼───────────────────┤
│ deploy394_5.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy395.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy395_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy395_2.yaml  │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy395_3.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy395_4.yaml  │ kubernetes │        20         │
├───────────────────┼────────────┼───────────────────┤
│ deploy395_5.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy396.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy396_1.yaml  │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy397.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy397_1.yaml  │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy399.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy39_1.yaml   │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy400.yaml    │ kubernetes │        16         │
├───────────────────┼────────────┼───────────────────┤
│ deploy401.yaml    │ kubernetes │        14         │
├───────────────────┼────────────┼───────────────────┤
│ deploy402.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy403.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy404.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy405.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy406.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy407.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy408.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy409.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy41.yaml     │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy410.yaml    │ kubernetes │        16         │
├───────────────────┼────────────┼───────────────────┤
│ deploy411.yaml    │ kubernetes │        16         │
├───────────────────┼────────────┼───────────────────┤
│ deploy412.yaml    │ kubernetes │        16         │
├───────────────────┼────────────┼───────────────────┤
│ deploy413.yaml    │ kubernetes │        16         │
├───────────────────┼────────────┼───────────────────┤
│ deploy414.yaml    │ kubernetes │        16         │
├───────────────────┼────────────┼───────────────────┤
│ deploy415.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy416.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy417.yaml    │ kubernetes │        16         │
├───────────────────┼────────────┼───────────────────┤
│ deploy418.yaml    │ kubernetes │        16         │
├───────────────────┼────────────┼───────────────────┤
│ deploy419.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy419_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy42.yaml     │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy420.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy420_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy422.yaml    │ kubernetes │        17         │
├───────────────────┼────────────┼───────────────────┤
│ deploy422_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy423.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy424.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy425.yaml    │ kubernetes │        15         │
├───────────────────┼────────────┼───────────────────┤
│ deploy426.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy427.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy428.yaml    │ kubernetes │        15         │
├───────────────────┼────────────┼───────────────────┤
│ deploy429.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy43.yaml     │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy430.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy431.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy432.yaml    │ kubernetes │        15         │
├───────────────────┼────────────┼───────────────────┤
│ deploy433.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy434.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy435.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_14.yaml │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_15.yaml │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_16.yaml │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy436_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_14.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_15.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_16.yaml │ kubernetes │        12         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_3.yaml  │ kubernetes │         3         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy437_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy439.yaml    │ kubernetes │        17         │
├───────────────────┼────────────┼───────────────────┤
│ deploy44.yaml     │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy440.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy441.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy441_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy442.yaml    │ kubernetes │        16         │
├───────────────────┼────────────┼───────────────────┤
│ deploy443.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy443_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy443_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy443_3.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy443_4.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy443_5.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy443_6.yaml  │ kubernetes │        22         │
├───────────────────┼────────────┼───────────────────┤
│ deploy444.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy444_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy444_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy444_3.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy444_4.yaml  │ kubernetes │        20         │
├───────────────────┼────────────┼───────────────────┤
│ deploy445.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy445_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy445_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy445_3.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy445_4.yaml  │ kubernetes │        20         │
├───────────────────┼────────────┼───────────────────┤
│ deploy446.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy446_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy446_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy446_3.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy446_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy446_5.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy446_6.yaml  │ kubernetes │        22         │
├───────────────────┼────────────┼───────────────────┤
│ deploy448_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy448_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy448_4.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy448_5.yaml  │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy449.yaml    │ kubernetes │        34         │
├───────────────────┼────────────┼───────────────────┤
│ deploy45.yaml     │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy452.yaml    │ kubernetes │        14         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy453_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy454.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy454_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy463.yaml    │ kubernetes │        15         │
├───────────────────┼────────────┼───────────────────┤
│ deploy463_1.yaml  │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy464.yaml    │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy464_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy464_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy464_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy464_4.yaml  │ kubernetes │        15         │
├───────────────────┼────────────┼───────────────────┤
│ deploy464_5.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy466.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy467.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy468.yaml    │ kubernetes │        15         │
├───────────────────┼────────────┼───────────────────┤
│ deploy469.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47.yaml     │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470.yaml    │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_10.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_11.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_12.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_13.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_14.yaml │ kubernetes │         9         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_15.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_16.yaml │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_17.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_18.yaml │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_3.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_4.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_5.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_6.yaml  │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_7.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_8.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy470_9.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy471.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy471_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy472.yaml    │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy472_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_1.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_10.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_11.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_12.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_13.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_14.yaml  │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_15.yaml  │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_16.yaml  │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_17.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_18.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_2.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_3.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_4.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_5.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_6.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_7.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_8.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy47_9.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy488.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy488_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy489.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy489_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy49.yaml     │ kubernetes │        34         │
├───────────────────┼────────────┼───────────────────┤
│ deploy490.yaml    │ kubernetes │        16         │
├───────────────────┼────────────┼───────────────────┤
│ deploy491.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy491_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy491_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy492.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy492_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy492_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy493.yaml    │ kubernetes │        19         │
├───────────────────┼────────────┼───────────────────┤
│ deploy493_1.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy493_2.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy5.yaml      │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy50.yaml     │ kubernetes │        18         │
├───────────────────┼────────────┼───────────────────┤
│ deploy52_1.yaml   │ kubernetes │        14         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53.yaml     │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_1.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_10.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_11.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_12.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_13.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_14.yaml  │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_15.yaml  │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_16.yaml  │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_17.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_18.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_2.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_3.yaml   │ kubernetes │         3         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_4.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_5.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_6.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_7.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_8.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy53_9.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy54.yaml     │ kubernetes │        14         │
├───────────────────┼────────────┼───────────────────┤
│ deploy54_1.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy54_2.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55.yaml     │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_1.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_10.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_11.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_12.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_13.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_14.yaml  │ kubernetes │        10         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_15.yaml  │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_16.yaml  │ kubernetes │         7         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_17.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_18.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_2.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_3.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_4.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_5.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_6.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_7.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_8.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy55_9.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56.yaml     │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_1.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_10.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_11.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_12.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_13.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_14.yaml  │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_15.yaml  │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_16.yaml  │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_17.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_18.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_2.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_3.yaml   │ kubernetes │         3         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_4.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_5.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_6.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_7.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_8.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy56_9.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57.yaml     │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_1.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_10.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_11.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_12.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_13.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_14.yaml  │ kubernetes │        14         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_15.yaml  │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_16.yaml  │ kubernetes │        13         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_17.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_18.yaml  │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_2.yaml   │ kubernetes │         0         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_3.yaml   │ kubernetes │         3         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_4.yaml   │ kubernetes │         1         │
├───────────────────┼────────────┼───────────────────┤
│ deploy57_5.yaml   │ kubernetes │         1         │
└───────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


deploy321_4.yaml (kubernetes)
=============================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-container' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-container' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-container' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-container' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-container' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-container' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-container' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-container' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-container' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-container' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-container' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-container" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy321_4.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy321_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 │         - name: website-all
  24 └           mountPath: /website
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy321_4.yaml:26-32
────────────────────────────────────────
  26 ┌       - name: nginx-container
  27 │         image: nginx:1.23.3-alpine
  28 │         volumeMounts:
  29 │         - name: website-all
  30 │           mountPath: /usr/share/nginx/html
  31 │         ports:
  32 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy321_4.yaml:15-36
────────────────────────────────────────
  15 ┌       initContainers:
  16 │       - name: init-container
  17 │         image: busybox:1.32.0
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until [ -f /website/index.html ]; do sleep 1; done;
  22 │         volumeMounts:
  23 └         - name: website-all
  ..   
────────────────────────────────────────



deploy321_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'refresh-container' of CronJob 'refresh-content' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'refresh-container' of CronJob 'refresh-content' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'refresh-container' of 'cronjob' 'refresh-content' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'refresh-container' of CronJob 'refresh-content' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'refresh-container' of CronJob 'refresh-content' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'refresh-container' of CronJob 'refresh-content' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'refresh-container' of CronJob 'refresh-content' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'refresh-container' of CronJob 'refresh-content' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'refresh-container' of CronJob 'refresh-content' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'refresh-container' of CronJob 'refresh-content' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'refresh-container' of CronJob 'refresh-content' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'refresh-container' of CronJob 'refresh-content' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "refresh-container" of cronjob "refresh-content" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob refresh-content in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy321_6.yaml:4
────────────────────────────────────────
   4 [   name: refresh-content
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container refresh-content in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy321_6.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 └             - 'cd /website
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob refresh-content in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy321_6.yaml:11-23
────────────────────────────────────────
  11 ┌           containers:
  12 │           - name: refresh-container
  13 │             image: ubuntu
  14 │             command:
  15 │             - /bin/bash
  16 │             - -c
  17 │             args:
  18 │             - 'cd /website
  19 └ 
  ..   
────────────────────────────────────────



deploy322_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy322_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy322_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy322_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy322_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy322_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy322_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy322_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy322_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy322_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy322_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy322_14.yaml:29-115
────────────────────────────────────────
  29 ┌       containers:
  30 │       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 └         - --ingress-class=nginx
  ..   
────────────────────────────────────────



deploy322_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy322_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy322_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy322_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy322_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy322_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy322_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy322_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy322_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy322_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy322_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy322_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy322_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────



deploy322_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy322_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy322_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy322_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy322_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy322_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy322_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy322_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy322_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy322_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy322_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy322_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy322_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy322_3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy322_3.yaml:62-70
────────────────────────────────────────
  62 ┌ - apiGroups:
  63 │   - ''
  64 │   resourceNames:
  65 │   - ingress-controller-leader
  66 │   resources:
  67 │   - configmaps
  68 │   verbs:
  69 │   - get
  70 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy322_3.yaml:71-76
────────────────────────────────────────
  71 ┌ - apiGroups:
  72 │   - ''
  73 │   resources:
  74 │   - configmaps
  75 │   verbs:
  76 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy322_3.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - pods
  26 │   - secrets
  27 │   - endpoints
  28 │   verbs:
  29 └   - get
  ..   
────────────────────────────────────────



deploy322_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy322_4.yaml:18-24
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 │   - get
  24 └   - create
────────────────────────────────────────



deploy322_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy322_5.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   - endpoints
  18 │   - nodes
  19 │   - pods
  20 │   - secrets
  21 └   - namespaces
  ..   
────────────────────────────────────────



deploy322_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy322_6.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - admissionregistration.k8s.io
  19 │   resources:
  20 │   - validatingwebhookconfigurations
  21 │   verbs:
  22 │   - get
  23 └   - update
────────────────────────────────────────



deploy324_3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubevirt-auto-uuid' of Deployment 'kubevirt-auto-uuid' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubevirt-auto-uuid' of Deployment 'kubevirt-auto-uuid' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubevirt-auto-uuid' of 'deployment' 'kubevirt-auto-uuid' in 'kubevirt-auto-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubevirt-auto-uuid' of Deployment 'kubevirt-auto-uuid' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubevirt-auto-uuid' of Deployment 'kubevirt-auto-uuid' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubevirt-auto-uuid' of Deployment 'kubevirt-auto-uuid' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubevirt-auto-uuid' of Deployment 'kubevirt-auto-uuid' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubevirt-auto-uuid' of Deployment 'kubevirt-auto-uuid' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubevirt-auto-uuid' of Deployment 'kubevirt-auto-uuid' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubevirt-auto-uuid' of Deployment 'kubevirt-auto-uuid' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubevirt-auto-uuid' of Deployment 'kubevirt-auto-uuid' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubevirt-auto-uuid' of Deployment 'kubevirt-auto-uuid' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubevirt-auto-uuid" of deployment "kubevirt-auto-uuid" in "kubevirt-auto-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubevirt-auto-uuid in kubevirt-auto-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubevirt-auto-uuid in kubevirt-auto-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy324_3.yaml:21-53
────────────────────────────────────────
  21 ┌       volumes:
  22 │       - name: tls
  23 │         secret:
  24 │           secretName: kubevirt-auto-uuid-tls
  25 │       containers:
  26 │       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubevirt-auto-uuid in deployment kubevirt-auto-uuid (namespace: kubevirt-auto-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy324_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: kubevirt-auto-uuid
  27 │         image: image-registry.openshift-image-registry.svc:5000/kubevirt-auto-uuid/kubevirt-auto-uuid:latest
  28 │         imagePullPolicy: Always
  29 │         volumeMounts:
  30 │         - name: tls
  31 │           readOnly: true
  32 │           mountPath: /etc/tls
  33 │         readinessProbe:
  34 └           httpGet:
  ..   
────────────────────────────────────────



deploy326_12.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy326_12.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



deploy326_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy326_14.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



deploy326_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy326_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



deploy326_17.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy326_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



deploy326_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy326_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



deploy326_5.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy326_5.yaml:63-71
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - configmaps
  67 │   resourceNames:
  68 │   - ingress-controller-leader-nginx
  69 │   verbs:
  70 │   - get
  71 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy326_5.yaml:72-77
────────────────────────────────────────
  72 ┌ - apiGroups:
  73 │   - ''
  74 │   resources:
  75 │   - configmaps
  76 │   verbs:
  77 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy326_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



deploy326_9.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy326_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.45.0@sha256:c4390c53f348c3bd4e60a5dd6a11c35799ae78c49388090140b9d72ccede1755
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy326_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.45.0@sha256:c4390c53f348c3bd4e60a5dd6a11c35799ae78c49388090140b9d72ccede1755
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy326_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.45.0@sha256:c4390c53f348c3bd4e60a5dd6a11c35799ae78c49388090140b9d72ccede1755
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy326_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.45.0@sha256:c4390c53f348c3bd4e60a5dd6a11c35799ae78c49388090140b9d72ccede1755
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy326_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.45.0@sha256:c4390c53f348c3bd4e60a5dd6a11c35799ae78c49388090140b9d72ccede1755
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy326_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.45.0@sha256:c4390c53f348c3bd4e60a5dd6a11c35799ae78c49388090140b9d72ccede1755
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy326_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.45.0@sha256:c4390c53f348c3bd4e60a5dd6a11c35799ae78c49388090140b9d72ccede1755
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy326_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.45.0@sha256:c4390c53f348c3bd4e60a5dd6a11c35799ae78c49388090140b9d72ccede1755
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy326_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.45.0@sha256:c4390c53f348c3bd4e60a5dd6a11c35799ae78c49388090140b9d72ccede1755
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy326_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.45.0@sha256:c4390c53f348c3bd4e60a5dd6a11c35799ae78c49388090140b9d72ccede1755
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy326_9.yaml:28-110
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.45.0@sha256:c4390c53f348c3bd4e60a5dd6a11c35799ae78c49388090140b9d72ccede1755
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



deploy328.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'webapp-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'webapp-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'webapp-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'webapp-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'webapp-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'webapp-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'webapp-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'webapp-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'webapp-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'webapp-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'webapp-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "webapp-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment webapp-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy328.yaml:4-6
────────────────────────────────────────
   4 ┌   name: webapp-deployment
   5 │   labels:
   6 └     app: webapp
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment webapp-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy328.yaml:17-23
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 │         - containerPort: 80
  22 │       imagePullSecrets:
  23 └         - name: myregistrykey
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in deployment webapp-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy328.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/webapp:74
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



deploy329.yaml (kubernetes)
===========================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'multitool' of Deployment 'nginx-mt-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-mt-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'multitool' of Deployment 'nginx-mt-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-mt-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'multitool' of 'deployment' 'nginx-mt-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-mt-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'multitool' of Deployment 'nginx-mt-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-mt-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'multitool' of Deployment 'nginx-mt-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-mt-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'multitool' of Deployment 'nginx-mt-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-mt-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'multitool' of Deployment 'nginx-mt-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-mt-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'multitool' of Deployment 'nginx-mt-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-mt-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'multitool' of Deployment 'nginx-mt-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-mt-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'multitool' of Deployment 'nginx-mt-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-mt-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'multitool' of Deployment 'nginx-mt-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-mt-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'multitool' of Deployment 'nginx-mt-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-mt-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "multitool" of deployment "nginx-mt-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-mt-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-mt-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy329.yaml:4
────────────────────────────────────────
   4 [   name: nginx-mt-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-mt-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-mt-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy329.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-mt-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy329.yaml:15-29
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx
  18 │       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 └         - name: HTTPS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container multitool in deployment nginx-mt-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy329.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: multitool
  19 │         image: wbitt/network-multitool
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTPS_PORT
  24 │           value: "11443"
  25 │         ports:
  26 └         - containerPort: 8080
  ..   
────────────────────────────────────────



deploy330_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy330_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy330_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy330_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy330_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy330_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy330_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy330_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy330_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy330_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy330_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy330_14.yaml:29-115
────────────────────────────────────────
  29 ┌       containers:
  30 │       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 └         - --ingress-class=nginx
  ..   
────────────────────────────────────────



deploy330_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy330_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy330_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy330_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy330_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy330_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy330_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy330_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy330_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy330_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy330_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy330_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy330_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────



deploy330_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy330_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy330_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy330_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy330_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy330_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy330_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy330_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy330_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy330_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy330_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy330_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy330_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy330_3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy330_3.yaml:62-70
────────────────────────────────────────
  62 ┌ - apiGroups:
  63 │   - ''
  64 │   resourceNames:
  65 │   - ingress-controller-leader
  66 │   resources:
  67 │   - configmaps
  68 │   verbs:
  69 │   - get
  70 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy330_3.yaml:71-76
────────────────────────────────────────
  71 ┌ - apiGroups:
  72 │   - ''
  73 │   resources:
  74 │   - configmaps
  75 │   verbs:
  76 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy330_3.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - pods
  26 │   - secrets
  27 │   - endpoints
  28 │   verbs:
  29 └   - get
  ..   
────────────────────────────────────────



deploy330_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy330_4.yaml:18-24
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 │   - get
  24 └   - create
────────────────────────────────────────



deploy330_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy330_5.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   - endpoints
  18 │   - nodes
  19 │   - pods
  20 │   - secrets
  21 └   - namespaces
  ..   
────────────────────────────────────────



deploy330_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy330_6.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - admissionregistration.k8s.io
  19 │   resources:
  20 │   - validatingwebhookconfigurations
  21 │   verbs:
  22 │   - get
  23 └   - update
────────────────────────────────────────



deploy331.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy331.yaml:4
────────────────────────────────────────
   4 [   name: nginx-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy331.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy331.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



deploy332.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'blueapp' of Deployment 'blueapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'blueapp' of 'deployment' 'blueapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "blueapp" of deployment "blueapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment blueapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy332.yaml:4-6
────────────────────────────────────────
   4 ┌   name: blueapp
   5 │   labels:
   6 └     app: blue
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment blueapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container blueapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment blueapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy332.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container blueapp in deployment blueapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy332.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



deploy332_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'greenapp' of Deployment 'greenapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'greenapp' of 'deployment' 'greenapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "greenapp" of deployment "greenapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment greenapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy332_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: greenapp
   5 │   labels:
   6 └     app: green
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment greenapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container greenapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment greenapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy332_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container greenapp in deployment greenapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy332_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



deploy332_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'todoapp' of Deployment 'todoapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'todoapp' of 'deployment' 'todoapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'todoapp' of Deployment 'todoapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "todoapp" of deployment "todoapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todoapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy332_4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todoapp
   5 │   labels:
   6 └     app: todo
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todoapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todoapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todoapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy332_4.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container todoapp in deployment todoapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy332_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



deploy333_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysqldeployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysqldeployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysqldeployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'mysqldeployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysqldeployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysqldeployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysqldeployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy333_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysqldeployment
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysqldeployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy333_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysqldeployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy333_1.yaml:19-36
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 └         env:
  ..   
────────────────────────────────────────



deploy334.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend' of Deployment 'frontend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy334.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend
   5 │   labels:
   6 └     team: development
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy334.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy334.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



deploy334_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'backend' of Deployment 'backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'backend' of Deployment 'backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'backend' of 'deployment' 'backend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'backend' of Deployment 'backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'backend' of Deployment 'backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'backend' of Deployment 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'backend' of Deployment 'backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'backend' of Deployment 'backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'backend' of Deployment 'backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'backend' of Deployment 'backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'backend' of Deployment 'backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "backend" of deployment "backend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment backend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy334_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: backend
   5 │   labels:
   6 └     team: development
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container backend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment backend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy334_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container backend in deployment backend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy334_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────



deploy335.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy335.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy335.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy335.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: mhoelzl/timeserver:0.0.1
────────────────────────────────────────



deploy336.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy336.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy336.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 └           initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy336.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: mhoelzl/timeserver:0.0.3
  18 │         readinessProbe:
  19 │           httpGet:
  20 │             path: /admin/ready
  21 │             port: 80
  22 │             scheme: HTTP
  23 │           initialDelaySeconds: 10
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────



deploy337.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy337.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy337.yaml:20-42
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 └           initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy337.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 │         image: mhoelzl/timeserver:0.0.4
  23 │         readinessProbe:
  24 │           httpGet:
  25 │             path: /admin/ready
  26 │             port: 80
  27 │             scheme: HTTP
  28 │           initialDelaySeconds: 10
  29 └           periodSeconds: 5
  ..   
────────────────────────────────────────



deploy338_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy338_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy338_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy338_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy338_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy338_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy338_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy338_14.yaml:33-121
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy338_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



deploy338_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy338_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy338_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy338_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy338_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy338_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy338_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy338_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy338_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy338_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy338_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy338_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy338_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy338_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy338_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy338_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy338_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy338_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy338_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy338_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy338_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy338_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy338_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy338_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy339_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy339_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy339_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy339_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy339_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy339_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy339_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy339_14.yaml:33-121
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy339_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



deploy339_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy339_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy339_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy339_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy339_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy339_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy339_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy339_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy339_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy339_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy339_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy339_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy339_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy339_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy339_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy339_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy339_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy339_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy339_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy339_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy339_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy339_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy339_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy339_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy33_12.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy33_12.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



deploy33_14.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy33_14.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



deploy33_16.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy33_16.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



deploy33_17.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy33_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: docker.io/jettech/kube-webhook-certgen:v1.5.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



deploy33_3.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy33_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



deploy33_5.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy33_5.yaml:63-71
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - configmaps
  67 │   resourceNames:
  68 │   - ingress-controller-leader-nginx
  69 │   verbs:
  70 │   - get
  71 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy33_5.yaml:72-77
────────────────────────────────────────
  72 ┌ - apiGroups:
  73 │   - ''
  74 │   resources:
  75 │   - configmaps
  76 │   verbs:
  77 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy33_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



deploy33_9.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy33_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.46.0@sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy33_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.46.0@sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy33_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.46.0@sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy33_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.46.0@sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy33_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.46.0@sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy33_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.46.0@sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy33_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.46.0@sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy33_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.46.0@sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy33_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.46.0@sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy33_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.46.0@sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy33_9.yaml:28-110
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v0.46.0@sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



deploy34.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy34.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployments
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployments in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy34.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.22
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



deploy340.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'appyaml' of Deployment 'appyaml' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'appyaml' of Deployment 'appyaml' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'appyaml' of 'deployment' 'appyaml' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'appyaml' of Deployment 'appyaml' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'appyaml' of Deployment 'appyaml' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'appyaml' of Deployment 'appyaml' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'appyaml' of Deployment 'appyaml' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'appyaml' of Deployment 'appyaml' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'appyaml' of Deployment 'appyaml' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'appyaml' of Deployment 'appyaml' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'appyaml' of Deployment 'appyaml' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'appyaml' of Deployment 'appyaml' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "appyaml" of deployment "appyaml" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment appyaml in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy340.yaml:4-6
────────────────────────────────────────
   4 ┌   name: appyaml
   5 │   labels:
   6 └     app: star
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container appyaml in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment appyaml in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy340.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container appyaml in deployment appyaml (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy340.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: appyaml
  19 │         image: dhirajsingh6/dhisin:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────



deploy341.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy341.yaml:4-7
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   #namespace: prod
   6 │   labels:
   7 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy341.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy341.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: nginx
  20 │         image: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────



deploy342_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy342_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy342_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy342_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy342_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy342_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy342_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy342_14.yaml:33-121
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy342_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



deploy342_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy342_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy342_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy342_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy342_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy342_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy342_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy342_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy342_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy342_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy342_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy342_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy342_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy342_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy342_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy342_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy342_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy342_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy342_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy342_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy342_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy342_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy342_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy342_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy343.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-dp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-dp' in 'my-namespace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-dp" in "my-namespace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-dp in my-namespace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy343.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-dp in my-namespace namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy343.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:alpine
  19 │         resources:
  20 │           limits:
  21 │             memory: 0Mi  
  22 └             cpu: "0"
────────────────────────────────────────



deploy344.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-dp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-dp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-dp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-dp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy344.yaml:4
────────────────────────────────────────
   4 [   name: nginx-dp
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-dp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-dp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy344.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-dp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy344.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 └           - containerPort: 80
────────────────────────────────────────



deploy345.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-dp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-dp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-dp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-dp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-dp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy345.yaml:4
────────────────────────────────────────
   4 [   name: nginx-dp
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-dp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-dp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy345.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-dp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy345.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx:alpine
  18 │         ports:
  19 │           - containerPort: 80
  20 │             name: http
  21 └             protocol: TCP
────────────────────────────────────────



deploy346.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sandbox-be' of Deployment 'sandbox-be' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sandbox-be' of Deployment 'sandbox-be' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sandbox-be' of 'deployment' 'sandbox-be' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sandbox-be' of Deployment 'sandbox-be' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sandbox-be' of Deployment 'sandbox-be' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sandbox-be' of Deployment 'sandbox-be' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sandbox-be' of Deployment 'sandbox-be' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sandbox-be' of Deployment 'sandbox-be' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sandbox-be' of Deployment 'sandbox-be' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sandbox-be' of Deployment 'sandbox-be' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sandbox-be' of Deployment 'sandbox-be' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sandbox-be' of Deployment 'sandbox-be' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sandbox-be" of deployment "sandbox-be" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment sandbox-be in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy346.yaml:4
────────────────────────────────────────
   4 [   name: sandbox-be
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sandbox-be in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment sandbox-be in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy346.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sandbox-be in deployment sandbox-be (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy346.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: sandbox-be
  17 │         image: adarkst/sandbox-be:latest
  18 │         resources: null
  19 │         limits:
  20 │           memory: 512Mi
  21 │           cpu: 500m
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────



deploy347.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy347.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongodb' of Deployment 'mongodb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy347.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongodb' of 'deployment' 'mongodb' in 'workshop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy347.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy347.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy347.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy347.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy347.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy347.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongodb" of deployment "mongodb" in "workshop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy347.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy347.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongodb in workshop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy347.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongodb in workshop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy347.yaml:16-46
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 └             - "0.1"
  ..   
────────────────────────────────────────



deploy34_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'c00' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'c00' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'c00' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'c00' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'c00' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'c00' of Deployment 'mydeployments' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'c00' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'c00' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'c00' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'c00' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'c00' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'c00' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "c00" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy34_1.yaml:4
────────────────────────────────────────
   4 [   name: mydeployments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy34_1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy34_1.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: c00
  18 │         image: ubuntu
  19 │         command:
  20 │         - /bin/bash
  21 │         - -c
  22 └         - while true; do echo welcome to k8s Deployment; sleep 5; done
────────────────────────────────────────



deploy34_2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapl' of Deployment 'mydeployments' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapl' of Deployment 'mydeployments' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapl' of 'deployment' 'mydeployments' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapl' of Deployment 'mydeployments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapl' of Deployment 'mydeployments' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapl' of Deployment 'mydeployments' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapl' of Deployment 'mydeployments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapl' of Deployment 'mydeployments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapl' of Deployment 'mydeployments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapl' of Deployment 'mydeployments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapl' of Deployment 'mydeployments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapl" of deployment "mydeployments" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy34_2.yaml:4
────────────────────────────────────────
   4 [   name: mydeployments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployments in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployments in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy34_2.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapl in deployment mydeployments (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy34_2.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: myapl
  18 └         image: amiyaranjansahoo/myapp:v1
────────────────────────────────────────



deploy350.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy350.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy350.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy350.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
  ..   
────────────────────────────────────────



deploy351.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy351.yaml:4
────────────────────────────────────────
   4 [   name: nginx-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy351.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy351.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



deploy352.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy352.yaml:5
────────────────────────────────────────
   5 [   name: nginx-deployment3
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment3 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy352.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy352.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 │           mountPath: /usr/share/nginx/html
  24 └       volumes:
  ..   
────────────────────────────────────────



deploy353.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy353.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy353.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy353.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy353.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy353.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy353.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy353.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy353.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy353.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy353.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy353.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy353.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment1
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy353.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy353.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 └             cpu: "250m"
  ..   
────────────────────────────────────────



deploy354.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy354.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy354.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy354.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



deploy355.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy355.yaml:5
────────────────────────────────────────
   5 [   name: nginx-deployment2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy355.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy355.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 │           mountPath: /usr/share/nginx/html
  24 └       volumes:
  ..   
────────────────────────────────────────



deploy356_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy356_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy356_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy356_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy356_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy356_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy356_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy356_14.yaml:33-121
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy356_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



deploy356_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy356_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy356_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy356_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy356_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy356_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy356_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy356_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy356_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy356_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy356_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy356_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy356_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy356_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy356_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy356_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy356_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy356_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy356_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy356_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy356_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy356_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy356_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy356_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy357_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy357_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy357_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy357_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy357_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy357_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy357_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy357_14.yaml:33-121
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy357_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



deploy357_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy357_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy357_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy357_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy357_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy357_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy357_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy357_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy357_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy357_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy357_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy357_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy357_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy357_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy357_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy357_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy357_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy357_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy357_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy357_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy357_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy357_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy357_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy357_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy358.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'voting-app' of Deployment 'voting-app-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'voting-app' of Deployment 'voting-app-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'voting-app' of 'deployment' 'voting-app-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'voting-app' of Deployment 'voting-app-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'voting-app' of Deployment 'voting-app-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'voting-app' of Deployment 'voting-app-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'voting-app' of Deployment 'voting-app-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'voting-app' of Deployment 'voting-app-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'voting-app' of Deployment 'voting-app-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'voting-app' of Deployment 'voting-app-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'voting-app' of Deployment 'voting-app-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "voting-app" of deployment "voting-app-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment voting-app-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy358.yaml:4-7
────────────────────────────────────────
   4 ┌   name: voting-app-deploy
   5 │   labels:
   6 │     name: voting-app-deploy
   7 └     app: demo-voting-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment voting-app-deploy in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container voting-app-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment voting-app-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy358.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container voting-app in deployment voting-app-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy358.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: voting-app
  18 │           image: kodekloud/examplevotingapp_vote:v1
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────



deploy359.yaml (kubernetes)
===========================
Tests: 131 (SUCCESSES: 97, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 20, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-aws-cli' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'my-app' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-app' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-aws-cli' of 'deployment' 'nginx' in 'demo-s3' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-app' of 'deployment' 'nginx' in 'demo-s3' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-app' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-aws-cli' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-app' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-aws-cli' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-app' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-aws-cli' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-app' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-app' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-app' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-app' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-app' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-app' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-aws-cli" of deployment "nginx" in "demo-s3" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-app" of deployment "nginx" in "demo-s3" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in demo-s3 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in demo-s3 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy359.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in demo-s3 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy359.yaml:15-33
────────────────────────────────────────
  15 ┌       serviceAccountName: demo-sa
  16 │       initContainers:
  17 │       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container demo-aws-cli in deployment nginx (namespace: demo-s3) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy359.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────



deploy360.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'hpa-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'hpa-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "hpa-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hpa-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy360.yaml:4
────────────────────────────────────────
   4 [   name: hpa-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment hpa-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hpa-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hpa-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy360.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-apache in deployment hpa-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy360.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────



deploy361.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy361.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test
   5 │   labels:
   6 └     app: test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy361.yaml:20-21
────────────────────────────────────────
  20 ┌         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy361.yaml:19-21
────────────────────────────────────────
  19 ┌       containers:
  20 │         - image: nginx:stable-perl
  21 └           name: nginx
────────────────────────────────────────



deploy362_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy362_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy362_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy362_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy362_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy362_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy362_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy362_14.yaml:33-122
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy362_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy362_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy362_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy362_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy362_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy362_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy362_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy362_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy362_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy362_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy362_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy362_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy362_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy362_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy362_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy362_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy362_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy362_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy362_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy362_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy362_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy362_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy362_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy362_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy362_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy363_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy363_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy363_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy363_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy363_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy363_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy363_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy363_14.yaml:33-121
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy363_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



deploy363_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy363_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy363_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy363_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy363_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy363_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy363_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy363_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy363_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy363_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy363_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy363_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy363_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy363_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy363_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy363_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy363_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy363_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy363_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy363_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy363_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy363_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy363_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy363_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy364_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy364_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy364_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy364_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy364_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy364_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy364_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy364_14.yaml:33-121
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy364_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



deploy364_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy364_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy364_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy364_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy364_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy364_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy364_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy364_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy364_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy364_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy364_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy364_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy364_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy364_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy364_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy364_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy364_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy364_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy364_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy364_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy364_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy364_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy364_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy364_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy365.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'hpa-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'hpa-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "hpa-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hpa-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy365.yaml:4
────────────────────────────────────────
   4 [   name: hpa-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment hpa-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hpa-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hpa-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy365.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-apache in deployment hpa-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy365.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: jmaitrehenry/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────



deploy366_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy366_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy366_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy366_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy366_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy366_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy366_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy366_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy366_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy366_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy366_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy366_14.yaml:29-115
────────────────────────────────────────
  29 ┌       containers:
  30 │       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 └         - --ingress-class=nginx
  ..   
────────────────────────────────────────



deploy366_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy366_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy366_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy366_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy366_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy366_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy366_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy366_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy366_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy366_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy366_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy366_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy366_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────



deploy366_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy366_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy366_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy366_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy366_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy366_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy366_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy366_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy366_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy366_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy366_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy366_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy366_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy366_3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy366_3.yaml:62-70
────────────────────────────────────────
  62 ┌ - apiGroups:
  63 │   - ''
  64 │   resourceNames:
  65 │   - ingress-controller-leader
  66 │   resources:
  67 │   - configmaps
  68 │   verbs:
  69 │   - get
  70 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy366_3.yaml:71-76
────────────────────────────────────────
  71 ┌ - apiGroups:
  72 │   - ''
  73 │   resources:
  74 │   - configmaps
  75 │   verbs:
  76 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy366_3.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - pods
  26 │   - secrets
  27 │   - endpoints
  28 │   verbs:
  29 └   - get
  ..   
────────────────────────────────────────



deploy366_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy366_4.yaml:18-24
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 │   - get
  24 └   - create
────────────────────────────────────────



deploy366_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy366_5.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   - endpoints
  18 │   - nodes
  19 │   - pods
  20 │   - secrets
  21 └   - namespaces
  ..   
────────────────────────────────────────



deploy366_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy366_6.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - admissionregistration.k8s.io
  19 │   resources:
  20 │   - validatingwebhookconfigurations
  21 │   verbs:
  22 │   - get
  23 └   - update
────────────────────────────────────────



deploy369.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy369.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongodb' of Deployment 'mongodb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy369.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongodb' of 'deployment' 'mongodb' in 'workshop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy369.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy369.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy369.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy369.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy369.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy369.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongodb" of deployment "mongodb" in "workshop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy369.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy369.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongodb in workshop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy369.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongodb in workshop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy369.yaml:16-46
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 └             - "0.1"
  ..   
────────────────────────────────────────



deploy36_2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'billing-service' of Deployment 'billing-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'billing-service' of Deployment 'billing-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'billing-service' of 'deployment' 'billing-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'billing-service' of Deployment 'billing-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'billing-service' of Deployment 'billing-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'billing-service' of Deployment 'billing-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'billing-service' of Deployment 'billing-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'billing-service' of Deployment 'billing-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'billing-service' of Deployment 'billing-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'billing-service' of Deployment 'billing-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'billing-service' of Deployment 'billing-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'billing-service' of Deployment 'billing-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "billing-service" of deployment "billing-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment billing-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy36_2.yaml:4
────────────────────────────────────────
   4 [   name: billing-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container billing-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment billing-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy36_2.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 └           value: /usr/data
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container billing-service in deployment billing-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy36_2.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: billing-service
  18 │         image: skannte/billing-service:latest
  19 │         imagePullPolicy: Always
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Production
  23 │         - name: BillingServicePath
  24 │           value: /usr/data
  25 └         ports:
  ..   
────────────────────────────────────────



deploy370.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubecapsule-web' of Deployment 'kubecapsule-web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubecapsule-web' of Deployment 'kubecapsule-web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubecapsule-web' of 'deployment' 'kubecapsule-web' in 'kubecapsule-web' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubecapsule-web' of Deployment 'kubecapsule-web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubecapsule-web' of Deployment 'kubecapsule-web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubecapsule-web' of Deployment 'kubecapsule-web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubecapsule-web' of Deployment 'kubecapsule-web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubecapsule-web' of Deployment 'kubecapsule-web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubecapsule-web' of Deployment 'kubecapsule-web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubecapsule-web' of Deployment 'kubecapsule-web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubecapsule-web' of Deployment 'kubecapsule-web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubecapsule-web" of deployment "kubecapsule-web" in "kubecapsule-web" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubecapsule-web in kubecapsule-web namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubecapsule-web in kubecapsule-web namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy370.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubecapsule-web in deployment kubecapsule-web (namespace: kubecapsule-web) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy370.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: kubecapsule-web
  18 │         image: kubezy/kubecapsule:web
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────



deploy371_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy371_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy371_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy371_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy371_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy371_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy371_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy371_14.yaml:33-122
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy371_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy371_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy371_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy371_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy371_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy371_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy371_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy371_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy371_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy371_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy371_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy371_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy371_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy371_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy371_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy371_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy371_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy371_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy371_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy371_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy371_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy371_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy371_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy371_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy371_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy372_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy372_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy372_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy372_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy372_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy372_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy372_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy372_14.yaml:33-125
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy372_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy372_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy372_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy372_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy372_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy372_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy372_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy372_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy372_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy372_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy372_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy372_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy372_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy372_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy372_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy372_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy372_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy372_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy372_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy372_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy372_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy372_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy372_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy372_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy372_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy373_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy373_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy373_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy373_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy373_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy373_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy373_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy373_14.yaml:33-121
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy373_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



deploy373_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy373_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy373_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy373_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy373_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy373_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy373_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy373_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy373_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy373_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy373_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy373_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy373_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy373_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy373_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy373_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy373_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy373_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy373_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy373_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy373_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy373_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy373_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy373_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy374_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy374_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy374_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy374_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy374_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy374_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy374_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy374_14.yaml:33-122
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy374_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy374_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy374_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy374_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy374_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy374_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy374_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy374_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy374_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy374_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy374_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy374_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy374_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy374_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy374_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy374_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy374_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy374_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy374_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy374_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy374_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy374_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy374_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy374_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy374_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy375_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy375_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy375_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy375_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy375_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy375_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy375_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy375_14.yaml:33-122
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy375_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy375_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy375_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy375_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy375_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy375_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy375_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy375_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy375_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy375_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy375_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy375_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy375_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy375_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy375_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy375_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy375_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy375_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy375_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy375_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy375_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy375_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy375_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy375_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy375_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy376_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy376_14.yaml:30-109
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-nginx-leader
  34 │         - --controller-class=k8s.io/ingress-nginx
  35 │         - --ingress-class=nginx
  36 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --validating-webhook=:8443
  38 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy376_14.yaml:30-109
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-nginx-leader
  34 │         - --controller-class=k8s.io/ingress-nginx
  35 │         - --ingress-class=nginx
  36 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --validating-webhook=:8443
  38 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy376_14.yaml:30-109
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-nginx-leader
  34 │         - --controller-class=k8s.io/ingress-nginx
  35 │         - --ingress-class=nginx
  36 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --validating-webhook=:8443
  38 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy376_14.yaml:30-109
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-nginx-leader
  34 │         - --controller-class=k8s.io/ingress-nginx
  35 │         - --ingress-class=nginx
  36 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --validating-webhook=:8443
  38 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy376_14.yaml:30-109
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-nginx-leader
  34 │         - --controller-class=k8s.io/ingress-nginx
  35 │         - --ingress-class=nginx
  36 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --validating-webhook=:8443
  38 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of DaemonSet 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy376_14.yaml:30-109
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-nginx-leader
  34 │         - --controller-class=k8s.io/ingress-nginx
  35 │         - --ingress-class=nginx
  36 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --validating-webhook=:8443
  38 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): daemonset ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy376_14.yaml:29-118
────────────────────────────────────────
  29 ┌       containers:
  30 │       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-nginx-leader
  34 │         - --controller-class=k8s.io/ingress-nginx
  35 │         - --ingress-class=nginx
  36 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  37 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in daemonset ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy376_14.yaml:30-109
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-nginx-leader
  34 │         - --controller-class=k8s.io/ingress-nginx
  35 │         - --ingress-class=nginx
  36 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --validating-webhook=:8443
  38 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy376_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy376_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy376_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy376_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy376_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy376_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy376_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy376_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy376_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy376_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy376_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy376_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy376_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy376_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy376_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy376_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy376_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy376_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy376_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy376_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy376_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy376_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy376_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy376_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy377_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy377_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy377_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy377_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy377_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy377_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy377_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 deploy377_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy377_14.yaml:33-133
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy377_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



deploy377_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy377_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy377_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy377_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy377_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy377_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy377_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy377_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy377_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy377_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy377_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy377_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy377_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy377_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy377_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy377_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy377_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy377_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy377_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy377_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy377_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy377_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy377_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy377_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy378_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy378_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy378_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy378_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy378_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy378_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy378_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy378_14.yaml:33-122
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy378_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy378_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy378_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy378_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy378_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy378_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy378_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy378_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy378_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy378_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy378_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy378_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy378_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy378_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy378_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy378_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy378_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy378_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy378_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy378_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy378_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy378_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy378_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy378_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy378_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy379_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy379_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy379_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy379_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy379_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy379_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy379_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy379_14.yaml:33-122
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy379_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy379_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy379_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy379_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy379_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy379_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy379_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy379_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy379_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy379_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy379_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy379_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy379_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy379_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy379_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy379_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy379_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy379_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy379_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy379_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy379_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy379_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy379_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy379_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy379_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy380.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conversao' of Deployment 'conversao' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conversao' of Deployment 'conversao' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conversao' of 'deployment' 'conversao' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conversao' of Deployment 'conversao' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conversao' of Deployment 'conversao' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conversao' of Deployment 'conversao' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conversao' of Deployment 'conversao' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conversao' of Deployment 'conversao' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conversao' of Deployment 'conversao' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conversao' of Deployment 'conversao' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conversao' of Deployment 'conversao' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conversao" of deployment "conversao" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment conversao in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy380.yaml:4
────────────────────────────────────────
   4 [   name: conversao
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container conversao in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment conversao in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy380.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conversao in deployment conversao (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy380.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: conversao
  16 │         image: kubedevio/conversao-temperatura:v1
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           name: http
  20 └           protocol: TCP
────────────────────────────────────────



deploy381.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'my-nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'my-nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'my-nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'my-nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'my-nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'my-nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'my-nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'my-nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'my-nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'my-nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'my-nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'my-nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "my-nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy381.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-nginx
   6 │   labels:
   7 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 deploy381.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy381.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy381.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: nginx
  20 │         image: nginx:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────



deploy382.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prodnginx' of Deployment 'new-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prodnginx' of 'deployment' 'new-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prodnginx' of Deployment 'new-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prodnginx' of Deployment 'new-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prodnginx' of Deployment 'new-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prodnginx" of deployment "new-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment new-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy382.yaml:4-6
────────────────────────────────────────
   4 ┌   name: new-deploy
   5 │   labels:
   6 └     app: account
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container new-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy382.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment new-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy382.yaml:18-20
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────



deploy383.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prodnginx' of Deployment 'new-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prodnginx' of 'deployment' 'new-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prodnginx' of Deployment 'new-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prodnginx' of Deployment 'new-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prodnginx' of Deployment 'new-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prodnginx' of Deployment 'new-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prodnginx" of deployment "new-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment new-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy383.yaml:4-6
────────────────────────────────────────
   4 ┌   name: new-deploy
   5 │   labels:
   6 └     app: account
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container new-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy383.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment new-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy383.yaml:18-20
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: nginx
  20 └         name: prodnginx
────────────────────────────────────────



deploy384.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'deployment-svc-ex' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'deployment-svc-ex' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'deployment-svc-ex' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'deployment-svc-ex' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'deployment-svc-ex' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'deployment-svc-ex' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'deployment-svc-ex' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'deployment-svc-ex' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'deployment-svc-ex' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'deployment-svc-ex' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'deployment-svc-ex' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "deployment-svc-ex" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment deployment-svc-ex in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy384.yaml:4
────────────────────────────────────────
   4 [   name: deployment-svc-ex
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment deployment-svc-ex in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deployment-svc-ex in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy384.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deployment-svc-ex in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy384.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: nginx:1.19.1
  17 │         name: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



deploy387_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy387_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy387_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy387_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy387_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy387_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy387_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy387_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy387_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy387_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy387_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy387_14.yaml:29-115
────────────────────────────────────────
  29 ┌       containers:
  30 │       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 └         - --ingress-class=nginx
  ..   
────────────────────────────────────────



deploy387_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy387_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy387_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy387_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy387_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy387_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy387_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy387_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy387_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy387_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy387_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy387_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy387_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────



deploy387_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy387_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy387_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy387_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy387_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy387_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy387_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy387_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy387_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy387_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy387_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy387_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy387_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy387_3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy387_3.yaml:62-70
────────────────────────────────────────
  62 ┌ - apiGroups:
  63 │   - ''
  64 │   resourceNames:
  65 │   - ingress-controller-leader
  66 │   resources:
  67 │   - configmaps
  68 │   verbs:
  69 │   - get
  70 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy387_3.yaml:71-76
────────────────────────────────────────
  71 ┌ - apiGroups:
  72 │   - ''
  73 │   resources:
  74 │   - configmaps
  75 │   verbs:
  76 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy387_3.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - pods
  26 │   - secrets
  27 │   - endpoints
  28 │   verbs:
  29 └   - get
  ..   
────────────────────────────────────────



deploy387_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy387_4.yaml:18-24
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 │   - get
  24 └   - create
────────────────────────────────────────



deploy387_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy387_5.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   - endpoints
  18 │   - nodes
  19 │   - pods
  20 │   - secrets
  21 └   - namespaces
  ..   
────────────────────────────────────────



deploy387_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy387_6.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - admissionregistration.k8s.io
  19 │   resources:
  20 │   - validatingwebhookconfigurations
  21 │   verbs:
  22 │   - get
  23 └   - update
────────────────────────────────────────



deploy39.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'app1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'app1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'app1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'app1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'app1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'app1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'app1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'app1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'app1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'app1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'app1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "app1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy39.yaml:4
────────────────────────────────────────
   4 [   name: app1
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment app1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy39.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy39.yaml:16-33
────────────────────────────────────────
  16 ┌       affinity:
  17 │         podAffinity:
  18 │           requiredDuringSchedulingIgnoredDuringExecution:
  19 │           - labelSelector:
  20 │               matchExpressions:
  21 │               - key: appGroup
  22 │                 operator: In
  23 │                 values:
  24 └                 - affinitydemo
  ..   
────────────────────────────────────────



deploy390.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'certs-syncer' of Deployment 'certs-syncer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'certs-syncer' of Deployment 'certs-syncer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'certs-syncer' of 'deployment' 'certs-syncer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'certs-syncer' of Deployment 'certs-syncer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'certs-syncer' of Deployment 'certs-syncer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'certs-syncer' of Deployment 'certs-syncer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'certs-syncer' of Deployment 'certs-syncer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'certs-syncer' of Deployment 'certs-syncer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'certs-syncer' of Deployment 'certs-syncer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "certs-syncer" of deployment "certs-syncer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment certs-syncer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy390.yaml:4
────────────────────────────────────────
   4 [   name: certs-syncer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container certs-syncer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment certs-syncer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy390.yaml:14-39
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container certs-syncer in deployment certs-syncer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy390.yaml:15-31
────────────────────────────────────────
  15 ┌       - name: certs-syncer
  16 │         image: docker.io/webofmars/certs-syncer:0.2.1
  17 │         env:
  18 │           - name: NAMESPACE
  19 │             valueFrom:
  20 │               fieldRef:
  21 │                 fieldPath: metadata.namespace
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────



deploy391.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'back-up-service' of Deployment 'back-up-service-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'back-up-service' of Deployment 'back-up-service-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'back-up-service' of 'deployment' 'back-up-service-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'back-up-service' of Deployment 'back-up-service-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'back-up-service' of Deployment 'back-up-service-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'back-up-service' of Deployment 'back-up-service-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'back-up-service' of Deployment 'back-up-service-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'back-up-service' of Deployment 'back-up-service-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'back-up-service' of Deployment 'back-up-service-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'back-up-service' of Deployment 'back-up-service-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'back-up-service' of Deployment 'back-up-service-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'back-up-service' of Deployment 'back-up-service-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "back-up-service" of deployment "back-up-service-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment back-up-service-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy391.yaml:4
────────────────────────────────────────
   4 [   name: back-up-service-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container back-up-service-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment back-up-service-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy391.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: back-up-service
  17 │         image: suyog23/back-up-service
  18 │       
  19 │       volumes:
  20 │       - name: backup-data-volume
  21 │         persistentVolumeClaim:
  22 └           claimName: backup_pvc
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container back-up-service in deployment back-up-service-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy391.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: back-up-service
  17 └         image: suyog23/back-up-service
────────────────────────────────────────



deploy393.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy393.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongodb' of Deployment 'mongodb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy393.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongodb' of 'deployment' 'mongodb' in 'workshop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy393.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy393.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy393.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy393.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongodb' of Deployment 'mongodb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy393.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy393.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongodb" of deployment "mongodb" in "workshop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy393.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy393.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongodb in workshop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy393.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 │             - "0.1"
  25 └             - "--bind_ip"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongodb in workshop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy393.yaml:16-35
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: mongodb
  18 │         image: mongo:4.4.6
  19 │         command:
  20 │             - "numactl"
  21 │             - "--interleave=all"
  22 │             - "mongod"
  23 │             - "--wiredTigerCacheSizeGB"
  24 └             - "0.1"
  ..   
────────────────────────────────────────



deploy394.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'blueapp' of Deployment 'blueapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'blueapp' of 'deployment' 'blueapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "blueapp" of deployment "blueapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment blueapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy394.yaml:4-6
────────────────────────────────────────
   4 ┌   name: blueapp
   5 │   labels:
   6 └     app: blue
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment blueapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container blueapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment blueapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy394.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container blueapp in deployment blueapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy394.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



deploy394_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'greenapp' of Deployment 'greenapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'greenapp' of 'deployment' 'greenapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "greenapp" of deployment "greenapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment greenapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy394_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: greenapp
   5 │   labels:
   6 └     app: green
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment greenapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container greenapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment greenapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy394_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container greenapp in deployment greenapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy394_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



deploy394_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'todoapp' of Deployment 'todoapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'todoapp' of 'deployment' 'todoapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'todoapp' of Deployment 'todoapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "todoapp" of deployment "todoapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todoapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy394_4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todoapp
   5 │   labels:
   6 └     app: todo
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todoapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todoapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todoapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy394_4.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container todoapp in deployment todoapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy394_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



deploy395.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'blueapp' of Deployment 'blueapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'blueapp' of 'deployment' 'blueapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'blueapp' of Deployment 'blueapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "blueapp" of deployment "blueapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment blueapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy395.yaml:4-6
────────────────────────────────────────
   4 ┌   name: blueapp
   5 │   labels:
   6 └     app: blue
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment blueapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container blueapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment blueapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy395.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container blueapp in deployment blueapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy395.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: blueapp
  19 │         image: ozgurozturknet/k8s:blue
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



deploy395_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'greenapp' of Deployment 'greenapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'greenapp' of 'deployment' 'greenapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'greenapp' of Deployment 'greenapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "greenapp" of deployment "greenapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment greenapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy395_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: greenapp
   5 │   labels:
   6 └     app: green
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment greenapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container greenapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment greenapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy395_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container greenapp in deployment greenapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy395_2.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: greenapp
  19 │         image: ozgurozturknet/k8s:green
  20 │         ports:
  21 │         - containerPort: 80
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthcheck
  25 │             port: 80
  26 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



deploy395_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'todoapp' of Deployment 'todoapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'todoapp' of 'deployment' 'todoapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'todoapp' of Deployment 'todoapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'todoapp' of Deployment 'todoapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "todoapp" of deployment "todoapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todoapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy395_4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todoapp
   5 │   labels:
   6 └     app: todo
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment todoapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todoapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todoapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy395_4.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container todoapp in deployment todoapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy395_4.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todoapp
  19 │         image: ozgurozturknet/samplewebapp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



deploy396_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysqldeployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysqldeployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysqldeployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'mysqldeployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysqldeployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysqldeployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysqldeployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysqldeployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy396_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysqldeployment
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysqldeployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy396_1.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 │         env:
  28 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysqldeployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy396_1.yaml:19-36
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: mysql
  21 │         image: mysql
  22 │         ports:
  23 │         - containerPort: 3306
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/mysql
  26 │           name: mysqlvolume
  27 └         env:
  ..   
────────────────────────────────────────



deploy397.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend' of Deployment 'frontend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy397.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend
   5 │   labels:
   6 └     team: development
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy397.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy397.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: frontend
  19 │         image: nginx:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



deploy397_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'backend' of Deployment 'backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'backend' of Deployment 'backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'backend' of 'deployment' 'backend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'backend' of Deployment 'backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'backend' of Deployment 'backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'backend' of Deployment 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'backend' of Deployment 'backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'backend' of Deployment 'backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'backend' of Deployment 'backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'backend' of Deployment 'backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'backend' of Deployment 'backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "backend" of deployment "backend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment backend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy397_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: backend
   5 │   labels:
   6 └     team: development
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container backend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment backend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy397_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container backend in deployment backend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy397_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: ozgurozturknet/k8s:backend
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────



deploy399.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy399.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy399.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy399.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80 
────────────────────────────────────────



deploy39_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'app2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'app2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'app2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'app2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'app2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'app2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'app2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'app2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'app2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'app2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'app2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "app2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy39_1.yaml:4
────────────────────────────────────────
   4 [   name: app2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment app2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy39_1.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: nginx
  28 │         image: nginx:latest
  29 │         ports:
  30 │         - containerPort: 80
  31 │         resources:
  32 │           requests:
  33 └             cpu: 750m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy39_1.yaml:16-33
────────────────────────────────────────
  16 ┌       affinity:
  17 │         podAffinity:
  18 │           requiredDuringSchedulingIgnoredDuringExecution:
  19 │           - labelSelector:
  20 │               matchExpressions:
  21 │               - key: appGroup
  22 │                 operator: In
  23 │                 values:
  24 └                 - affinitydemo
  ..   
────────────────────────────────────────



deploy400.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'hpa-example' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'hpa-example' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'hpa-example' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'hpa-example' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'hpa-example' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'hpa-example' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'hpa-example' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'hpa-example' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'hpa-example' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'hpa-example' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "hpa-example" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hpa-example in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy400.yaml:4
────────────────────────────────────────
   4 [   name: hpa-example
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hpa-example in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy400.yaml:16-21
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hpa-example in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy400.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: nginx:latest
  17 │         name: nginx
  18 │         resources:
  19 │           requests:
  20 │             memory: "128M"
  21 └             cpu: "500m"
────────────────────────────────────────



deploy401.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy401.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 │           limits:
  24 │             cpu: 70m
  25 └             memory: 70Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy401.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 │           limits:
  24 │             cpu: 70m
  25 └             memory: 70Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy401.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 │           limits:
  24 │             cpu: 70m
  25 └             memory: 70Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy401.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 │           limits:
  24 │             cpu: 70m
  25 └             memory: 70Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy401.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 │           limits:
  24 │             cpu: 70m
  25 └             memory: 70Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy401.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 │           limits:
  24 │             cpu: 70m
  25 └             memory: 70Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy401.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 │           limits:
  24 │             cpu: 70m
  25 └             memory: 70Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy401.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 │           limits:
  24 │             cpu: 70m
  25 └             memory: 70Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy401.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 │           limits:
  24 │             cpu: 70m
  25 └             memory: 70Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy401.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 │           limits:
  24 │             cpu: 70m
  25 └             memory: 70Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy401.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy401.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 │           limits:
  24 │             cpu: 70m
  25 └             memory: 70Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy401.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy401.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 50m
  21 │             memory: 50Mi
  22 │             ephemeral-storage: 5Gi
  23 │           limits:
  24 │             cpu: 70m
  25 └             memory: 70Mi
────────────────────────────────────────



deploy402.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy402.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy402.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy402.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:2
────────────────────────────────────────



deploy403.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy403.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy403.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy403.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 └         image: docker.io/wdenniss/timeserver:1
────────────────────────────────────────



deploy404.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy404.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy404.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy404.yaml:15-18
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: timeserver:latest
  18 └         imagePullPolicy: Never
────────────────────────────────────────



deploy405.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy405.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy405.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy405.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────



deploy406.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy406.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy406.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy406.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:1
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────



deploy407.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy407.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy407.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy407.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:2
  18 │         readinessProbe:
  19 │           initialDelaySeconds: 15
  20 │           periodSeconds: 30
  21 │           httpGet:
  22 │             path: /readyz
  23 │             port: 80
  24 └             scheme: HTTP
  ..   
────────────────────────────────────────



deploy408.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy408.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy408.yaml:20-22
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy408.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: timeserver-container
  22 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────



deploy409.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy409.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy409.yaml:17-19
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy409.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 └         image: docker.io/wdenniss/timeserver:3
────────────────────────────────────────



deploy41.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'todo' of Deployment 'todo-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'todo' of Deployment 'todo-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'todo' of 'deployment' 'todo-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'todo' of Deployment 'todo-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'todo' of Deployment 'todo-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'todo' of Deployment 'todo-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'todo' of Deployment 'todo-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'todo' of Deployment 'todo-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'todo' of Deployment 'todo-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'todo' of Deployment 'todo-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'todo' of Deployment 'todo-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "todo" of deployment "todo-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy41.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todo-app
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy41.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container todo in deployment todo-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy41.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: todo
  19 │         image: abhishekf5/todo-app:v1
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────



deploy410.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy410.yaml:5
────────────────────────────────────────
   5 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy410.yaml:16-23
────────────────────────────────────────
  16 ┌       priorityClassName: high-priority
  17 │       containers:
  18 │       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy410.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: timeserver-container
  19 │         image: docker.io/wdenniss/timeserver:1
  20 │         resources:
  21 │           requests:
  22 │             cpu: 200m
  23 └             memory: 250Mi
────────────────────────────────────────



deploy411.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy411.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy411.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy411.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────



deploy412.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy412.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy412.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy412.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:3
  18 │         resources:
  19 │           requests:
  20 │             cpu: 200m
  21 └             memory: 250Mi
────────────────────────────────────────



deploy413.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy413.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy413.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy413.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────



deploy414.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy414.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy414.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy414.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:4
  18 │         resources:
  19 │           requests:
  20 │             cpu: 250m
  21 └             memory: 250Mi
────────────────────────────────────────



deploy415.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy415.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy415.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy415.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         env:
  19 │         - name: AVATAR_ENDPOINT
  20 │           value: http://robohash-internal
  21 │         - name: SECRET_KEY
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: secrets-production
  25 └               key: SECRET_KEY
────────────────────────────────────────



deploy416.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy416.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container timeserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy416.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 │           readOnly: true
  22 │       volumes:
  23 └       - name: secret-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy416.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:5
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: "/etc/config"
  21 └           readOnly: true
────────────────────────────────────────



deploy417.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy417.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy417.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy417.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:6
  18 │         securityContext:
  19 └           runAsNonRoot: true
────────────────────────────────────────



deploy418.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'timeserver-container' of 'deployment' 'timeserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'timeserver-container' of Deployment 'timeserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "timeserver-container" of deployment "timeserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment timeserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy418.yaml:4
────────────────────────────────────────
   4 [   name: timeserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment timeserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy418.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container timeserver-container in deployment timeserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy418.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: timeserver-container
  17 │         image: docker.io/wdenniss/timeserver:7
  18 │         securityContext:
  19 │           runAsNonRoot: true
  20 └           runAsUser: 1001
────────────────────────────────────────



deploy419.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'node.js-express-app' of Deployment 'node.js-express-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'node.js-express-app' of Deployment 'node.js-express-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'node.js-express-app' of 'deployment' 'node.js-express-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'node.js-express-app' of Deployment 'node.js-express-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'node.js-express-app' of Deployment 'node.js-express-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'node.js-express-app' of Deployment 'node.js-express-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'node.js-express-app' of Deployment 'node.js-express-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'node.js-express-app' of Deployment 'node.js-express-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'node.js-express-app' of Deployment 'node.js-express-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'node.js-express-app' of Deployment 'node.js-express-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'node.js-express-app' of Deployment 'node.js-express-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "node.js-express-app" of deployment "node.js-express-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment node.js-express-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy419.yaml:4-6
────────────────────────────────────────
   4 ┌   name: node.js-express-app
   5 │   labels:
   6 └     app: node.js-express-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment node.js-express-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container node.js-express-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment node.js-express-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy419.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container node.js-express-app in deployment node.js-express-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy419.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: node.js-express-app
  19 │         image: rajeevmagar/all-in-one:v1.0.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



deploy42.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'parrot-core' of Deployment 'parrot-core' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'parrot-core' of Deployment 'parrot-core' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'parrot-core' of 'deployment' 'parrot-core' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'parrot-core' of Deployment 'parrot-core' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'parrot-core' of Deployment 'parrot-core' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'parrot-core' of Deployment 'parrot-core' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'parrot-core' of Deployment 'parrot-core' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'parrot-core' of Deployment 'parrot-core' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'parrot-core' of Deployment 'parrot-core' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'parrot-core' of Deployment 'parrot-core' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'parrot-core' of Deployment 'parrot-core' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'parrot-core' of Deployment 'parrot-core' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "parrot-core" of deployment "parrot-core" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment parrot-core in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy42.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: parrot-core
   7 └   name: parrot-core
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container parrot-core in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment parrot-core in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy42.yaml:20-27
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container parrot-core in deployment parrot-core (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy42.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-core
  22 │         name: parrot-core
  23 │         ports:
  24 │         - containerPort: 8088
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────



deploy420.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-flask-app' of Deployment 'python-flask-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-flask-app' of Deployment 'python-flask-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-flask-app' of 'deployment' 'python-flask-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-flask-app' of Deployment 'python-flask-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-flask-app' of Deployment 'python-flask-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-flask-app' of Deployment 'python-flask-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-flask-app' of Deployment 'python-flask-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-flask-app' of Deployment 'python-flask-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-flask-app' of Deployment 'python-flask-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-flask-app' of Deployment 'python-flask-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-flask-app' of Deployment 'python-flask-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-flask-app" of deployment "python-flask-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-flask-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy420.yaml:4-6
────────────────────────────────────────
   4 ┌   name: python-flask-app
   5 │   labels:
   6 └     app: python-flask-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment python-flask-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-flask-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-flask-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy420.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container python-flask-app in deployment python-flask-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy420.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-flask-app
  19 │         image: rajeevmagar/all-in-one:v1.0.6
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



deploy422.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in dev namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in dev namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy422.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: dev) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy422.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: myapp
  18 │         image: wil42/playground:v2
  19 │         ports:
  20 └         - containerPort: 8888
────────────────────────────────────────



deploy423.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy423.yaml:4
────────────────────────────────────────
   4 [   name: nginx-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy423.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy423.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx-container
  17 └         image: nginx:latest
────────────────────────────────────────



deploy424.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy424.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy424.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy424.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
  ..   
────────────────────────────────────────



deploy425.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy425.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy425.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy425.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy425.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy425.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy425.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy425.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy425.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy425.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy425.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy425.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy425.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment1
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy425.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy425.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 └             cpu: "250m"
  ..   
────────────────────────────────────────



deploy426.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy426.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy426.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy426.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
  ..   
────────────────────────────────────────



deploy427.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy427.yaml:5
────────────────────────────────────────
   5 [   name: nginx-deployment3
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment3 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy427.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy427.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 │           mountPath: /usr/share/nginx/html
  24 └       volumes:
  ..   
────────────────────────────────────────



deploy428.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy428.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy428.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy428.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy428.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy428.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy428.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy428.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy428.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy428.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy428.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy428.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy428.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment1
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy428.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy428.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 └             cpu: "250m"
  ..   
────────────────────────────────────────



deploy429.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy429.yaml:5
────────────────────────────────────────
   5 [   name: nginx-deployment2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy429.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy429.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 │           mountPath: /usr/share/nginx/html
  24 └       volumes:
  ..   
────────────────────────────────────────



deploy43.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'parrot-security' of Deployment 'parrot-security' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'parrot-security' of Deployment 'parrot-security' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'parrot-security' of 'deployment' 'parrot-security' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'parrot-security' of Deployment 'parrot-security' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'parrot-security' of Deployment 'parrot-security' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'parrot-security' of Deployment 'parrot-security' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'parrot-security' of Deployment 'parrot-security' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'parrot-security' of Deployment 'parrot-security' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'parrot-security' of Deployment 'parrot-security' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'parrot-security' of Deployment 'parrot-security' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'parrot-security' of Deployment 'parrot-security' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'parrot-security' of Deployment 'parrot-security' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "parrot-security" of deployment "parrot-security" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment parrot-security in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy43.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: parrot-securty
   7 └   name: parrot-security
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container parrot-security in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment parrot-security in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy43.yaml:20-27
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container parrot-security in deployment parrot-security (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy43.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: lostcauze7/parrot-security
  22 │         name: parrot-security
  23 │         ports:
  24 │         - containerPort: 8087
  25 │         imagePullPolicy: Always
  26 │         command: ["/bin/sleep", "3650d"]
  27 └         resources: {}
────────────────────────────────────────



deploy430.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy430.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy430.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy430.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
  ..   
────────────────────────────────────────



deploy431.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy431.yaml:5
────────────────────────────────────────
   5 [   name: nginx-deployment3
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment3 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy431.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy431.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 │           mountPath: /usr/share/nginx/html
  24 └       volumes:
  ..   
────────────────────────────────────────



deploy432.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy432.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy432.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy432.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy432.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy432.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy432.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy432.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy432.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy432.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy432.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy432.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy432.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment1
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy432.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy432.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 └             cpu: "250m"
  ..   
────────────────────────────────────────



deploy433.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy433.yaml:5
────────────────────────────────────────
   5 [   name: nginx-deployment2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy433.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy433.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 │           mountPath: /usr/share/nginx/html
  24 └       volumes:
  ..   
────────────────────────────────────────



deploy434.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'deploy' of Job 'deploy-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'deploy' of Job 'deploy-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'deploy' of 'job' 'deploy-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'deploy' of Job 'deploy-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'deploy' of Job 'deploy-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'deploy' of Job 'deploy-job' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'deploy' of Job 'deploy-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'deploy' of Job 'deploy-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'deploy' of Job 'deploy-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'deploy' of Job 'deploy-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'deploy' of Job 'deploy-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'deploy' of Job 'deploy-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "deploy" of job "deploy-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0110 (LOW): job deploy-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy434.yaml:4
────────────────────────────────────────
   4 [   name: deploy-job
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deploy-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job deploy-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy434.yaml:8-32
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 │           - |
  14 │             mkdir -p /etc/config &&
  15 │             echo "$KUBE_CRT" > /etc/config/ca.crt &&
  16 └             kubectl config set-cluster default --server="$KUBE_URL" --certificate-authority=/etc/config/ca.crt &&
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container deploy in job deploy-job (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy434.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: deploy
  10 │         image: dtzar/helm-kubectl
  11 │         command: ["/bin/sh", "-c"]
  12 │         args:
  13 └           - |
────────────────────────────────────────



deploy435.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'shell' of Deployment 'pvdeploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'shell' of Deployment 'pvdeploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'shell' of 'deployment' 'pvdeploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'shell' of Deployment 'pvdeploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'shell' of Deployment 'pvdeploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'shell' of Deployment 'pvdeploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'shell' of Deployment 'pvdeploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'shell' of Deployment 'pvdeploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'shell' of Deployment 'pvdeploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'shell' of Deployment 'pvdeploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'shell' of Deployment 'pvdeploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'shell' of Deployment 'pvdeploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "shell" of deployment "pvdeploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pvdeploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy435.yaml:4
────────────────────────────────────────
   4 [   name: pvdeploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pvdeploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy435.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 └           mountPath: "/tmp/persistent"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pvdeploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy435.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: shell
  17 │         image: centos
  18 │         command: ["bin/bash", "-c", "sleep 10000"]
  19 │         volumeMounts:
  20 │         - name: mypd
  21 │           mountPath: "/tmp/persistent"
  22 │       volumes:
  23 └         - name: mypd
  ..   
────────────────────────────────────────



deploy436_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy436_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy436_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy436_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy436_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy436_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy436_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy436_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy436_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy436_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy436_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy436_14.yaml:33-120
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy436_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy436_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy436_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy436_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy436_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy436_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy436_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy436_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy436_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy436_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy436_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy436_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy436_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy437_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy437_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy437_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy437_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy437_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy437_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy437_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy437_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy437_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy437_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy437_14.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy437_14.yaml:29-115
────────────────────────────────────────
  29 ┌       containers:
  30 │       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-backend-service
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 └         - --ingress-class=nginx
  ..   
────────────────────────────────────────



deploy437_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy437_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy437_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy437_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy437_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy437_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy437_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy437_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy437_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy437_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy437_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy437_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy437_15.yaml:31-45
────────────────────────────────────────
  31 ┌       - args:
  32 │         - create
  33 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --secret-name=ingress-nginx-admission
  36 │         env:
  37 │         - name: POD_NAMESPACE
  38 │           valueFrom:
  39 └             fieldRef:
  ..   
────────────────────────────────────────



deploy437_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy437_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy437_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy437_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy437_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy437_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy437_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy437_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy437_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy437_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy437_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy437_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy437_16.yaml:31-47
────────────────────────────────────────
  31 ┌       - args:
  32 │         - patch
  33 │         - --webhook-name=ingress-nginx-admission
  34 │         - --namespace=$(POD_NAMESPACE)
  35 │         - --patch-mutating=false
  36 │         - --secret-name=ingress-nginx-admission
  37 │         - --patch-failure-policy=Fail
  38 │         env:
  39 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy437_3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy437_3.yaml:62-70
────────────────────────────────────────
  62 ┌ - apiGroups:
  63 │   - ''
  64 │   resourceNames:
  65 │   - ingress-controller-leader
  66 │   resources:
  67 │   - configmaps
  68 │   verbs:
  69 │   - get
  70 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy437_3.yaml:71-76
────────────────────────────────────────
  71 ┌ - apiGroups:
  72 │   - ''
  73 │   resources:
  74 │   - configmaps
  75 │   verbs:
  76 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy437_3.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - pods
  26 │   - secrets
  27 │   - endpoints
  28 │   verbs:
  29 └   - get
  ..   
────────────────────────────────────────



deploy437_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy437_4.yaml:18-24
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 │   - get
  24 └   - create
────────────────────────────────────────



deploy437_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy437_5.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   - endpoints
  18 │   - nodes
  19 │   - pods
  20 │   - secrets
  21 └   - namespaces
  ..   
────────────────────────────────────────



deploy437_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy437_6.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - admissionregistration.k8s.io
  19 │   resources:
  20 │   - validatingwebhookconfigurations
  21 │   verbs:
  22 │   - get
  23 └   - update
────────────────────────────────────────



deploy439.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy439.yaml:19-22
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy439.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           ports:
  22 └             - containerPort: 80
────────────────────────────────────────



deploy44.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'parrot-core-s' of Deployment 'parrot-core-systemd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'parrot-core-s' of Deployment 'parrot-core-systemd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'parrot-core-s' of 'deployment' 'parrot-core-systemd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'parrot-core-s' of Deployment 'parrot-core-systemd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'parrot-core-s' of Deployment 'parrot-core-systemd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'parrot-core-s' of Deployment 'parrot-core-systemd' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'parrot-core-s' of Deployment 'parrot-core-systemd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'parrot-core-s' of Deployment 'parrot-core-systemd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'parrot-core-s' of Deployment 'parrot-core-systemd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'parrot-core-s' of Deployment 'parrot-core-systemd' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'parrot-core-s' of Deployment 'parrot-core-systemd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'parrot-core-s' of Deployment 'parrot-core-systemd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'parrot-core-s' of Deployment 'parrot-core-systemd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "parrot-core-s" of deployment "parrot-core-systemd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment parrot-core-systemd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy44.yaml:4
────────────────────────────────────────
   4 [   name: parrot-core-systemd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment parrot-core-systemd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy44.yaml:15-30
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 └         command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container parrot-core-s in deployment parrot-core-systemd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy44.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-core-s
  17 │         image: lostcauze7/parrot-core-systemd
  18 │         ports:
  19 │         - containerPort: 8088
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────



deploy440.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'httpd' of Deployment 'test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'httpd' of Deployment 'test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'httpd' of 'deployment' 'test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'httpd' of Deployment 'test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'httpd' of Deployment 'test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'httpd' of Deployment 'test' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'httpd' of Deployment 'test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'httpd' of Deployment 'test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'httpd' of Deployment 'test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'httpd' of Deployment 'test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'httpd' of Deployment 'test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'httpd' of Deployment 'test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "httpd" of deployment "test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy440.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: test
   7 └   name: test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy440.yaml:21-23
────────────────────────────────────────
  21 ┌         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy440.yaml:20-23
────────────────────────────────────────
  20 ┌       containers:
  21 │         - image: httpd
  22 │           name: httpd
  23 └           resources: {}
────────────────────────────────────────



deploy441.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'hpa-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'hpa-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'hpa-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "hpa-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hpa-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy441.yaml:4
────────────────────────────────────────
   4 [   name: hpa-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment hpa-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hpa-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hpa-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy441.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-apache in deployment hpa-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy441.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: guybarrette/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────



deploy442.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of StatefulSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of StatefulSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'statefulset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of StatefulSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of StatefulSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of StatefulSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of StatefulSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of StatefulSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of StatefulSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of StatefulSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of StatefulSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of StatefulSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of statefulset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy442.yaml:23-32
────────────────────────────────────────
  23 ┌         - name: nginx
  24 │           image: nginx
  25 │           imagePullPolicy: IfNotPresent
  26 │           volumeMounts:
  27 │             - mountPath: /data
  28 │               name: test
  29 │           command:
  30 │             - tail
  31 │             - -f
  32 └             - /dev/null
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy442.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────



deploy443_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 92, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 10, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container-network-tracer' of DaemonSet 'container-network-tracer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0002 (LOW): Container 'container-network-tracer' of DaemonSet 'container-network-tracer' should specify an AppArmor profile
════════════════════════════════════════
According to pod security standard 'AppArmor', the AppArmor key must be set to the runtime/default profile or to be undefined.

See https://avd.aquasec.com/misconfig/ksv002
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0005 (HIGH): Container 'container-network-tracer' of DaemonSet 'container-network-tracer' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container-network-tracer' of DaemonSet 'container-network-tracer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container-network-tracer' of DaemonSet 'container-network-tracer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container-network-tracer' of DaemonSet 'container-network-tracer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container-network-tracer' of DaemonSet 'container-network-tracer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container-network-tracer' of DaemonSet 'container-network-tracer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container-network-tracer' of DaemonSet 'container-network-tracer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container-network-tracer' of DaemonSet 'container-network-tracer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container-network-tracer' of DaemonSet 'container-network-tracer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'container-network-tracer' of DaemonSet 'container-network-tracer' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'container-network-tracer' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 deploy443_6.yaml:7-106
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: container-network-tracer
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: container-network-tracer
  14 │       annotations:
  15 └         container.apparmor.security.beta.kubernetes.io/container-network-tracer: unconfined
  ..   
────────────────────────────────────────


AVD-KSV-0025 (MEDIUM): DaemonSet 'container-network-tracer' uses invalid seLinux type 'super_t'
════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
────────────────────────────────────────
 deploy443_6.yaml:7-106
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: container-network-tracer
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: container-network-tracer
  14 │       annotations:
  15 └         container.apparmor.security.beta.kubernetes.io/container-network-tracer: unconfined
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container-network-tracer" of daemonset "container-network-tracer" in "gadget-examples" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 deploy443_6.yaml:92-106
────────────────────────────────────────
  92 ┌           privileged: false
  93 │           runAsUser: 0
  94 │           seLinuxOptions:
  95 │             type: super_t
  96 │           capabilities:
  97 │             add:
  98 │             - SYS_ADMIN
  99 │             - SYSLOG
 100 └             - SYS_PTRACE
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy443_6.yaml:97-106
────────────────────────────────────────
  97 ┌             add:
  98 │             - SYS_ADMIN
  99 │             - SYSLOG
 100 │             - SYS_PTRACE
 101 │             - SYS_RESOURCE
 102 │             - IPC_LOCK
 103 │             - NET_ADMIN
 104 │             - NET_RAW
 105 │             drop:
 106 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset container-network-tracer in gadget-examples namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy443_6.yaml:17-106
────────────────────────────────────────
  17 ┌       serviceAccountName: container-network-tracer
  18 │       automountServiceAccountToken: true
  19 │       tolerations:
  20 │       - key: node-role.kubernetes.io/control-plane
  21 │         operator: Exists
  22 │         effect: NoSchedule
  23 │       - key: node-role.kubernetes.io/master
  24 │         operator: Exists
  25 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container container-network-tracer of daemonset container-network-tracer in gadget-examples namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset container-network-tracer in gadget-examples namespace shouldn't have volumes set to {"/etc", "/proc", "/usr"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 deploy443_6.yaml:7-106
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: container-network-tracer
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: container-network-tracer
  14 │       annotations:
  15 └         container.apparmor.security.beta.kubernetes.io/container-network-tracer: unconfined
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container-network-tracer in daemonset container-network-tracer (namespace: gadget-examples) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy443_6.yaml:58-106
────────────────────────────────────────
  58 ┌       - name: container-network-tracer
  59 │         image: docker.io/gadget/container-network-tracer:v1alpha1
  60 │         imagePullPolicy: IfNotPresent
  61 │         env:
  62 │         - name: HOST_ROOT
  63 │           value: /host
  64 │         volumeMounts:
  65 │         - name: bin
  66 └           mountPath: /host/bin
  ..   
────────────────────────────────────────



deploy444_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gadget' of DaemonSet 'gadget-container-collection' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gadget' of DaemonSet 'gadget-container-collection' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gadget' of 'daemonset' 'gadget-container-collection' in 'gadget-container-collection' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0005 (HIGH): Container 'gadget' of DaemonSet 'gadget-container-collection' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gadget' of DaemonSet 'gadget-container-collection' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gadget' of DaemonSet 'gadget-container-collection' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'gadget' of DaemonSet 'gadget-container-collection' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gadget' of DaemonSet 'gadget-container-collection' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gadget' of DaemonSet 'gadget-container-collection' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gadget' of DaemonSet 'gadget-container-collection' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gadget' of DaemonSet 'gadget-container-collection' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gadget' of DaemonSet 'gadget-container-collection' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gadget' of DaemonSet 'gadget-container-collection' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'gadget' of DaemonSet 'gadget-container-collection' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'gadget-container-collection' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 deploy444_4.yaml:9-74
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: gadget-container-collection
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: gadget-container-collection
  16 │     spec:
  17 └       serviceAccount: gadget-container-collection
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gadget" of daemonset "gadget-container-collection" in "gadget-container-collection" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy444_4.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: NODE_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset gadget-container-collection in gadget-container-collection namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy444_4.yaml:17-74
────────────────────────────────────────
  17 ┌       serviceAccount: gadget-container-collection
  18 │       hostPID: false
  19 │       hostNetwork: false
  20 │       containers:
  21 │       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-kube-container-collection:latest
  24 │         imagePullPolicy: Always
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset gadget-container-collection in gadget-container-collection namespace shouldn't have volumes set to {"/"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 deploy444_4.yaml:9-74
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: gadget-container-collection
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: gadget-container-collection
  16 │     spec:
  17 └       serviceAccount: gadget-container-collection
  ..   
────────────────────────────────────────



deploy445_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gadget' of DaemonSet 'runc-hook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gadget' of DaemonSet 'runc-hook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gadget' of 'daemonset' 'runc-hook' in 'runc-hook' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0005 (HIGH): Container 'gadget' of DaemonSet 'runc-hook' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gadget' of DaemonSet 'runc-hook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gadget' of DaemonSet 'runc-hook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'gadget' of DaemonSet 'runc-hook' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gadget' of DaemonSet 'runc-hook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gadget' of DaemonSet 'runc-hook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gadget' of DaemonSet 'runc-hook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gadget' of DaemonSet 'runc-hook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gadget' of DaemonSet 'runc-hook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gadget' of DaemonSet 'runc-hook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'gadget' of DaemonSet 'runc-hook' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'runc-hook' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 deploy445_4.yaml:9-81
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: runc-hook
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: runc-hook
  16 │     spec:
  17 └       serviceAccount: runc-hook
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gadget" of daemonset "runc-hook" in "runc-hook" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy445_4.yaml:21-57
────────────────────────────────────────
  21 ┌       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 │         command:
  26 │         - runc-hook
  27 │         args:
  28 │         - -publish-kubernetes-event=true
  29 └         - -output=add,remove,config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset runc-hook in runc-hook namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy445_4.yaml:17-81
────────────────────────────────────────
  17 ┌       serviceAccount: runc-hook
  18 │       hostPID: false
  19 │       hostNetwork: false
  20 │       containers:
  21 │       - name: gadget
  22 │         terminationMessagePolicy: FallbackToLogsOnError
  23 │         image: gadget-runc-hook:latest
  24 │         imagePullPolicy: Always
  25 └         command:
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset runc-hook in runc-hook namespace shouldn't have volumes set to {"/"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 deploy445_4.yaml:9-81
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: runc-hook
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: runc-hook
  16 │     spec:
  17 └       serviceAccount: runc-hook
  ..   
────────────────────────────────────────



deploy446_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'gadget-role' shouldn't have access to manage secrets in namespace 'gadget'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy446_4.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 └   - get
────────────────────────────────────────



deploy446_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 92, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 9, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gadget' of DaemonSet 'gadget' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0002 (LOW): Container 'gadget' of DaemonSet 'gadget' should specify an AppArmor profile
════════════════════════════════════════
According to pod security standard 'AppArmor', the AppArmor key must be set to the runtime/default profile or to be undefined.

See https://avd.aquasec.com/misconfig/ksv002
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0005 (HIGH): Container 'gadget' of DaemonSet 'gadget' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gadget' of DaemonSet 'gadget' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gadget' of DaemonSet 'gadget' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'gadget' of DaemonSet 'gadget' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gadget' of DaemonSet 'gadget' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gadget' of DaemonSet 'gadget' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gadget' of DaemonSet 'gadget' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gadget' of DaemonSet 'gadget' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gadget' of DaemonSet 'gadget' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gadget' of DaemonSet 'gadget' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'gadget' of DaemonSet 'gadget' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'gadget' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 deploy446_6.yaml:9-159
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: gadget
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: gadget
  16 │       annotations:
  17 └         container.apparmor.security.beta.kubernetes.io/gadget: unconfined
  ..   
────────────────────────────────────────


AVD-KSV-0025 (MEDIUM): DaemonSet 'gadget' uses invalid seLinux type 'spc_t'
════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
────────────────────────────────────────
 deploy446_6.yaml:9-159
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: gadget
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: gadget
  16 │       annotations:
  17 └         container.apparmor.security.beta.kubernetes.io/gadget: unconfined
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gadget" of daemonset "gadget" in "gadget" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy446_6.yaml:87-96
────────────────────────────────────────
  87 ┌             drop:
  88 │             - ALL
  89 │             add:
  90 │             - SYS_ADMIN
  91 │             - SYSLOG
  92 │             - SYS_PTRACE
  93 │             - SYS_RESOURCE
  94 │             - IPC_LOCK
  95 │             - NET_RAW
  96 └             - NET_ADMIN
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset gadget in gadget namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy446_6.yaml:23-159
────────────────────────────────────────
  23 ┌       serviceAccount: gadget
  24 │       hostPID: false
  25 │       hostNetwork: false
  26 │       containers:
  27 │       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 └         command:
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container gadget of daemonset gadget in gadget namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset gadget in gadget namespace shouldn't have volumes set to {"/etc", "/proc", "/usr"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 deploy446_6.yaml:9-159
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: gadget
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: gadget
  16 │       annotations:
  17 └         container.apparmor.security.beta.kubernetes.io/gadget: unconfined
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gadget in daemonset gadget (namespace: gadget) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy446_6.yaml:27-123
────────────────────────────────────────
  27 ┌       - name: gadget
  28 │         terminationMessagePolicy: FallbackToLogsOnError
  29 │         image: ghcr.io/inspektor-gadget/inspektor-gadget:latest
  30 │         imagePullPolicy: Always
  31 │         command:
  32 │         - /entrypoint
  33 │         lifecycle:
  34 │           preStop:
  35 └             exec:
  ..   
────────────────────────────────────────



deploy448_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): ClusterRole 'custom-controller-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy448_3.yaml:14-24
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - configmaps
  18 │   verbs:
  19 │   - create
  20 │   - get
  21 │   - update
  22 └   - list
  ..   
────────────────────────────────────────



deploy448_5.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'custom-controller' of Deployment 'custom-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'custom-controller' of Deployment 'custom-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'custom-controller' of 'deployment' 'custom-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'custom-controller' of Deployment 'custom-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'custom-controller' of Deployment 'custom-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'custom-controller' of Deployment 'custom-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'custom-controller' of Deployment 'custom-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'custom-controller' of Deployment 'custom-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'custom-controller' of Deployment 'custom-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'custom-controller' of Deployment 'custom-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'custom-controller' of Deployment 'custom-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "custom-controller" of deployment "custom-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment custom-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy448_5.yaml:4
────────────────────────────────────────
   4 [   name: custom-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container custom-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment custom-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy448_5.yaml:15-18
────────────────────────────────────────
  15 ┌       serviceAccountName: custom-controller-sa
  16 │       containers:
  17 │       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container custom-controller in deployment custom-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy448_5.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: custom-controller
  18 └         image: anvesh35/custom-controller:v4.0.0
────────────────────────────────────────



deploy449.yaml (kubernetes)
===========================
Tests: 131 (SUCCESSES: 97, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 20, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-aws-cli' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'my-app' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-app' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-aws-cli' of 'deployment' 'nginx' in 'demo-s3' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-app' of 'deployment' 'nginx' in 'demo-s3' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-app' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-aws-cli' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-app' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-aws-cli' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-app' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-aws-cli' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-app' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-app' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-app' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-app' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-app' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-aws-cli' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-app' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-aws-cli" of deployment "nginx" in "demo-s3" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-app" of deployment "nginx" in "demo-s3" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in demo-s3 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in demo-s3 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy449.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: my-app
  27 │         image: nginx
  28 │         volumeMounts:
  29 │         - name: workdir
  30 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in demo-s3 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy449.yaml:15-33
────────────────────────────────────────
  15 ┌       serviceAccountName: demo-sa
  16 │       initContainers:
  17 │       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container demo-aws-cli in deployment nginx (namespace: demo-s3) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy449.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: demo-aws-cli
  18 │         image: amazon/aws-cli
  19 │         #command: ['aws', 's3', 'cp', 's3://helmtestanvesh/index.html', 'index2.html']
  20 │         command: ['aws', 's3', 'sync', 's3://helmtestanvesh', '/work-dir/']
  21 │         volumeMounts:
  22 │         - name: workdir
  23 └           mountPath: "/work-dir"
────────────────────────────────────────



deploy45.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'parrot-sec-s' of Deployment 'parrot-sec-systemd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'parrot-sec-s' of Deployment 'parrot-sec-systemd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'parrot-sec-s' of 'deployment' 'parrot-sec-systemd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'parrot-sec-s' of Deployment 'parrot-sec-systemd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'parrot-sec-s' of Deployment 'parrot-sec-systemd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'parrot-sec-s' of Deployment 'parrot-sec-systemd' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'parrot-sec-s' of Deployment 'parrot-sec-systemd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'parrot-sec-s' of Deployment 'parrot-sec-systemd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'parrot-sec-s' of Deployment 'parrot-sec-systemd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'parrot-sec-s' of Deployment 'parrot-sec-systemd' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'parrot-sec-s' of Deployment 'parrot-sec-systemd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'parrot-sec-s' of Deployment 'parrot-sec-systemd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'parrot-sec-s' of Deployment 'parrot-sec-systemd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "parrot-sec-s" of deployment "parrot-sec-systemd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment parrot-sec-systemd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy45.yaml:4
────────────────────────────────────────
   4 [   name: parrot-sec-systemd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment parrot-sec-systemd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy45.yaml:15-30
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 └         command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container parrot-sec-s in deployment parrot-sec-systemd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy45.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: parrot-sec-s
  17 │         image: lostcauze7/parrot-sec-systemd
  18 │         ports:
  19 │         - containerPort: 8087
  20 │         securityContext:
  21 │           privileged: true
  22 │         workingDir: /usr
  23 │         command:
  24 └         - "/bin/bash"
  ..   
────────────────────────────────────────



deploy452.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ko' of Deployment 'ko-app-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy452.yaml:20-33
────────────────────────────────────────
  20 ┌         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 │           resources:
  28 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ko' of Deployment 'ko-app-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy452.yaml:20-33
────────────────────────────────────────
  20 ┌         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 │           resources:
  28 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ko' of 'deployment' 'ko-app-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy452.yaml:20-33
────────────────────────────────────────
  20 ┌         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 │           resources:
  28 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ko' of Deployment 'ko-app-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy452.yaml:20-33
────────────────────────────────────────
  20 ┌         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 │           resources:
  28 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ko' of Deployment 'ko-app-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy452.yaml:20-33
────────────────────────────────────────
  20 ┌         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 │           resources:
  28 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ko' of Deployment 'ko-app-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy452.yaml:20-33
────────────────────────────────────────
  20 ┌         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 │           resources:
  28 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ko' of Deployment 'ko-app-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy452.yaml:20-33
────────────────────────────────────────
  20 ┌         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 │           resources:
  28 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy452.yaml:20-33
────────────────────────────────────────
  20 ┌         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 │           resources:
  28 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ko" of deployment "ko-app-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy452.yaml:20-33
────────────────────────────────────────
  20 ┌         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 │           resources:
  28 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy452.yaml:20-33
────────────────────────────────────────
  20 ┌         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 │           resources:
  28 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ko-app-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy452.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: ko-app
   6 └   name: ko-app-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ko-app-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy452.yaml:20-33
────────────────────────────────────────
  20 ┌         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 │           resources:
  28 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ko-app-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy452.yaml:19-33
────────────────────────────────────────
  19 ┌       containers:
  20 │         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ko in deployment ko-app-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy452.yaml:20-33
────────────────────────────────────────
  20 ┌         - image: ko://cmd/main.go
  21 │           name: ko
  22 │           env:
  23 │           - name: GOMAXPROCS
  24 │             valueFrom:
  25 │               resourceFieldRef:
  26 │                 resource: limits.cpu
  27 │           resources:
  28 └             requests:
  ..   
────────────────────────────────────────



deploy453_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy453_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy453_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy453_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy453_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy453_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy453_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy453_14.yaml:33-125
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy453_14.yaml:34-116
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy453_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy453_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy453_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy453_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy453_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy453_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy453_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy453_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy453_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy453_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy453_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy453_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy453_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy453_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy453_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy453_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy453_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy453_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy453_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy453_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy453_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy453_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy453_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy453_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy454.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'k8s-container' of Deployment 'may27-k8spractice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'k8s-container' of Deployment 'may27-k8spractice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'k8s-container' of 'deployment' 'may27-k8spractice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'k8s-container' of Deployment 'may27-k8spractice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'k8s-container' of Deployment 'may27-k8spractice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'k8s-container' of Deployment 'may27-k8spractice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'k8s-container' of Deployment 'may27-k8spractice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'k8s-container' of Deployment 'may27-k8spractice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'k8s-container' of Deployment 'may27-k8spractice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'k8s-container' of Deployment 'may27-k8spractice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'k8s-container' of Deployment 'may27-k8spractice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'k8s-container' of Deployment 'may27-k8spractice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "k8s-container" of deployment "may27-k8spractice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment may27-k8spractice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy454.yaml:4
────────────────────────────────────────
   4 [   name: may27-k8spractice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container may27-k8spractice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment may27-k8spractice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy454.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container k8s-container in deployment may27-k8spractice (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy454.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: k8s-container
  17 │         image: tharuninnoura/may27k8spractice:latest
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────



deploy463.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cloudflared' of Deployment 'cloudflared' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cloudflared' of Deployment 'cloudflared' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cloudflared' of 'deployment' 'cloudflared' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cloudflared' of Deployment 'cloudflared' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cloudflared' of Deployment 'cloudflared' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cloudflared' of Deployment 'cloudflared' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cloudflared' of Deployment 'cloudflared' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cloudflared' of Deployment 'cloudflared' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cloudflared" of deployment "cloudflared" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cloudflared in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy463.yaml:4
────────────────────────────────────────
   4 [   name: cloudflared
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cloudflared in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cloudflared in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy463.yaml:15-52
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cloudflared in deployment cloudflared (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy463.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: cloudflared
  17 │         image: cloudflare/cloudflared:latest
  18 │         args:
  19 │         - tunnel
  20 │         - --config
  21 │         - /etc/cloudflared/config/config.yaml
  22 │         - run
  23 │         volumeMounts:
  24 └         - name: config
  ..   
────────────────────────────────────────



deploy463_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cloudflared-api' of Deployment 'cloudflared-api-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cloudflared-api' of Deployment 'cloudflared-api-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cloudflared-api' of 'deployment' 'cloudflared-api-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cloudflared-api' of Deployment 'cloudflared-api-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cloudflared-api' of Deployment 'cloudflared-api-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cloudflared-api' of Deployment 'cloudflared-api-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cloudflared-api' of Deployment 'cloudflared-api-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cloudflared-api' of Deployment 'cloudflared-api-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cloudflared-api' of Deployment 'cloudflared-api-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cloudflared-api' of Deployment 'cloudflared-api-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cloudflared-api' of Deployment 'cloudflared-api-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cloudflared-api" of deployment "cloudflared-api-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cloudflared-api-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy463_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cloudflared-api-deployment
   5 │   labels:
   6 └     app: cloudflared-api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cloudflared-api-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cloudflared-api-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy463_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cloudflared-api in deployment cloudflared-api-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy463_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: cloudflared-api
  19 │         image: umesh1212/cloudflared-api:tag5
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────



deploy464.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): Role 'ksrp-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 deploy464.yaml:7-15
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - services
  11 │   verbs:
  12 │   - get
  13 │   - update
  14 │   - create
  15 └   - delete
────────────────────────────────────────



deploy464_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ksrp-expose-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"apiKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



deploy464_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ksrp-expose' of Deployment 'ksrp-expose' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ksrp-expose' of Deployment 'ksrp-expose' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ksrp-expose' of 'deployment' 'ksrp-expose' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ksrp-expose' of Deployment 'ksrp-expose' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ksrp-expose' of Deployment 'ksrp-expose' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ksrp-expose' of Deployment 'ksrp-expose' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ksrp-expose' of Deployment 'ksrp-expose' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ksrp-expose' of Deployment 'ksrp-expose' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ksrp-expose" of deployment "ksrp-expose" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ksrp-expose in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy464_4.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: ksrp-expose
   6 │   name: ksrp-expose
   7 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ksrp-expose in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ksrp-expose in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy464_4.yaml:23-60
────────────────────────────────────────
  23 ┌       containers:
  24 │       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 └         - containerPort: 5780
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ksrp-expose in deployment ksrp-expose (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy464_4.yaml:24-53
────────────────────────────────────────
  24 ┌       - image: ccr.ccs.tencentyun.com/vizee/ksrp-expose:latest
  25 │         imagePullPolicy: Always
  26 │         name: ksrp-expose
  27 │         ports:
  28 │         - containerPort: 5777
  29 │           name: link-port
  30 │           protocol: TCP
  31 │         - containerPort: 5780
  32 └           name: api-port
  ..   
────────────────────────────────────────



deploy466.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy466.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy466.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy466.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         volumeMounts:
  21 │         - name: nginx-config-volume
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └           subPath: nginx.conf
  ..   
────────────────────────────────────────



deploy467.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy467.yaml:5
────────────────────────────────────────
   5 [   name: nginx-deployment3
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment3 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy467.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy467.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage2
  23 │           mountPath: /usr/share/nginx/html
  24 └       volumes:
  ..   
────────────────────────────────────────



deploy468.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy468.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy468.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy468.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy468.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy468.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy468.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy468.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy468.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy468.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy468.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy468.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy468.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment1
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy468.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 │             cpu: "250m"
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy468.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         resources:
  23 │           requests:
  24 │             memory: "64Mi"
  25 └             cpu: "250m"
  ..   
────────────────────────────────────────



deploy469.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy469.yaml:5
────────────────────────────────────────
   5 [   name: nginx-deployment2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy469.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy469.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-persistent-storage1
  23 │           mountPath: /usr/share/nginx/html
  24 └       volumes:
  ..   
────────────────────────────────────────



deploy470_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy470_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy470_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy470_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy470_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy470_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy470_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy470_14.yaml:33-121
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy470_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



deploy470_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy470_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy470_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy470_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy470_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy470_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy470_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy470_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy470_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy470_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy470_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy470_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy470_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy470_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy470_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy470_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy470_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy470_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy470_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy470_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy470_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy470_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy470_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy470_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy471.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'blog-container' of Deployment 'blog-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'blog-container' of Deployment 'blog-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'blog-container' of 'deployment' 'blog-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'blog-container' of Deployment 'blog-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'blog-container' of Deployment 'blog-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'blog-container' of Deployment 'blog-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'blog-container' of Deployment 'blog-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'blog-container' of Deployment 'blog-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'blog-container' of Deployment 'blog-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'blog-container' of Deployment 'blog-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'blog-container' of Deployment 'blog-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "blog-container" of deployment "blog-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment blog-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy471.yaml:4-6
────────────────────────────────────────
   4 ┌   name: blog-app
   5 │   labels:
   6 └     app: blogging-application
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container blog-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment blog-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy471.yaml:17-19
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container blog-container in deployment blog-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy471.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: blog-container
  19 └         image: anvesh35/blogging-application:v2.0.0
────────────────────────────────────────



deploy472.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stream-container' of Deployment 'stream-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stream-container' of Deployment 'stream-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stream-container' of 'deployment' 'stream-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stream-container' of Deployment 'stream-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stream-container' of Deployment 'stream-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stream-container' of Deployment 'stream-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stream-container' of Deployment 'stream-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stream-container' of Deployment 'stream-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stream-container' of Deployment 'stream-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stream-container' of Deployment 'stream-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stream-container' of Deployment 'stream-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stream-container" of deployment "stream-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stream-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy472.yaml:4-6
────────────────────────────────────────
   4 ┌   name: stream-app
   5 │   labels:
   6 └     app: streaming-application
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stream-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stream-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy472.yaml:17-19
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stream-container in deployment stream-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy472.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: stream-container
  19 └         image: anvesh35/streaming-application:v3.0.0
────────────────────────────────────────



deploy47_14.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy47_14.yaml:34-109
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy47_14.yaml:34-109
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy47_14.yaml:34-109
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy47_14.yaml:34-109
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy47_14.yaml:34-109
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy47_14.yaml:34-109
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy47_14.yaml:34-109
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy47_14.yaml:34-109
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy47_14.yaml:34-109
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy47_14.yaml:34-109
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy47_14.yaml:33-118
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy47_14.yaml:34-109
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



deploy47_15.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy47_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy47_16.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy47_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy47_4.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy47_4.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy47_5.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy47_5.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy47_6.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy47_6.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy47_7.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy47_7.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy488.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container1' of Deployment 'c1-deployement' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container1' of Deployment 'c1-deployement' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'deployment' 'c1-deployement' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Deployment 'c1-deployement' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container1' of Deployment 'c1-deployement' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Deployment 'c1-deployement' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Deployment 'c1-deployement' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Deployment 'c1-deployement' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Deployment 'c1-deployement' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Deployment 'c1-deployement' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Deployment 'c1-deployement' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Deployment 'c1-deployement' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container1" of deployment "c1-deployement" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment c1-deployement in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy488.yaml:4
────────────────────────────────────────
   4 [   name: c1-deployement
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container c1-deployement in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment c1-deployement in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy488.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container1 in deployment c1-deployement (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy488.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container1
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container1
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 6000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────



deploy489.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container2' of Deployment 'c2-deployement' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container2' of Deployment 'c2-deployement' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container2' of 'deployment' 'c2-deployement' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container2' of Deployment 'c2-deployement' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container2' of Deployment 'c2-deployement' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container2' of Deployment 'c2-deployement' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container2' of Deployment 'c2-deployement' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container2' of Deployment 'c2-deployement' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container2' of Deployment 'c2-deployement' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container2' of Deployment 'c2-deployement' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container2' of Deployment 'c2-deployement' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container2' of Deployment 'c2-deployement' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container2" of deployment "c2-deployement" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment c2-deployement in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy489.yaml:4
────────────────────────────────────────
   4 [   name: c2-deployement
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container c2-deployement in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment c2-deployement in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy489.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container2 in deployment c2-deployement (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy489.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: container2
  17 │         image: us-central1-docker.pkg.dev/kubernetes-417314/k8s/container2
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 7000
  21 │         volumeMounts:
  22 │         - name: data-volume
  23 └           mountPath: /usr/src/app/SNEH_PV_dir
────────────────────────────────────────



deploy49.yaml (kubernetes)
==========================
Tests: 131 (SUCCESSES: 97, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'fedora' of Deployment 'fake-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'ubuntu' of Deployment 'fake-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fedora' of Deployment 'fake-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ubuntu' of Deployment 'fake-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fedora' of 'deployment' 'fake-daemonset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ubuntu' of 'deployment' 'fake-daemonset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'fedora' of Deployment 'fake-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ubuntu' of Deployment 'fake-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fedora' of Deployment 'fake-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ubuntu' of Deployment 'fake-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fedora' of Deployment 'fake-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ubuntu' of Deployment 'fake-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'fedora' of Deployment 'fake-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ubuntu' of Deployment 'fake-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'fedora' of Deployment 'fake-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ubuntu' of Deployment 'fake-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'fedora' of Deployment 'fake-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ubuntu' of Deployment 'fake-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fedora' of Deployment 'fake-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ubuntu' of Deployment 'fake-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fedora' of Deployment 'fake-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ubuntu' of Deployment 'fake-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fedora" of deployment "fake-daemonset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ubuntu" of deployment "fake-daemonset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment fake-daemonset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy49.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: fake-daemonset
   6 │     coolLabel: duh
   7 └   name: fake-daemonset
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container fake-daemonset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container fake-daemonset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment fake-daemonset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy49.yaml:18-31
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           requiredDuringSchedulingIgnoredDuringExecution:
  21 │           - labelSelector:
  22 │               matchLabels:
  23 │                 app: fake-daemonset 
  24 │             topologyKey: "kubernetes.io/hostname"
  25 │       containers:
  26 └       - image: docker-registry:5000/ubuntu
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container fedora in deployment fake-daemonset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy49.yaml:29-31
────────────────────────────────────────
  29 ┌       - image: docker-registry:5000/fedora
  30 │         name: fedora
  31 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ubuntu in deployment fake-daemonset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy49.yaml:26-28
────────────────────────────────────────
  26 ┌       - image: docker-registry:5000/ubuntu
  27 │         name: ubuntu
  28 └         command: ["sleep", "infinity"]
────────────────────────────────────────



deploy490.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'influxdb' of Deployment 'influxdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influxdb' of Deployment 'influxdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influxdb' of 'deployment' 'influxdb' in 'influxdb' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'influxdb' of Deployment 'influxdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influxdb' of Deployment 'influxdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influxdb' of Deployment 'influxdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'influxdb' of Deployment 'influxdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'influxdb' of Deployment 'influxdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'influxdb' of Deployment 'influxdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influxdb' of Deployment 'influxdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influxdb' of Deployment 'influxdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influxdb" of deployment "influxdb" in "influxdb" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container influxdb in influxdb namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy490.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 │           env:
  25 └             - name: INFLUXDB_DB
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment influxdb in influxdb namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy490.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: influxdb
  18 │           image: influxdb:1.8
  19 │           ports:
  20 │             - containerPort: 8086
  21 │           volumeMounts:
  22 │             - name: influxdb-storage
  23 │               mountPath: /var/lib/influxdb
  24 └           env:
  ..   
────────────────────────────────────────



deploy491.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'blog' of Deployment 'blog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'blog' of Deployment 'blog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'blog' of 'deployment' 'blog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'blog' of Deployment 'blog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'blog' of Deployment 'blog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'blog' of Deployment 'blog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'blog' of Deployment 'blog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'blog' of Deployment 'blog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'blog' of Deployment 'blog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'blog' of Deployment 'blog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'blog' of Deployment 'blog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'blog' of Deployment 'blog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "blog" of deployment "blog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment blog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy491.yaml:4
────────────────────────────────────────
   4 [   name: blog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container blog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment blog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy491.yaml:14-55
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 └         - name: BLOG_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container blog in deployment blog (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy491.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: blog
  16 │         image: registry.gitlab.com/ittipatlk/blog/sample:latest
  17 │         ports:
  18 │         - containerPort: 8002
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: BLOG_PORT
  23 └           value: '8002'
  ..   
────────────────────────────────────────



deploy492.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myblogs' of Deployment 'myblogs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myblogs' of Deployment 'myblogs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myblogs' of 'deployment' 'myblogs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myblogs' of Deployment 'myblogs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myblogs' of Deployment 'myblogs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myblogs' of Deployment 'myblogs' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myblogs' of Deployment 'myblogs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myblogs' of Deployment 'myblogs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myblogs' of Deployment 'myblogs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myblogs' of Deployment 'myblogs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myblogs' of Deployment 'myblogs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myblogs' of Deployment 'myblogs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myblogs" of deployment "myblogs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myblogs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy492.yaml:4
────────────────────────────────────────
   4 [   name: myblogs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myblogs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myblogs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy492.yaml:14-18
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myblogs in deployment myblogs (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy492.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: myblogs
  16 │         image: registry.gitlab.com/ittipatlk/myblogs/sample:latest
  17 │         ports:
  18 └         - containerPort: 8003
────────────────────────────────────────



deploy493.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'user' of Deployment 'user' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'user' of Deployment 'user' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'user' of 'deployment' 'user' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'user' of Deployment 'user' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'user' of Deployment 'user' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'user' of Deployment 'user' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'user' of Deployment 'user' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'user' of Deployment 'user' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'user' of Deployment 'user' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'user' of Deployment 'user' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'user' of Deployment 'user' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'user' of Deployment 'user' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "user" of deployment "user" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment user in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy493.yaml:4
────────────────────────────────────────
   4 [   name: user
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container user in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment user in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy493.yaml:14-55
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 └         - name: USER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container user in deployment user (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy493.yaml:15-55
────────────────────────────────────────
  15 ┌       - name: user
  16 │         image: registry.gitlab.com/ittipatlk/user/sample:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         env:
  20 │         - name: APP_HOST
  21 │           value: localhost
  22 │         - name: USER_PORT
  23 └           value: '8001'
  ..   
────────────────────────────────────────



deploy50.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ubuntu' of Deployment 'safari-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ubuntu' of Deployment 'safari-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ubuntu' of 'deployment' 'safari-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ubuntu' of Deployment 'safari-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ubuntu' of Deployment 'safari-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ubuntu' of Deployment 'safari-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ubuntu' of Deployment 'safari-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ubuntu' of Deployment 'safari-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ubuntu' of Deployment 'safari-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ubuntu' of Deployment 'safari-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ubuntu' of Deployment 'safari-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ubuntu" of deployment "safari-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment safari-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy50.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: safari-deploy
   7 └   name: safari-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container safari-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment safari-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy50.yaml:20-31
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 │           name: safari-mount
  28 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ubuntu in deployment safari-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy50.yaml:21-27
────────────────────────────────────────
  21 ┌       - image: docker-registry:5000/ubuntu
  22 │         name: ubuntu
  23 │         resources: {}
  24 │         command: ["sleep", "infinity"]
  25 │         volumeMounts:
  26 │         - mountPath: "/tmp/safari-data"
  27 └           name: safari-mount
────────────────────────────────────────



deploy52_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cronhpa-controller' of Deployment 'kubernetes-cronhpa-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy52_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 │           limits:
  30 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cronhpa-controller' of Deployment 'kubernetes-cronhpa-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy52_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 │           limits:
  30 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cronhpa-controller' of 'deployment' 'kubernetes-cronhpa-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy52_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 │           limits:
  30 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cronhpa-controller' of Deployment 'kubernetes-cronhpa-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy52_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 │           limits:
  30 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cronhpa-controller' of Deployment 'kubernetes-cronhpa-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy52_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 │           limits:
  30 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-cronhpa-controller' of Deployment 'kubernetes-cronhpa-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy52_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 │           limits:
  30 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-cronhpa-controller' of Deployment 'kubernetes-cronhpa-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy52_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 │           limits:
  30 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy52_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 │           limits:
  30 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'kubernetes-cronhpa-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 deploy52_1.yaml:10-35
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app: kubernetes-cronhpa-controller
  14 │       controller-tools.k8s.io: '2.0'
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app: kubernetes-cronhpa-controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cronhpa-controller" of deployment "kubernetes-cronhpa-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy52_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 │           limits:
  30 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy52_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 │           limits:
  30 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubernetes-cronhpa-controller in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy52_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 │           limits:
  30 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-cronhpa-controller in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy52_1.yaml:21-35
────────────────────────────────────────
  21 ┌       containers:
  22 │       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cronhpa-controller in deployment kubernetes-cronhpa-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy52_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: registry.aliyuncs.com/acs/kubernetes-cronhpa-controller:v1.4.3-2f290b2-aliyun
  23 │         imagePullPolicy: Always
  24 │         name: kubernetes-cronhpa-controller
  25 │         env:
  26 │         - name: TZ
  27 │           value: Asia/Shanghai
  28 │         resources:
  29 │           limits:
  30 └             cpu: 100m
  ..   
────────────────────────────────────────



deploy53_14.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy53_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy53_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy53_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy53_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy53_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy53_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy53_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy53_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy53_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy53_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy53_14.yaml:27-111
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy53_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy53_15.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy53_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy53_16.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy53_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy53_3.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy53_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy53_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy53_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy53_4.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy53_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy53_5.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy53_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy53_6.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy53_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy54.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'spintest' of Deployment 'spintest' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy54.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 150m
  26 └             memory: 150Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'spintest' of Deployment 'spintest' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy54.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 150m
  26 └             memory: 150Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'spintest' of 'deployment' 'spintest' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy54.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 150m
  26 └             memory: 150Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'spintest' of Deployment 'spintest' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy54.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 150m
  26 └             memory: 150Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'spintest' of Deployment 'spintest' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 deploy54.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 150m
  26 └             memory: 150Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'spintest' of Deployment 'spintest' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy54.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 150m
  26 └             memory: 150Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'spintest' of Deployment 'spintest' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy54.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 150m
  26 └             memory: 150Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'spintest' of Deployment 'spintest' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy54.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 150m
  26 └             memory: 150Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy54.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 150m
  26 └             memory: 150Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "spintest" of deployment "spintest" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy54.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 150m
  26 └             memory: 150Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy54.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 150m
  26 └             memory: 150Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment spintest in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 deploy54.yaml:4-5
────────────────────────────────────────
   4 ┌   name: spintest
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container spintest in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy54.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 150m
  26 └             memory: 150Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment spintest in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy54.yaml:16-29
────────────────────────────────────────
  16 ┌       runtimeClassName: wasmtime-spin
  17 │       containers:
  18 │       - name: spintest
  19 │         image: todo
  20 │         command:
  21 │         - /
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 └           limits:
  ..   
────────────────────────────────────────



deploy55_14.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'ingress-nginx-controller' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 deploy55_14.yaml:13-118
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   template:
  21 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy55_14.yaml:31-109
────────────────────────────────────────
  31 ┌       - args:
  32 │         - /nginx-ingress-controller
  33 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --election-id=ingress-nginx-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy55_14.yaml:31-109
────────────────────────────────────────
  31 ┌       - args:
  32 │         - /nginx-ingress-controller
  33 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --election-id=ingress-nginx-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy55_14.yaml:31-109
────────────────────────────────────────
  31 ┌       - args:
  32 │         - /nginx-ingress-controller
  33 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --election-id=ingress-nginx-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy55_14.yaml:31-109
────────────────────────────────────────
  31 ┌       - args:
  32 │         - /nginx-ingress-controller
  33 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --election-id=ingress-nginx-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy55_14.yaml:31-109
────────────────────────────────────────
  31 ┌       - args:
  32 │         - /nginx-ingress-controller
  33 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --election-id=ingress-nginx-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of DaemonSet 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy55_14.yaml:31-109
────────────────────────────────────────
  31 ┌       - args:
  32 │         - /nginx-ingress-controller
  33 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --election-id=ingress-nginx-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): daemonset ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy55_14.yaml:29-118
────────────────────────────────────────
  29 ┌       hostNetwork: true
  30 │       containers:
  31 │       - args:
  32 │         - /nginx-ingress-controller
  33 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --election-id=ingress-nginx-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in daemonset ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy55_14.yaml:31-109
────────────────────────────────────────
  31 ┌       - args:
  32 │         - /nginx-ingress-controller
  33 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --election-id=ingress-nginx-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy55_15.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy55_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy55_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy55_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy55_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy55_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy55_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy55_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy55_16.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy55_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy55_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy55_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy55_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy55_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy55_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy55_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy55_3.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy55_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy55_4.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy55_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy55_5.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy55_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy55_6.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy55_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy56_14.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy56_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy56_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy56_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy56_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy56_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy56_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy56_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of DaemonSet 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy56_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy56_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of daemonset "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy56_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): daemonset ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy56_14.yaml:27-112
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in daemonset ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy56_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy56_15.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy56_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy56_16.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy56_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy56_3.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy56_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy56_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy56_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy56_4.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy56_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy56_5.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy56_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



deploy56_6.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 deploy56_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



deploy57_14.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 deploy57_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'ingress-nginx-controller' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 deploy57_14.yaml:13-113
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   template:
  21 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy57_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 deploy57_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy57_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy57_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy57_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of DaemonSet 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy57_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of DaemonSet 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 deploy57_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy57_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of daemonset "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy57_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): daemonset ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 deploy57_14.yaml:27-113
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in daemonset ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy57_14.yaml:28-103
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



deploy57_15.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy57_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



deploy57_16.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 deploy57_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



deploy57_3.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy57_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 deploy57_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy57_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



deploy57_4.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 deploy57_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



deploy57_5.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 deploy57_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────


