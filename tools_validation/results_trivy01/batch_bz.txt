
Report Summary

┌───────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                        Target                         │    Type    │ Misconfigurations │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Config370.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Config405.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-and-Secret.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-argocd-cm.yaml                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-argocd-cmd-params-cm.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-argocd-gpg-keys-cm.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-argocd-notifications-cm.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-argocd-rbac-cm.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-argocd-redis-health-configmap.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-argocd-ssh-known-hosts-cm.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-argocd-tls-certs-cm.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-env33.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-hubble-relay-config.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-hubble-ui-nginx.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-k8s-gateway.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-ks8.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-nginx6.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-map88.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-map9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-map90.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-map91.yaml                                     │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-map92.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-map93.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-map94.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-map96.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-map97.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-map97_1.yaml                                   │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-map98.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-maps.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-maps1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-maps1_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-maps2.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-maps3.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-maps3_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-maps3_2.yaml                                   │ kubernetes │        30         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-maps_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-observability-cm.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches1.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches2.yaml                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches3.yaml                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches4.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches4_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches5.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches5_2.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches6.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches6_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches7.yaml                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches7_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches8.yaml                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches9.yaml                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches9_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-patches_2.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pod-1.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pod-11.yaml                                    │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pod-2.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pod-21.yaml                                    │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pod-3.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pod-31.yaml                                    │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pod.yaml                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pod1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pod1_1.yaml                                    │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pod2.yaml                                      │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pod_1.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pv.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc1_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc2.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc3_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc3_2.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc3_3.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc3_4.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc3_5.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc4.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc6.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-pvc8.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-registry-cert-cm.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-secret.sops.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-secret.sops1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-secrets.sops.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-server-deployment-service.yaml                 │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-server-deployment-service_1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-server-deployment.yaml                         │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-server-deployment1.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-server-deployment1_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-server-deployment2.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-server-deployment2_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-server-deployment3.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-server-deployment3_1.yaml                      │ kubernetes │        35         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-server-deployment3_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-server-deployment_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-server-service.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-service-deployment.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-service-deployment_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-service.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-service_1.yaml                                 │ kubernetes │        15         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-service_2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-system.yaml                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-system_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-trusted-resources-cm.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-updater-cu.yaml                                │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-updater-du.yaml                                │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-var.yaml                                       │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config-var1.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config.webhook.pipeline.tekton.dev-valwebhookcfg.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config11.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config110.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config12.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config13.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config13_10.yaml                                      │ kubernetes │        14         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config13_11.yaml                                      │ kubernetes │         6         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config13_12.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config13_2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config13_3.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config13_4.yaml                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config13_5.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config13_6.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config13_7.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config13_8.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config13_9.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config21.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config210.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config238.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_10.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_11.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_12.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_13.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_14.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_15.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_16.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_17.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_18.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_2.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_3.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_4.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_5.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_6.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_8.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config239_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config248.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config248_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config248_2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config248_3.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config272.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config275.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config285.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config29.yaml                                         │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config29_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config29_2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config3.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config30.yaml                                         │ kubernetes │        20         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config307.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config308.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config30_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config30_2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config31.yaml                                         │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config31_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config31_2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config32.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config325.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config335.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config336.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config336_10.yaml                                     │ kubernetes │        14         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config336_11.yaml                                     │ kubernetes │         6         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config336_12.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config336_2.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config336_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config336_4.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config336_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config336_6.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config336_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config336_8.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config336_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config339.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config343.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config344.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348.yaml                                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_10.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_11.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_12.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_13.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_14.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_15.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_16.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_17.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_18.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_19.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_2.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_20.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_21.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_22.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_4.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_6.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_8.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config348_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config36.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config36_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config36_2.yaml                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config36_3.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config36_4.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config36_6.yaml                                       │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388.yaml                                        │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_10.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_11.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_12.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_13.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_14.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_15.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_16.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_17.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_18.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_19.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_2.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_20.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_21.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_4.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_6.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_8.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config388_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config398.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config413.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config416.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config418.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config419.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425.yaml                                        │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_10.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_11.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_12.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_13.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_14.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_15.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_16.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_17.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_18.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_19.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_2.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_20.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_21.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_4.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_6.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_8.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config425_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config446.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config448.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config494_1.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config495.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config5.yaml                                          │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config515.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config516.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config516_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config516_2.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config516_3.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config517.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config523.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config523_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config523_2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config524.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config524_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config524_2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config525.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config525_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config525_2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config526.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config526_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config526_2.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config526_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532.yaml                                        │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_10.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_11.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_12.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_13.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_14.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_15.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_16.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_17.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_18.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_19.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_2.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_20.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_21.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_4.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_6.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_8.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config532_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config547.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config549.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config551.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config552.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config553.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config554.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config555.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config556.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config558.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config559.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config560.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config564.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config565.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config566.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config567.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config568.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config569.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config569_10.yaml                                     │ kubernetes │        14         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config569_11.yaml                                     │ kubernetes │         6         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config569_12.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config569_2.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config569_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config569_4.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config569_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config569_6.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config569_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config569_8.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config569_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570.yaml                                        │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_10.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_11.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_12.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_13.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_14.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_15.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_16.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_17.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_18.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_19.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_2.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_20.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_21.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_4.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_6.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_8.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config570_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config578.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config578_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config578_2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config579.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config580.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config581.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config582.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config5_1.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config5_2.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config5_3.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config6.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config600.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config601.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config602.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config605.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608.yaml                                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_10.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_11.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_12.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_13.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_14.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_15.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_16.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_17.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_18.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_19.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_2.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_20.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_21.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_22.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_4.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_6.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_8.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config608_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config609.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config609_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config609_2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config610.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config610_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config610_2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config611.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config611_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config611_2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config639.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config639_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config639_2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config640.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config640_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config640_2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config641.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config641_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config641_2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config646.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648.yaml                                        │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_10.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_11.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_12.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_13.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_14.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_15.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_16.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_17.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_18.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_19.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_2.yaml                                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_20.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_21.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_4.yaml                                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_6.yaml                                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_8.yaml                                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config648_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config651.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config652.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config656.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config666.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config667.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config668.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config669.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config67.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config671.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config673.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config675.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config676.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config677.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config678.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config679.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config680.yaml                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config682.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config683.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config684.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config688.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config688_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config688_2.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config69.yaml                                         │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config691.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696.yaml                                        │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_10.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_11.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_12.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_13.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_14.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_15.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_16.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_17.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_18.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_19.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_2.yaml                                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_20.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_21.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_4.yaml                                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_6.yaml                                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_8.yaml                                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config696_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config69_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config69_2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config69_3.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config70.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config714.yaml                                        │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config725.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733.yaml                                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_10.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_11.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_12.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_13.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_14.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_15.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_16.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_17.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_18.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_19.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_2.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_20.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_21.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_22.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_4.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_6.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_8.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config733_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config75.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config756.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config76.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config76_10.yaml                                      │ kubernetes │        14         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config76_11.yaml                                      │ kubernetes │         6         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config76_12.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config76_2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config76_3.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config76_4.yaml                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config76_5.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config76_6.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config76_7.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config76_8.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config76_9.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config771.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config771_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config773.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config791.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config809.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config838.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config846.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config846_1.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config849.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853.yaml                                        │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_10.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_11.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_12.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_13.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_14.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_15.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_16.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_17.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_18.yaml                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_19.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_2.yaml                                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_20.yaml                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_21.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_4.yaml                                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_6.yaml                                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_7.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_8.yaml                                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config853_9.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config868.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config869.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config91.yaml                                         │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config91_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config91_2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config92.yaml                                         │ kubernetes │        20         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config92_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config92_2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config93.yaml                                         │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config93_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config93_2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config94.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config945.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config950.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config98.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config98_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config98_2.yaml                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config98_3.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config98_4.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ config98_6.yaml                                       │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap-all-nics.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configman.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-1.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-11.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-111.yaml                                    │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-112.yaml                                    │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-12.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-13.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-15.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-16.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-17.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-18.yaml                                     │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-19.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-2.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-21.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-210.yaml                                    │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-211.yaml                                    │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-22.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-23.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-25.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-26.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-27.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-28.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-3.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-31.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-32.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-33.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-34.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-35.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-36.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-37.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-38.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-39.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-agent1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-agent2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-agent3.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-agent4.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-agent5.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-api-gateway.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-api-gateway1.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-api.yaml                                    │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-api1.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-api2.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-app.yaml                                    │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-app1.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-argocd-cm-patch-example.yaml                │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-argocd-cmd-params-cm-patch.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-arquivo.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-arquivo1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-as-args.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-as-args_1.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-as-env.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-as-env_1.yaml                               │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-as-environment-variables.yaml               │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-as-volume.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-as-volume1.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-as-volume1_1.yaml                           │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-auth.yaml                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-bdd.yaml                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-billing-app.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-billing-app1.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-certs.yaml                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-certs1.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-changed.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-client-response.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-client-response1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-config6.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-coredns-custom.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-ctl.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-dashboard-provider1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-dashboard-provider5.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-database.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-datasource.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-datasource1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-db.yaml                                     │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-db1.yaml                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-def.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-def1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-definition.yaml                             │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-definition1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-demo.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-demo1.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-demo1_1.yaml                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-demo1_2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-demo_1.yaml                                 │ kubernetes │        16         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-dev.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-dev1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-develop.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env-teste.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env-var.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env-var_1.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env11.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env12.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env13.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env14.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env15.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env16.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env17.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env18.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env19.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env20.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env21.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env22.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env23.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env24.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env25.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env28.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env29.yaml                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env3.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env30.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env34.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env35.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env36.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env37.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env38.yaml                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env39.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env4.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env40.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env41.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env42.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env43.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env44.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env45.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env46.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env47.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env48.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env5.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env6.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env7.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env8.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-env9.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example2.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example2_1.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example2_2.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example2_3.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example2_4.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example3.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example3_1.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example3_2.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example3_3.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example3_4.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example_1.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example_2.yaml                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example_3.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-example_4.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-external-cluster-user-command.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family-env.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family-env1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family10.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family11.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family12.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family13.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family14.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family15.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family16.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family17.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family18.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family19.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family3.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family4.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family5.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family6.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family7.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family8.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-family9.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-features.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-file.yaml                                   │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-file1.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-file2.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-file3.yaml                                  │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-file5.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-file6.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-file7.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-file7_1.yaml                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-global-variables.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-haproxy.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-hash.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-index-html.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-index-html1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-init.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-inventory-app.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-inventory-app1.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-istio.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-istio1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-json.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-json1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-json1_1.yaml                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-key-as-env.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-key-as-env_1.yaml                           │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-kubeproxy.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-locust.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-log-output.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-maria.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-maria1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-mariadb.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-master.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-message.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-mysql.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-mysql1.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-mysql8.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-names.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-names1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-namespace.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-nfs-pv-pvc.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-nfs-pv-pvc_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-nginx-config.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-nginx2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-nginx3.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-nginx4.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-nginx5.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-nginx7.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-nginx8.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-no-validation-keys-invalid.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-no-validation-keys.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-opa-activate.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-orders.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-php.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod-definition.yaml                         │ kubernetes │        33         │
└───────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


ConfigMap-argocd-cm.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'argocd-cm' in 'argocd' namespace stores sensitive contents in key(s) or value(s) '{"application.instanceLabelKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



ConfigMap-hubble-relay-config.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'hubble-relay-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"config.yaml"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map91.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'client' in 'spring-app' namespace stores sensitive contents in key(s) or value(s) '{"      username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'client' in 'spring-app' namespace stores secrets in key(s) or value(s) '{"      password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config-map97_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'silly-demo' of 'deployment' 'silly-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "silly-demo" of deployment "silly-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment silly-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-map97_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: silly-demo
   5 │   labels:
   6 └     app.kubernetes.io/name: silly-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container silly-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment silly-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-map97_1.yaml:16-40
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container silly-demo in deployment silly-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config-map97_1.yaml:17-36
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         envFrom:
  ..   
────────────────────────────────────────



config-maps3_2.yaml (kubernetes)
================================
Tests: 129 (SUCCESSES: 99, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 17, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config-map-deployment' of Deployment 'config-map-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'config-map-deployment-volume' of Deployment 'config-map-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config-map-deployment' of Deployment 'config-map-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config-map-deployment-volume' of Deployment 'config-map-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config-map-deployment' of 'deployment' 'config-map-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config-map-deployment-volume' of 'deployment' 'config-map-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config-map-deployment' of Deployment 'config-map-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config-map-deployment-volume' of Deployment 'config-map-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config-map-deployment' of Deployment 'config-map-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config-map-deployment-volume' of Deployment 'config-map-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config-map-deployment' of Deployment 'config-map-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config-map-deployment-volume' of Deployment 'config-map-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config-map-deployment' of Deployment 'config-map-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config-map-deployment-volume' of Deployment 'config-map-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config-map-deployment' of Deployment 'config-map-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config-map-deployment-volume' of Deployment 'config-map-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config-map-deployment' of Deployment 'config-map-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config-map-deployment-volume' of Deployment 'config-map-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config-map-deployment' of Deployment 'config-map-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config-map-deployment-volume' of Deployment 'config-map-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config-map-deployment" of deployment "config-map-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config-map-deployment-volume" of deployment "config-map-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment config-map-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-maps3_2.yaml:4
────────────────────────────────────────
   4 [   name: config-map-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-map-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-maps3_2.yaml:47-78
────────────────────────────────────────
  47 ┌       - name: config-map-deployment
  48 │         image: busybox
  49 │         resources:
  50 │           limits:
  51 │             memory: 128Mi
  52 │             cpu: 500m
  53 │         command:
  54 │         - /bin/sh
  55 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-map-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-maps3_2.yaml:29-46
────────────────────────────────────────
  29 ┌       - name: config-map-deployment-volume
  30 │         volumeMounts:
  31 │         - mountPath: /etc/order/nginx
  32 │           name: nginx-conf
  33 │         - mountPath: /etc/order/properties
  34 │           name: app-properties
  35 │         - mountPath: /etc/order/config
  36 │           name: config
  37 └         image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment config-map-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-maps3_2.yaml:14-78
────────────────────────────────────────
  14 ┌       volumes:
  15 │       - name: nginx-conf
  16 │         configMap:
  17 │           name: nginx-conf
  18 │       - name: app-properties
  19 │         configMap:
  20 │           name: app-properties
  21 │       - name: config
  22 └         projected:
  ..   
────────────────────────────────────────



config-patches.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'credentials-sync-eventhub' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"SYNC_PERIOD"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'credentials-sync-eventhub' in 'default' namespace stores secrets in key(s) or value(s) '{"KUBE_SECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config-patches1.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'credentials-sync-eventhub' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"SYNC_PERIOD"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 config-patches1.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'credentials-sync-eventhub' in 'default' namespace stores secrets in key(s) or value(s) '{"KUBE_SECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 config-patches1.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



config-patches2.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'credentials-sync-eventhub' in 'default' namespace stores secrets in key(s) or value(s) '{"KUBE_SECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config-patches3.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'credentials-sync-eventhub' in 'default' namespace stores secrets in key(s) or value(s) '{"KUBE_SECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 config-patches3.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



config-patches4.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'credentials-sync' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"SYNC_PERIOD"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'credentials-sync' in 'default' namespace stores secrets in key(s) or value(s) '{"KUBE_SECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config-patches5.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'credentials-sync' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"SYNC_PERIOD"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'credentials-sync' in 'default' namespace stores secrets in key(s) or value(s) '{"KUBE_SECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config-patches5_2.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0118 (HIGH): deployment credentials-sync in flux-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-patches5_2.yaml:8-10
────────────────────────────────────────
   8 ┌     metadata:
   9 │       labels:
  10 └         aadpodidbinding: $(AZ_IDENTITY_NAME)
────────────────────────────────────────



config-patches6.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'credentials-sync' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"SYNC_PERIOD"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'credentials-sync' in 'default' namespace stores secrets in key(s) or value(s) '{"KUBE_SECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config-patches7.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'credentials-sync' in 'default' namespace stores secrets in key(s) or value(s) '{"KUBE_SECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config-patches8.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'credentials-sync' in 'default' namespace stores secrets in key(s) or value(s) '{"KUBE_SECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config-patches9.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'credentials-sync' in 'default' namespace stores secrets in key(s) or value(s) '{"KUBE_SECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config-patches_2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0118 (HIGH): deployment credentials-sync-eventhub in flux-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-patches_2.yaml:8-10
────────────────────────────────────────
   8 ┌     metadata:
   9 │       labels:
  10 └         aadpodidbinding: $(AZ_IDENTITY_NAME)
────────────────────────────────────────



config-pod-1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config' of Pod 'config-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config' of Pod 'config-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config' of 'pod' 'config-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config' of Pod 'config-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config' of Pod 'config-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config" of pod "config-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod config-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-pod-1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: config-pod
   5 │   labels:
   6 └     app.kubernetes.io/name: config-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod-1.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod config-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod-1.yaml:8-22
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 └               name: simple-config
  ..   
────────────────────────────────────────



config-pod-11.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config' of Pod 'config-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config' of Pod 'config-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config' of 'pod' 'config-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config' of Pod 'config-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config' of Pod 'config-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config" of pod "config-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod config-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-pod-11.yaml:4-6
────────────────────────────────────────
   4 ┌   name: config-pod
   5 │   labels:
   6 └     app.kubernetes.io/name: config-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod-11.yaml:9-22
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod config-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod-11.yaml:8-22
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 └               name: simple-config
  ..   
────────────────────────────────────────



config-pod-2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config' of Pod 'config-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config' of Pod 'config-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config' of 'pod' 'config-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config' of Pod 'config-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config' of Pod 'config-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config" of pod "config-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod config-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-pod-2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: config-pod
   5 │   labels:
   6 └     app.kubernetes.io/name: config-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod-2.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod config-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod-2.yaml:8-33
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 └               name: simple-config
  ..   
────────────────────────────────────────



config-pod-21.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config' of Pod 'config-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config' of Pod 'config-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config' of 'pod' 'config-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config' of Pod 'config-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config' of Pod 'config-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config" of pod "config-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod config-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-pod-21.yaml:4-6
────────────────────────────────────────
   4 ┌   name: config-pod
   5 │   labels:
   6 └     app.kubernetes.io/name: config-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod-21.yaml:9-26
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 │               name: simple-config
  17 └               key: name
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod config-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod-21.yaml:8-33
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       env:
  13 │         - name: FIRST_NAME
  14 │           valueFrom:
  15 │             configMapKeyRef:
  16 └               name: simple-config
  ..   
────────────────────────────────────────



config-pod-3.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config' of Pod 'config-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config' of Pod 'config-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config' of 'pod' 'config-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config' of Pod 'config-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config' of Pod 'config-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config" of pod "config-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod config-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-pod-3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: config-pod
   5 │   labels:
   6 └     app.kubernetes.io/name: config-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod-3.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod config-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod-3.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 │           readOnly: true
  16 └   volumes:
  ..   
────────────────────────────────────────



config-pod-31.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config' of Pod 'config-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config' of Pod 'config-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config' of 'pod' 'config-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config' of Pod 'config-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config' of Pod 'config-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config' of Pod 'config-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config' of Pod 'config-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config" of pod "config-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod config-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-pod-31.yaml:4-6
────────────────────────────────────────
   4 ┌   name: config-pod
   5 │   labels:
   6 └     app.kubernetes.io/name: config-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod-31.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod config-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod-31.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: config
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: config
  14 │           mountPath: "/config"
  15 │           readOnly: true
  16 └   volumes:
  ..   
────────────────────────────────────────



config-pod.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key1", "key2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-pod1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key1", "key2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-pod1_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'config-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'config-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'config-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'config-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'config-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'config-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'config-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'config-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'config-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'config-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'config-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'config-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "config-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod config-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-pod1_1.yaml:4
────────────────────────────────────────
   4 [   name: config-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod config-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod1_1.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 └     - configMapRef:
  ..   
────────────────────────────────────────



config-pod2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-pod2.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod2.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: nginx
   9 │     image: nginx
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────



config-pod_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'config-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'config-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'config-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'config-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'config-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'config-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'config-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'config-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'config-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'config-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'config-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'config-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "config-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod config-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-pod_1.yaml:4
────────────────────────────────────────
   4 [   name: config-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: my-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod config-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-pod_1.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 └     - configMapRef:
  ..   
────────────────────────────────────────



config-server-deployment-service.yaml (kubernetes)
==================================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config-server' of Deployment 'config-server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config-server' of Deployment 'config-server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config-server' of 'deployment' 'config-server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config-server' of Deployment 'config-server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config-server' of Deployment 'config-server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config-server' of Deployment 'config-server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config-server' of Deployment 'config-server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config-server' of Deployment 'config-server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config-server' of Deployment 'config-server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config-server' of Deployment 'config-server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config-server' of Deployment 'config-server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config-server' of Deployment 'config-server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config-server" of deployment "config-server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment config-server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-server-deployment-service.yaml:4-6
────────────────────────────────────────
   4 ┌   name: config-server-deployment
   5 │   labels:
   6 └     app: config-server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment config-server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-server-deployment-service.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container config-server in deployment config-server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config-server-deployment-service.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: config-server
  19 │         image: bcaices/config-server
  20 │         ports:
  21 └         - containerPort: 8888
────────────────────────────────────────



config-server-deployment.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config-server-app' of 'deployment' 'config-server-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config-server-app' of Deployment 'config-server-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config-server-app" of deployment "config-server-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment config-server-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-server-deployment.yaml:4
────────────────────────────────────────
   4 [   name: config-server-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-server-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment config-server-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-server-deployment.yaml:14-19
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container config-server-app in deployment config-server-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config-server-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mervanmunis/configservice
  17 │         imagePullPolicy: IfNotPresent
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────



config-server-deployment1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config-server-app' of 'deployment' 'config-server-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config-server-app' of Deployment 'config-server-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config-server-app" of deployment "config-server-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment config-server-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-server-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: config-server-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-server-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment config-server-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-server-deployment1.yaml:14-19
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container config-server-app in deployment config-server-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config-server-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: config-server-app
  16 │         image: mohkeita/configserver
  17 │         imagePullPolicy: Always
  18 │         ports:
  19 └         - containerPort: 9296
────────────────────────────────────────



config-server-deployment2.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config-server-app' of 'deployment' 'config-server-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config-server-app' of Deployment 'config-server-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config-server-app" of deployment "config-server-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment config-server-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-server-deployment2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: config-server-app
   5 │   namespace: default
   6 │   labels:
   7 └     app: config-server-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-server-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment config-server-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-server-deployment2.yaml:23-34
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container config-server-app in deployment config-server-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config-server-deployment2.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: config-server-app
  25 │         image: 123joker/configserver:0.0.1
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - containerPort: 9296
  29 │         env:
  30 │         - name: EUREKA_SERVER_ADDRESS
  31 │           valueFrom:
  32 └             configMapKeyRef:
  ..   
────────────────────────────────────────



config-server-deployment3.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'config-server-vmagent-cm' in 'default' namespace stores secrets in key(s) or value(s) '{"      client_secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config-server-deployment3_1.yaml (kubernetes)
=============================================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'selmag-config-server' of Deployment 'selmag-config-server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vmagent' of Deployment 'selmag-config-server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'selmag-config-server' of Deployment 'selmag-config-server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vmagent' of Deployment 'selmag-config-server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'selmag-config-server' of 'deployment' 'selmag-config-server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vmagent' of 'deployment' 'selmag-config-server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'selmag-config-server' of Deployment 'selmag-config-server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vmagent' of Deployment 'selmag-config-server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'selmag-config-server' of Deployment 'selmag-config-server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vmagent' of Deployment 'selmag-config-server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'selmag-config-server' of Deployment 'selmag-config-server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'selmag-config-server' of Deployment 'selmag-config-server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vmagent' of Deployment 'selmag-config-server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'selmag-config-server' of Deployment 'selmag-config-server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vmagent' of Deployment 'selmag-config-server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'selmag-config-server' of Deployment 'selmag-config-server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vmagent' of Deployment 'selmag-config-server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'selmag-config-server' of Deployment 'selmag-config-server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vmagent' of Deployment 'selmag-config-server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'selmag-config-server' of Deployment 'selmag-config-server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vmagent' of Deployment 'selmag-config-server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'selmag-config-server' of Deployment 'selmag-config-server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vmagent' of Deployment 'selmag-config-server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "selmag-config-server" of deployment "selmag-config-server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vmagent" of deployment "selmag-config-server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment selmag-config-server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-server-deployment3_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: selmag-config-server-deployment
   5 │   labels:
   6 └     app: selmag-config-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container selmag-config-server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container selmag-config-server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment selmag-config-server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-server-deployment3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       volumes:
  17 │       - name: vmconfig
  18 │         configMap:
  19 │           name: config-server-vmagent-cm
  20 │       containers:
  21 │       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container selmag-config-server in deployment selmag-config-server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config-server-deployment3_1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: selmag-config-server
  22 │         imagePullPolicy: Always
  23 │         image: 192.168.49.1:5000/selmag/config-server:0.0.1
  24 │         ports:
  25 │         - containerPort: 8888
  26 │         args:
  27 │         - --logging.level.org.springframework.security=TRACE
  28 │         env:
  29 └         - name: SPRING_PROFILES_ACTIVE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vmagent in deployment selmag-config-server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config-server-deployment3_1.yaml:33-46
────────────────────────────────────────
  33 ┌       - name: vmagent
  34 │         image: victoriametrics/vmagent:v1.93.12
  35 │         env:
  36 │         - name: NODE_NAME
  37 │           valueFrom:
  38 │             fieldRef:
  39 │               fieldPath: metadata.name
  40 │         args:
  41 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────



config-service-deployment.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config-service-app' of Deployment 'config-service-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config-service-app' of Deployment 'config-service-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config-service-app' of 'deployment' 'config-service-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config-service-app' of Deployment 'config-service-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config-service-app' of Deployment 'config-service-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config-service-app' of Deployment 'config-service-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config-service-app' of Deployment 'config-service-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config-service-app' of Deployment 'config-service-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config-service-app' of Deployment 'config-service-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config-service-app' of Deployment 'config-service-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config-service-app' of Deployment 'config-service-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config-service-app' of Deployment 'config-service-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config-service-app" of deployment "config-service-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment config-service-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-service-deployment.yaml:4
────────────────────────────────────────
   4 [   name: config-service-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-service-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment config-service-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-service-deployment.yaml:14-24
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container config-service-app in deployment config-service-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config-service-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       - name: config-service-app
  16 │         image: valton93/configservice
  17 │         ports:
  18 │         - containerPort: 8085
  19 │         env:
  20 │         - name: EUREKA_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: eureka-service-url
  24 └               name: eureka-cm
────────────────────────────────────────



config-service_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'psa-config-server-app' of StatefulSet 'psa-config-server-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'psa-config-server-app' of StatefulSet 'psa-config-server-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'psa-config-server-app' of 'statefulset' 'psa-config-server-app' in 'cctns-new' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'psa-config-server-app' of StatefulSet 'psa-config-server-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'psa-config-server-app' of StatefulSet 'psa-config-server-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'psa-config-server-app' of StatefulSet 'psa-config-server-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'psa-config-server-app' of StatefulSet 'psa-config-server-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'psa-config-server-app' of StatefulSet 'psa-config-server-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): StatefulSet 'psa-config-server-app' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 config-service_1.yaml:7-72
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: psa-config-server-app
  11 │   serviceName: psa-config-svc
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         app: psa-config-server-app
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "psa-config-server-app" of statefulset "psa-config-server-app" in "cctns-new" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container psa-config-server-app in cctns-new namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset psa-config-server-app in cctns-new namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-service_1.yaml:18-72
────────────────────────────────────────
  18 ┌       containers:
  19 │       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container psa-config-server-app in statefulset psa-config-server-app (namespace: cctns-new) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config-service_1.yaml:19-62
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: APPLICATION_SERVER
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────



config-system.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'config-kub-values' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PGADMIN_DEFAULT_EMAIL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-updater-cu.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'oai-ip-cu' of Deployment 'oai-ip-cu' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'oai-ip-cu' of Deployment 'oai-ip-cu' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'oai-ip-cu' of 'deployment' 'oai-ip-cu' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'oai-ip-cu' of Deployment 'oai-ip-cu' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'oai-ip-cu' of Deployment 'oai-ip-cu' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'oai-ip-cu' of Deployment 'oai-ip-cu' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'oai-ip-cu' of Deployment 'oai-ip-cu' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'oai-ip-cu' of Deployment 'oai-ip-cu' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'oai-ip-cu' of Deployment 'oai-ip-cu' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'oai-ip-cu' of Deployment 'oai-ip-cu' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'oai-ip-cu' of Deployment 'oai-ip-cu' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'oai-ip-cu' of Deployment 'oai-ip-cu' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "oai-ip-cu" of deployment "oai-ip-cu" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment oai-ip-cu in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-updater-cu.yaml:4
────────────────────────────────────────
   4 [   name: oai-ip-cu
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container oai-ip-cu in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment oai-ip-cu in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-updater-cu.yaml:15-27
────────────────────────────────────────
  15 ┌       serviceAccountName: config-updater-sa
  16 │       containers:
  17 │       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 └           value: "oai-ip-config"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container oai-ip-cu in deployment oai-ip-cu (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config-updater-cu.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-cu
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "cu" # Set this to "du" for the du pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "cu-config" # Set this to "du" for the du pod
  ..   
────────────────────────────────────────



config-updater-du.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'oai-ip-du' of Deployment 'oai-ip-du' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'oai-ip-du' of Deployment 'oai-ip-du' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'oai-ip-du' of 'deployment' 'oai-ip-du' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'oai-ip-du' of Deployment 'oai-ip-du' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'oai-ip-du' of Deployment 'oai-ip-du' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'oai-ip-du' of Deployment 'oai-ip-du' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'oai-ip-du' of Deployment 'oai-ip-du' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'oai-ip-du' of Deployment 'oai-ip-du' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'oai-ip-du' of Deployment 'oai-ip-du' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'oai-ip-du' of Deployment 'oai-ip-du' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'oai-ip-du' of Deployment 'oai-ip-du' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'oai-ip-du' of Deployment 'oai-ip-du' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "oai-ip-du" of deployment "oai-ip-du" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment oai-ip-du in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-updater-du.yaml:4
────────────────────────────────────────
   4 [   name: oai-ip-du
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container oai-ip-du in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment oai-ip-du in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-updater-du.yaml:15-27
────────────────────────────────────────
  15 ┌       serviceAccountName: config-updater-sa
  16 │       containers:
  17 │       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 └           value: "oai-ip-config"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container oai-ip-du in deployment oai-ip-du (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config-updater-du.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: oai-ip-du
  18 │         image: krsnucc21/config-updater
  19 │         env:
  20 │         - name: NODE_TYPE
  21 │           value: "du" # Set this to "cu" for the cu pod
  22 │         - name: IP_CONFIGMAP_NAME
  23 │           value: "oai-ip-config"
  24 │         - name: GNB_CONFIGMAP_NAME
  25 └           value: "du-config" # Set this to "cu" for the cu pod
  ..   
────────────────────────────────────────



config-var.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-var.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-var.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-var.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 └               name: myconfig
  ..   
────────────────────────────────────────



config-var1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-var1.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-var1.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: myconfig
  15 └               key: special.level
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-var1.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "echo $(LEVEL) $(TYPE)" ]
  10 │       env:
  11 │         - name: LEVEL
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 └               name: myconfig
  ..   
────────────────────────────────────────



config13_10.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0005 (HIGH): Container 'speaker' of DaemonSet 'speaker' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
────────────────────────────────────────
 config13_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 config13_10.yaml:10-63
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config13_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config13_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config13_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config13_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config13_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 config13_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config13_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config13_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config13_10.yaml:49-54
────────────────────────────────────────
  49 ┌             add:
  50 │             - NET_ADMIN
  51 │             - NET_RAW
  52 │             - SYS_ADMIN
  53 │             drop:
  54 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config13_10.yaml:23-63
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config13_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



config13_11.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config13_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config13_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config13_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config13_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config13_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config13_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────



config13_4.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'metallb-system:controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 config13_4.yaml:8-16
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - services
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 │   - watch
  16 └   - update
────────────────────────────────────────



config238.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'gogs-db-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'gogs-db-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config239_14.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config239_14.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config239_14.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config239_14.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config239_14.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config239_14.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config239_14.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config239_14.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 config239_14.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config239_14.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config239_14.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config239_14.yaml:27-110
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config239_14.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



config239_15.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config239_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



config239_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config239_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



config239_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 config239_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



config239_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 config239_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



config239_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 config239_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



config239_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 config239_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



config248_2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'simplifier-config' in 'simplifier' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config248_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysqlinit-config' in 'simplifier' namespace stores secrets in key(s) or value(s) '{"  password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config275.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'litestream' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"        secret-access-key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 config275.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



config29.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app1-container' of Deployment 'app1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app1-container' of Deployment 'app1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app1-container' of 'deployment' 'app1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app1-container' of Deployment 'app1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app1-container' of Deployment 'app1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app1-container' of Deployment 'app1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app1-container' of Deployment 'app1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app1-container' of Deployment 'app1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app1-container' of Deployment 'app1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app1-container' of Deployment 'app1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app1-container' of Deployment 'app1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app1-container' of Deployment 'app1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app1-container" of deployment "app1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config29.yaml:4
────────────────────────────────────────
   4 [   name: app1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config29.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app1-container in deployment app1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config29.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────



config3.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ghost-conf' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"    \"from\""}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config30.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app2-container' of Deployment 'app2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app2-container' of Deployment 'app2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app2-container' of 'deployment' 'app2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app2-container' of Deployment 'app2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app2-container' of Deployment 'app2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app2-container' of Deployment 'app2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app2-container' of Deployment 'app2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app2-container' of Deployment 'app2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app2-container' of Deployment 'app2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app2-container' of Deployment 'app2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app2-container' of Deployment 'app2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app2-container' of Deployment 'app2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app2-container" of deployment "app2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config30.yaml:4
────────────────────────────────────────
   4 [   name: app2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment app2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config30.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app2-container in deployment app2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config30.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



config31.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app3-container' of Deployment 'app3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app3-container' of Deployment 'app3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app3-container' of 'deployment' 'app3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app3-container' of Deployment 'app3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app3-container' of Deployment 'app3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app3-container' of Deployment 'app3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app3-container' of Deployment 'app3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app3-container' of Deployment 'app3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app3-container' of Deployment 'app3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app3-container' of Deployment 'app3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app3-container' of Deployment 'app3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app3-container' of Deployment 'app3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app3-container" of deployment "app3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config31.yaml:4
────────────────────────────────────────
   4 [   name: app3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config31.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app3-container in deployment app3 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config31.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────



config336_10.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0005 (HIGH): Container 'speaker' of DaemonSet 'speaker' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
────────────────────────────────────────
 config336_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 config336_10.yaml:10-63
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config336_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config336_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config336_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config336_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config336_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 config336_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config336_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config336_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config336_10.yaml:49-54
────────────────────────────────────────
  49 ┌             add:
  50 │             - NET_ADMIN
  51 │             - NET_RAW
  52 │             - SYS_ADMIN
  53 │             drop:
  54 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config336_10.yaml:23-63
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config336_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



config336_11.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config336_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config336_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config336_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config336_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config336_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config336_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────



config336_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'metallb-system:controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 config336_4.yaml:8-16
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - services
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 │   - watch
  16 └   - update
────────────────────────────────────────



config339.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'postgres-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config343.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-configs' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"spring.datasource.username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'app-configs' in 'default' namespace stores secrets in key(s) or value(s) '{"spring.datasource.password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config348.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'emailservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config348.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────



config348_10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'shippingservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config348_10.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_10.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config348_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'adservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config348_12.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_12.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────



config348_14.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'cartservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config348_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_14.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────



config348_16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config348_16.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_16.yaml:14-33
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config348_18.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'frontend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config348_18.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_18.yaml:14-35
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config348_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config348_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_2.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────



config348_21.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config348_21.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_21.yaml:14-24
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 │           name: redis-data
  22 └       volumes:
  ..   
────────────────────────────────────────



config348_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'paymentservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config348_4.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_4.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config348_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config348_6.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_6.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────



config348_8.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'currencyservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config348_8.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config348_8.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────



config36_2.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'role-cicd' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 config36_2.yaml:7-20
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - apps
   9 │   - ''
  10 │   resources:
  11 │   - deployment
  12 │   - pods
  13 │   - replicasets
  14 │   verbs:
  15 └   - get
  ..   
────────────────────────────────────────



config36_6.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test' of Pod 'test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test' of Pod 'test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test' of 'pod' 'test' in 'cicd' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test' of Pod 'test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test' of Pod 'test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test' of Pod 'test' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test' of Pod 'test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test' of Pod 'test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test' of Pod 'test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test' of Pod 'test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test' of Pod 'test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test' of Pod 'test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test" of pod "test" in "cicd" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod test in cicd namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test in cicd namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config36_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod test in cicd namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config36_6.yaml:9-13
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────



config388.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config388.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────



config388_10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config388_10.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_10.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config388_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config388_12.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_12.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────



config388_14.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config388_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_14.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────



config388_16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config388_16.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_16.yaml:14-33
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config388_18.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config388_18.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_18.yaml:16-37
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config388_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config388_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_2.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────



config388_20.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config388_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_20.yaml:14-24
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 │           name: redis-data
  22 └       volumes:
  ..   
────────────────────────────────────────



config388_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config388_4.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_4.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config388_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config388_6.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_6.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────



config388_8.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'currencyservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config388_8.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config388_8.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────



config425.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config425.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         livenessProbe:
  23 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config425.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         livenessProbe:
  23 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config425.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         livenessProbe:
  23 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config425.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         livenessProbe:
  23 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config425.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         livenessProbe:
  23 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config425.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         livenessProbe:
  23 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config425.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         livenessProbe:
  23 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config425.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         livenessProbe:
  23 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config425.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         livenessProbe:
  23 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config425.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         livenessProbe:
  23 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config425.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         livenessProbe:
  23 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425.yaml:14-36
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 └         livenessProbe:
  ..   
────────────────────────────────────────



config425_10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'shippingservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'shippingservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'shippingservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'shippingservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config425_10.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_10.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_10.yaml:15-30
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 └         livenessProbe:
  ..   
────────────────────────────────────────



config425_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config425_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config425_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config425_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config425_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config425_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config425_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config425_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config425_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config425_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config425_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config425_12.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_12.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 └         livenessProbe:
  ..   
────────────────────────────────────────



config425_14.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'cartservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'cartservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'cartservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'cartservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config425_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_14.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_14.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 └         - name: REDIS_ADDR
  ..   
────────────────────────────────────────



config425_16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config425_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config425_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config425_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config425_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config425_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config425_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config425_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config425_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config425_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config425_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config425_16.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_16.yaml:15-42
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 └             port: 6379
  ..   
────────────────────────────────────────



config425_18.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config425_18.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_18.yaml:15-42
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config425_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config425_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_2.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_2.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config425_20.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config425_20.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_20.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_20.yaml:15-46
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config425_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config425_4.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_4.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_4.yaml:15-32
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────



config425_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'paymentservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'paymentservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'paymentservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'paymentservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config425_6.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_6.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_6.yaml:15-32
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────



config425_8.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'currencyservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'currencyservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'currencyservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'currencyservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config425_8.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_8.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config425_8.yaml:15-32
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────



config494_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'fluent-bit' of DaemonSet 'fluent-bit' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fluent-bit' of DaemonSet 'fluent-bit' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fluent-bit' of 'daemonset' 'fluent-bit' in 'logging' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'fluent-bit' of DaemonSet 'fluent-bit' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fluent-bit' of DaemonSet 'fluent-bit' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fluent-bit' of DaemonSet 'fluent-bit' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'fluent-bit' of DaemonSet 'fluent-bit' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'fluent-bit' of DaemonSet 'fluent-bit' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'fluent-bit' of DaemonSet 'fluent-bit' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fluent-bit' of DaemonSet 'fluent-bit' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fluent-bit' of DaemonSet 'fluent-bit' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'fluent-bit' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 config494_1.yaml:11-76
────────────────────────────────────────
  11 ┌   selector:
  12 │     matchLabels:
  13 │       k8s-app: fluent-bit-logging
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         k8s-app: fluent-bit-logging
  18 │         version: v1
  19 └         kubernetes.io/cluster-service: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fluent-bit" of daemonset "fluent-bit" in "logging" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container fluent-bit in logging namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset fluent-bit in logging namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config494_1.yaml:25-76
────────────────────────────────────────
  25 ┌       containers:
  26 │       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 └         - name: varlog
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container fluent-bit in daemonset fluent-bit (namespace: logging) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config494_1.yaml:26-46
────────────────────────────────────────
  26 ┌       - name: fluent-bit
  27 │         image: cr.yandex/yc/fluent-bit-plugin-yandex:v2.1.1-fluent-bit-2.1.7
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 2020
  31 │         env: null
  32 │         volumeMounts:
  33 │         - name: varlog
  34 └           mountPath: /var/log
  ..   
────────────────────────────────────────



config5.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-ingress' of Deployment 'test-ingress' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-ingress' of 'deployment' 'test-ingress' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-ingress' of Deployment 'test-ingress' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-ingress' of Deployment 'test-ingress' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-ingress" of deployment "test-ingress" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment test-ingress in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-ingress
   5 │   labels:
   6 └     app: test-ingress
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment test-ingress in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-ingress in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment test-ingress in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config5.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container test-ingress in deployment test-ingress (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config5.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



config516_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pg-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PGADMIN_DEFAULT_EMAIL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config523_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-db-setting' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config523_2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'database' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config524_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-db-setting' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config524_2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'database' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config525_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-db-setting' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config525_2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'database' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config532.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config532.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────



config532_10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config532_10.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_10.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config532_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config532_12.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_12.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────



config532_14.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config532_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_14.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────



config532_16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config532_16.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_16.yaml:14-33
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config532_18.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config532_18.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_18.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_18.yaml:16-37
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config532_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config532_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_2.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────



config532_20.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config532_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_20.yaml:14-24
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 │           name: redis-data
  22 └       volumes:
  ..   
────────────────────────────────────────



config532_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config532_4.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_4.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config532_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config532_6.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_6.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────



config532_8.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'currencyservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config532_8.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config532_8.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────



config547.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiali' in 'istio-system' namespace stores sensitive contents in key(s) or value(s) '{"  signing_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 config547.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'kiali' in 'istio-system' namespace stores secrets in key(s) or value(s) '{"login_token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 config547.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



config549.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiali' in 'istio-system' namespace stores sensitive contents in key(s) or value(s) '{"  signing_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 config549.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'kiali' in 'istio-system' namespace stores secrets in key(s) or value(s) '{"login_token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 config549.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



config551.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'service' in 'staging' namespace stores sensitive contents in key(s) or value(s) '{"mongodbUri"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 config551.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'service' in 'staging' namespace stores secrets in key(s) or value(s) '{"secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 config551.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



config556.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiali' in 'istio-system' namespace stores sensitive contents in key(s) or value(s) '{"  signing_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 config556.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'kiali' in 'istio-system' namespace stores secrets in key(s) or value(s) '{"login_token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 config556.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



config567.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'tenant-service' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"    username", "  private-key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'tenant-service' in 'default' namespace stores secrets in key(s) or value(s) '{"    password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config568.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'user-service' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"    username", "  private-key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'user-service' in 'default' namespace stores secrets in key(s) or value(s) '{"    password", "  clientSecret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config569_10.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0005 (HIGH): Container 'speaker' of DaemonSet 'speaker' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
────────────────────────────────────────
 config569_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 config569_10.yaml:10-63
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config569_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config569_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config569_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config569_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config569_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 config569_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config569_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config569_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config569_10.yaml:49-54
────────────────────────────────────────
  49 ┌             add:
  50 │             - NET_ADMIN
  51 │             - NET_RAW
  52 │             - SYS_ADMIN
  53 │             drop:
  54 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config569_10.yaml:23-63
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config569_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



config569_11.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config569_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config569_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config569_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config569_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config569_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config569_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────



config569_4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'metallb-system:controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 config569_4.yaml:8-16
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - services
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 │   - watch
  16 └   - update
────────────────────────────────────────



config570.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'emailservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'emailservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'emailservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'emailservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config570.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────



config570_10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config570_10.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_10.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────



config570_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config570_12.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_12.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_12.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────



config570_14.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'cartservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'cartservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'cartservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'cartservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config570_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_14.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7070'
  22 │         - name: REDIS_ADDR
  23 └           value: redis:6379
────────────────────────────────────────



config570_16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'redis' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "redis" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config570_16.yaml:4
────────────────────────────────────────
   4 [   name: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_16.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_16.yaml:14-24
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: service
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 │           mountPath: /data
  22 └       volumes:
  ..   
────────────────────────────────────────



config570_18.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config570_18.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_18.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: SHIPPING_SERVICE_ADDR
  23 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_18.yaml:14-33
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 └         - name: SHIPPING_SERVICE_ADDR
  ..   
────────────────────────────────────────



config570_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'shippingservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'shippingservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'shippingservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'shippingservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config570_2.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_2.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_2.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config570_20.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'fontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'fontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'fontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'fontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'fontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'fontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'fontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'fontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'fontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'fontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'fontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "fontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment fontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config570_20.yaml:4
────────────────────────────────────────
   4 [   name: fontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container fontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_20.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment fontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_20.yaml:14-35
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config570_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'paymentservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'paymentservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'paymentservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'paymentservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config570_4.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_4.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_4.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────



config570_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'currencyservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'currencyservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'currencyservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'currencyservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config570_6.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_6.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_6.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         - name: DISABLE_PROFILER
  23 └           value: '1'
────────────────────────────────────────



config570_8.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'adservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'adservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'adservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'adservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config570_8.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config570_8.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: service
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────



config578_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-db-setting' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config578_2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'database' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config579.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kafka-broker-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"KAFKA_CFG_ADVERTISED_LISTENERS", "KAFKA_CFG_CONTROLLER_LISTENER_NAMES", "KAFKA_CFG_LISTENERS", "KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config580.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MONGO_INITDB_ROOT_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-config' in 'default' namespace stores secrets in key(s) or value(s) '{"MONGO_INITDB_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config581.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config582.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'python-demo-config' in 'default' namespace stores secrets in key(s) or value(s) '{"SPLUNK_ACCESS_TOKEN"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config602.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configure' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"rootpassword"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'configure' in 'default' namespace stores secrets in key(s) or value(s) '{"rootpassword"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config608.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'emailservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config608.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────



config608_10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'shippingservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config608_10.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_10.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config608_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'adservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config608_12.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_12.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────



config608_14.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'cartservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config608_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_14.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────



config608_16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config608_16.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_16.yaml:14-33
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config608_18.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'frontend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config608_18.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_18.yaml:14-35
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config608_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config608_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_2.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────



config608_21.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config608_21.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_21.yaml:14-24
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 │           name: redis-data
  22 └       volumes:
  ..   
────────────────────────────────────────



config608_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'paymentservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config608_4.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_4.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config608_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config608_6.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_6.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────



config608_8.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'currencyservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config608_8.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config608_8.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────



config609_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-db-setting' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config609_2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'database' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config610_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-db-setting' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config610_2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'database' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config611_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-db-setting' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config611_2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'database' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config639_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-db-setting' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config639_2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'database' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config640_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-db-setting' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config640_2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'database' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config641_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-db-setting' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config641_2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'database' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config648.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'email-service-container' of Deployment 'email-service-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config648.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  20 │         name: email-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'email-service-container' of Deployment 'email-service-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config648.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  20 │         name: email-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'email-service-container' of 'deployment' 'email-service-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config648.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  20 │         name: email-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'email-service-container' of Deployment 'email-service-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config648.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  20 │         name: email-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'email-service-container' of Deployment 'email-service-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config648.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  20 │         name: email-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'email-service-container' of Deployment 'email-service-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config648.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  20 │         name: email-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'email-service-container' of Deployment 'email-service-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config648.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  20 │         name: email-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config648.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  20 │         name: email-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "email-service-container" of deployment "email-service-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config648.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  20 │         name: email-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config648.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  20 │         name: email-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment email-service-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config648.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: email-service-dep
   6 └   name: email-service-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container email-service-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  20 │         name: email-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment email-service-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648.yaml:18-40
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  20 │         name: email-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 └           periodSeconds: 5
  ..   
────────────────────────────────────────



config648_10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'shipping-service-container' of Deployment 'shipping-service-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config648_10.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  20 │         name: shipping-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'shipping-service-container' of Deployment 'shipping-service-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config648_10.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  20 │         name: shipping-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'shipping-service-container' of 'deployment' 'shipping-service-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config648_10.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  20 │         name: shipping-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'shipping-service-container' of Deployment 'shipping-service-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config648_10.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  20 │         name: shipping-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'shipping-service-container' of Deployment 'shipping-service-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config648_10.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  20 │         name: shipping-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'shipping-service-container' of Deployment 'shipping-service-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config648_10.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  20 │         name: shipping-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'shipping-service-container' of Deployment 'shipping-service-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config648_10.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  20 │         name: shipping-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config648_10.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  20 │         name: shipping-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "shipping-service-container" of deployment "shipping-service-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config648_10.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  20 │         name: shipping-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config648_10.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  20 │         name: shipping-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shipping-service-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config648_10.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: my-dep
   6 └   name: shipping-service-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shipping-service-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_10.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  20 │         name: shipping-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shipping-service-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_10.yaml:18-40
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  20 │         name: shipping-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 └           periodSeconds: 5
  ..   
────────────────────────────────────────



config648_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ad-service-container' of Deployment 'ad-service-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config648_12.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │         name: ad-service-container
  21 │         ports:
  22 │         - containerPort: 9555
  23 │         readinessProbe:
  24 │           initialDelaySeconds: 20
  25 │           grpc:
  26 │             port: 9555
  27 └           periodSeconds: 15
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ad-service-container' of Deployment 'ad-service-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config648_12.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │         name: ad-service-container
  21 │         ports:
  22 │         - containerPort: 9555
  23 │         readinessProbe:
  24 │           initialDelaySeconds: 20
  25 │           grpc:
  26 │             port: 9555
  27 └           periodSeconds: 15
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ad-service-container' of 'deployment' 'ad-service-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config648_12.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │         name: ad-service-container
  21 │         ports:
  22 │         - containerPort: 9555
  23 │         readinessProbe:
  24 │           initialDelaySeconds: 20
  25 │           grpc:
  26 │             port: 9555
  27 └           periodSeconds: 15
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ad-service-container' of Deployment 'ad-service-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config648_12.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │         name: ad-service-container
  21 │         ports:
  22 │         - containerPort: 9555
  23 │         readinessProbe:
  24 │           initialDelaySeconds: 20
  25 │           grpc:
  26 │             port: 9555
  27 └           periodSeconds: 15
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ad-service-container' of Deployment 'ad-service-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config648_12.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │         name: ad-service-container
  21 │         ports:
  22 │         - containerPort: 9555
  23 │         readinessProbe:
  24 │           initialDelaySeconds: 20
  25 │           grpc:
  26 │             port: 9555
  27 └           periodSeconds: 15
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ad-service-container' of Deployment 'ad-service-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config648_12.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │         name: ad-service-container
  21 │         ports:
  22 │         - containerPort: 9555
  23 │         readinessProbe:
  24 │           initialDelaySeconds: 20
  25 │           grpc:
  26 │             port: 9555
  27 └           periodSeconds: 15
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ad-service-container' of Deployment 'ad-service-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config648_12.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │         name: ad-service-container
  21 │         ports:
  22 │         - containerPort: 9555
  23 │         readinessProbe:
  24 │           initialDelaySeconds: 20
  25 │           grpc:
  26 │             port: 9555
  27 └           periodSeconds: 15
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config648_12.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │         name: ad-service-container
  21 │         ports:
  22 │         - containerPort: 9555
  23 │         readinessProbe:
  24 │           initialDelaySeconds: 20
  25 │           grpc:
  26 │             port: 9555
  27 └           periodSeconds: 15
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ad-service-container" of deployment "ad-service-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config648_12.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │         name: ad-service-container
  21 │         ports:
  22 │         - containerPort: 9555
  23 │         readinessProbe:
  24 │           initialDelaySeconds: 20
  25 │           grpc:
  26 │             port: 9555
  27 └           periodSeconds: 15
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config648_12.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │         name: ad-service-container
  21 │         ports:
  22 │         - containerPort: 9555
  23 │         readinessProbe:
  24 │           initialDelaySeconds: 20
  25 │           grpc:
  26 │             port: 9555
  27 └           periodSeconds: 15
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ad-service-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config648_12.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: my-dep
   6 └   name: ad-service-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ad-service-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_12.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │         name: ad-service-container
  21 │         ports:
  22 │         - containerPort: 9555
  23 │         readinessProbe:
  24 │           initialDelaySeconds: 20
  25 │           grpc:
  26 │             port: 9555
  27 └           periodSeconds: 15
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ad-service-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_12.yaml:18-42
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │         name: ad-service-container
  21 │         ports:
  22 │         - containerPort: 9555
  23 │         readinessProbe:
  24 │           initialDelaySeconds: 20
  25 │           grpc:
  26 └             port: 9555
  ..   
────────────────────────────────────────



config648_14.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cart-service-container' of Deployment 'cart-service-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config648_14.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │         name: cart-service-container
  21 │         ports:
  22 │         - containerPort: 7070
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7070
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cart-service-container' of Deployment 'cart-service-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config648_14.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │         name: cart-service-container
  21 │         ports:
  22 │         - containerPort: 7070
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7070
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cart-service-container' of 'deployment' 'cart-service-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config648_14.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │         name: cart-service-container
  21 │         ports:
  22 │         - containerPort: 7070
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7070
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cart-service-container' of Deployment 'cart-service-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config648_14.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │         name: cart-service-container
  21 │         ports:
  22 │         - containerPort: 7070
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7070
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cart-service-container' of Deployment 'cart-service-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config648_14.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │         name: cart-service-container
  21 │         ports:
  22 │         - containerPort: 7070
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7070
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cart-service-container' of Deployment 'cart-service-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config648_14.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │         name: cart-service-container
  21 │         ports:
  22 │         - containerPort: 7070
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7070
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cart-service-container' of Deployment 'cart-service-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config648_14.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │         name: cart-service-container
  21 │         ports:
  22 │         - containerPort: 7070
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7070
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config648_14.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │         name: cart-service-container
  21 │         ports:
  22 │         - containerPort: 7070
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7070
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cart-service-container" of deployment "cart-service-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config648_14.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │         name: cart-service-container
  21 │         ports:
  22 │         - containerPort: 7070
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7070
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config648_14.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │         name: cart-service-container
  21 │         ports:
  22 │         - containerPort: 7070
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7070
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cart-service-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config648_14.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: my-dep
   6 └   name: cart-service-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cart-service-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_14.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │         name: cart-service-container
  21 │         ports:
  22 │         - containerPort: 7070
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7070
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cart-service-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_14.yaml:18-42
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │         name: cart-service-container
  21 │         ports:
  22 │         - containerPort: 7070
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7070
  26 └           periodSeconds: 5
  ..   
────────────────────────────────────────



config648_16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis-cart-container' of Deployment 'redis-cart-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config648_16.yaml:22-43
────────────────────────────────────────
  22 ┌       - image: redis:alpine
  23 │         name: redis-cart-container
  24 │         volumeMounts:
  25 │         - name: redis-data
  26 │           mountPath: /data
  27 │         ports:
  28 │         - containerPort: 6379
  29 │         readinessProbe:
  30 └           tcpSocket:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis-cart-container' of Deployment 'redis-cart-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config648_16.yaml:22-43
────────────────────────────────────────
  22 ┌       - image: redis:alpine
  23 │         name: redis-cart-container
  24 │         volumeMounts:
  25 │         - name: redis-data
  26 │           mountPath: /data
  27 │         ports:
  28 │         - containerPort: 6379
  29 │         readinessProbe:
  30 └           tcpSocket:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis-cart-container' of 'deployment' 'redis-cart-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config648_16.yaml:22-43
────────────────────────────────────────
  22 ┌       - image: redis:alpine
  23 │         name: redis-cart-container
  24 │         volumeMounts:
  25 │         - name: redis-data
  26 │           mountPath: /data
  27 │         ports:
  28 │         - containerPort: 6379
  29 │         readinessProbe:
  30 └           tcpSocket:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis-cart-container' of Deployment 'redis-cart-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config648_16.yaml:22-43
────────────────────────────────────────
  22 ┌       - image: redis:alpine
  23 │         name: redis-cart-container
  24 │         volumeMounts:
  25 │         - name: redis-data
  26 │           mountPath: /data
  27 │         ports:
  28 │         - containerPort: 6379
  29 │         readinessProbe:
  30 └           tcpSocket:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis-cart-container' of Deployment 'redis-cart-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config648_16.yaml:22-43
────────────────────────────────────────
  22 ┌       - image: redis:alpine
  23 │         name: redis-cart-container
  24 │         volumeMounts:
  25 │         - name: redis-data
  26 │           mountPath: /data
  27 │         ports:
  28 │         - containerPort: 6379
  29 │         readinessProbe:
  30 └           tcpSocket:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis-cart-container' of Deployment 'redis-cart-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config648_16.yaml:22-43
────────────────────────────────────────
  22 ┌       - image: redis:alpine
  23 │         name: redis-cart-container
  24 │         volumeMounts:
  25 │         - name: redis-data
  26 │           mountPath: /data
  27 │         ports:
  28 │         - containerPort: 6379
  29 │         readinessProbe:
  30 └           tcpSocket:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis-cart-container' of Deployment 'redis-cart-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config648_16.yaml:22-43
────────────────────────────────────────
  22 ┌       - image: redis:alpine
  23 │         name: redis-cart-container
  24 │         volumeMounts:
  25 │         - name: redis-data
  26 │           mountPath: /data
  27 │         ports:
  28 │         - containerPort: 6379
  29 │         readinessProbe:
  30 └           tcpSocket:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config648_16.yaml:22-43
────────────────────────────────────────
  22 ┌       - image: redis:alpine
  23 │         name: redis-cart-container
  24 │         volumeMounts:
  25 │         - name: redis-data
  26 │           mountPath: /data
  27 │         ports:
  28 │         - containerPort: 6379
  29 │         readinessProbe:
  30 └           tcpSocket:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis-cart-container" of deployment "redis-cart-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config648_16.yaml:22-43
────────────────────────────────────────
  22 ┌       - image: redis:alpine
  23 │         name: redis-cart-container
  24 │         volumeMounts:
  25 │         - name: redis-data
  26 │           mountPath: /data
  27 │         ports:
  28 │         - containerPort: 6379
  29 │         readinessProbe:
  30 └           tcpSocket:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config648_16.yaml:22-43
────────────────────────────────────────
  22 ┌       - image: redis:alpine
  23 │         name: redis-cart-container
  24 │         volumeMounts:
  25 │         - name: redis-data
  26 │           mountPath: /data
  27 │         ports:
  28 │         - containerPort: 6379
  29 │         readinessProbe:
  30 └           tcpSocket:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config648_16.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: redis-cart-dep
   6 └   name: redis-cart-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_16.yaml:22-43
────────────────────────────────────────
  22 ┌       - image: redis:alpine
  23 │         name: redis-cart-container
  24 │         volumeMounts:
  25 │         - name: redis-data
  26 │           mountPath: /data
  27 │         ports:
  28 │         - containerPort: 6379
  29 │         readinessProbe:
  30 └           tcpSocket:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_16.yaml:18-43
────────────────────────────────────────
  18 ┌       volumes:
  19 │       - name: redis-data
  20 │         emptyDir: {}
  21 │       containers:
  22 │       - image: redis:alpine
  23 │         name: redis-cart-container
  24 │         volumeMounts:
  25 │         - name: redis-data
  26 └           mountPath: /data
  ..   
────────────────────────────────────────



config648_18.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'checkout-service-container' of Deployment 'checkout-service-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config648_18.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  20 │         name: checkout-service-container
  21 │         ports:
  22 │         - containerPort: 5050
  23 │         env:
  24 │         - name: PORT
  25 │           value: '5050'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'checkout-service-container' of Deployment 'checkout-service-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config648_18.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  20 │         name: checkout-service-container
  21 │         ports:
  22 │         - containerPort: 5050
  23 │         env:
  24 │         - name: PORT
  25 │           value: '5050'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'checkout-service-container' of 'deployment' 'checkout-service-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config648_18.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  20 │         name: checkout-service-container
  21 │         ports:
  22 │         - containerPort: 5050
  23 │         env:
  24 │         - name: PORT
  25 │           value: '5050'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'checkout-service-container' of Deployment 'checkout-service-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config648_18.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  20 │         name: checkout-service-container
  21 │         ports:
  22 │         - containerPort: 5050
  23 │         env:
  24 │         - name: PORT
  25 │           value: '5050'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'checkout-service-container' of Deployment 'checkout-service-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config648_18.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  20 │         name: checkout-service-container
  21 │         ports:
  22 │         - containerPort: 5050
  23 │         env:
  24 │         - name: PORT
  25 │           value: '5050'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'checkout-service-container' of Deployment 'checkout-service-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config648_18.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  20 │         name: checkout-service-container
  21 │         ports:
  22 │         - containerPort: 5050
  23 │         env:
  24 │         - name: PORT
  25 │           value: '5050'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'checkout-service-container' of Deployment 'checkout-service-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config648_18.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  20 │         name: checkout-service-container
  21 │         ports:
  22 │         - containerPort: 5050
  23 │         env:
  24 │         - name: PORT
  25 │           value: '5050'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config648_18.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  20 │         name: checkout-service-container
  21 │         ports:
  22 │         - containerPort: 5050
  23 │         env:
  24 │         - name: PORT
  25 │           value: '5050'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "checkout-service-container" of deployment "checkout-service-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config648_18.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  20 │         name: checkout-service-container
  21 │         ports:
  22 │         - containerPort: 5050
  23 │         env:
  24 │         - name: PORT
  25 │           value: '5050'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config648_18.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  20 │         name: checkout-service-container
  21 │         ports:
  22 │         - containerPort: 5050
  23 │         env:
  24 │         - name: PORT
  25 │           value: '5050'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkout-service-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config648_18.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: checkout-service-dep
   6 └   name: checkout-service-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkout-service-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_18.yaml:19-52
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  20 │         name: checkout-service-container
  21 │         ports:
  22 │         - containerPort: 5050
  23 │         env:
  24 │         - name: PORT
  25 │           value: '5050'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkout-service-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_18.yaml:18-52
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  20 │         name: checkout-service-container
  21 │         ports:
  22 │         - containerPort: 5050
  23 │         env:
  24 │         - name: PORT
  25 │           value: '5050'
  26 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config648_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'recommendation-service-container' of Deployment 'recommendation-service-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config648_2.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  20 │         name: recommendation-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'recommendation-service-container' of Deployment 'recommendation-service-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config648_2.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  20 │         name: recommendation-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'recommendation-service-container' of 'deployment' 'recommendation-service-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config648_2.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  20 │         name: recommendation-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'recommendation-service-container' of Deployment 'recommendation-service-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config648_2.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  20 │         name: recommendation-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'recommendation-service-container' of Deployment 'recommendation-service-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config648_2.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  20 │         name: recommendation-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'recommendation-service-container' of Deployment 'recommendation-service-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config648_2.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  20 │         name: recommendation-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'recommendation-service-container' of Deployment 'recommendation-service-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config648_2.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  20 │         name: recommendation-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config648_2.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  20 │         name: recommendation-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "recommendation-service-container" of deployment "recommendation-service-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config648_2.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  20 │         name: recommendation-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config648_2.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  20 │         name: recommendation-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendation-service-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config648_2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: my-dep
   6 └   name: recommendation-service-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendation-service-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_2.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  20 │         name: recommendation-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendation-service-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_2.yaml:18-42
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  20 │         name: recommendation-service-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 8080
  26 └           periodSeconds: 5
  ..   
────────────────────────────────────────



config648_20.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'fontend-container' of Deployment 'fontend-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config648_20.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  20 │         name: fontend-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         env:
  24 │         - name: PORT
  25 │           value: '8080'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fontend-container' of Deployment 'fontend-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config648_20.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  20 │         name: fontend-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         env:
  24 │         - name: PORT
  25 │           value: '8080'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fontend-container' of 'deployment' 'fontend-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config648_20.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  20 │         name: fontend-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         env:
  24 │         - name: PORT
  25 │           value: '8080'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fontend-container' of Deployment 'fontend-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config648_20.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  20 │         name: fontend-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         env:
  24 │         - name: PORT
  25 │           value: '8080'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fontend-container' of Deployment 'fontend-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config648_20.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  20 │         name: fontend-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         env:
  24 │         - name: PORT
  25 │           value: '8080'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fontend-container' of Deployment 'fontend-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config648_20.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  20 │         name: fontend-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         env:
  24 │         - name: PORT
  25 │           value: '8080'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fontend-container' of Deployment 'fontend-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config648_20.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  20 │         name: fontend-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         env:
  24 │         - name: PORT
  25 │           value: '8080'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config648_20.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  20 │         name: fontend-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         env:
  24 │         - name: PORT
  25 │           value: '8080'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fontend-container" of deployment "fontend-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config648_20.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  20 │         name: fontend-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         env:
  24 │         - name: PORT
  25 │           value: '8080'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config648_20.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  20 │         name: fontend-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         env:
  24 │         - name: PORT
  25 │           value: '8080'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment fontend-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config648_20.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: fontend
   6 └   name: fontend-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container fontend-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_20.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  20 │         name: fontend-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         env:
  24 │         - name: PORT
  25 │           value: '8080'
  26 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  27 └           value: productcatalog-service-svc:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment fontend-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_20.yaml:18-48
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  20 │         name: fontend-container
  21 │         ports:
  22 │         - containerPort: 8080
  23 │         env:
  24 │         - name: PORT
  25 │           value: '8080'
  26 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config648_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'productcatalog-service-container' of Deployment 'productcatalog-service-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config648_4.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  20 │         name: productcatalog-service-container
  21 │         ports:
  22 │         - containerPort: 3550
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 3550
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'productcatalog-service-container' of Deployment 'productcatalog-service-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config648_4.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  20 │         name: productcatalog-service-container
  21 │         ports:
  22 │         - containerPort: 3550
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 3550
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'productcatalog-service-container' of 'deployment' 'productcatalog-service-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config648_4.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  20 │         name: productcatalog-service-container
  21 │         ports:
  22 │         - containerPort: 3550
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 3550
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'productcatalog-service-container' of Deployment 'productcatalog-service-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config648_4.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  20 │         name: productcatalog-service-container
  21 │         ports:
  22 │         - containerPort: 3550
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 3550
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'productcatalog-service-container' of Deployment 'productcatalog-service-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config648_4.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  20 │         name: productcatalog-service-container
  21 │         ports:
  22 │         - containerPort: 3550
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 3550
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'productcatalog-service-container' of Deployment 'productcatalog-service-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config648_4.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  20 │         name: productcatalog-service-container
  21 │         ports:
  22 │         - containerPort: 3550
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 3550
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'productcatalog-service-container' of Deployment 'productcatalog-service-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config648_4.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  20 │         name: productcatalog-service-container
  21 │         ports:
  22 │         - containerPort: 3550
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 3550
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config648_4.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  20 │         name: productcatalog-service-container
  21 │         ports:
  22 │         - containerPort: 3550
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 3550
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "productcatalog-service-container" of deployment "productcatalog-service-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config648_4.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  20 │         name: productcatalog-service-container
  21 │         ports:
  22 │         - containerPort: 3550
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 3550
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config648_4.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  20 │         name: productcatalog-service-container
  21 │         ports:
  22 │         - containerPort: 3550
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 3550
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalog-service-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config648_4.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: my-dep
   6 └   name: productcatalog-service-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalog-service-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_4.yaml:19-40
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  20 │         name: productcatalog-service-container
  21 │         ports:
  22 │         - containerPort: 3550
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 3550
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalog-service-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_4.yaml:18-40
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  20 │         name: productcatalog-service-container
  21 │         ports:
  22 │         - containerPort: 3550
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 3550
  26 └           periodSeconds: 5
  ..   
────────────────────────────────────────



config648_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment-service-container' of Deployment 'payment-service-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config648_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │         name: payment-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'payment-service-container' of Deployment 'payment-service-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config648_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │         name: payment-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'payment-service-container' of 'deployment' 'payment-service-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config648_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │         name: payment-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'payment-service-container' of Deployment 'payment-service-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config648_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │         name: payment-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'payment-service-container' of Deployment 'payment-service-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config648_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │         name: payment-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'payment-service-container' of Deployment 'payment-service-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config648_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │         name: payment-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment-service-container' of Deployment 'payment-service-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config648_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │         name: payment-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config648_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │         name: payment-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment-service-container" of deployment "payment-service-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config648_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │         name: payment-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config648_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │         name: payment-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment payment-service-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config648_6.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: my-dep
   6 └   name: payment-service-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container payment-service-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │         name: payment-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment-service-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_6.yaml:18-42
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  20 │         name: payment-service-container
  21 │         ports:
  22 │         - containerPort: 50051
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 50051
  26 └           periodSeconds: 5
  ..   
────────────────────────────────────────



config648_8.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'currency-service-container' of Deployment 'currency-service-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config648_8.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  20 │         name: currency-service-container
  21 │         ports:
  22 │         - containerPort: 7000
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7000
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'currency-service-container' of Deployment 'currency-service-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config648_8.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  20 │         name: currency-service-container
  21 │         ports:
  22 │         - containerPort: 7000
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7000
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'currency-service-container' of 'deployment' 'currency-service-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config648_8.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  20 │         name: currency-service-container
  21 │         ports:
  22 │         - containerPort: 7000
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7000
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'currency-service-container' of Deployment 'currency-service-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config648_8.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  20 │         name: currency-service-container
  21 │         ports:
  22 │         - containerPort: 7000
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7000
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'currency-service-container' of Deployment 'currency-service-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config648_8.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  20 │         name: currency-service-container
  21 │         ports:
  22 │         - containerPort: 7000
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7000
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'currency-service-container' of Deployment 'currency-service-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config648_8.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  20 │         name: currency-service-container
  21 │         ports:
  22 │         - containerPort: 7000
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7000
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'currency-service-container' of Deployment 'currency-service-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config648_8.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  20 │         name: currency-service-container
  21 │         ports:
  22 │         - containerPort: 7000
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7000
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config648_8.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  20 │         name: currency-service-container
  21 │         ports:
  22 │         - containerPort: 7000
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7000
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "currency-service-container" of deployment "currency-service-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config648_8.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  20 │         name: currency-service-container
  21 │         ports:
  22 │         - containerPort: 7000
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7000
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config648_8.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  20 │         name: currency-service-container
  21 │         ports:
  22 │         - containerPort: 7000
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7000
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currency-service-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config648_8.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: my-dep
   6 └   name: currency-service-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currency-service-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_8.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  20 │         name: currency-service-container
  21 │         ports:
  22 │         - containerPort: 7000
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7000
  26 │           periodSeconds: 5
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currency-service-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config648_8.yaml:18-42
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  20 │         name: currency-service-container
  21 │         ports:
  22 │         - containerPort: 7000
  23 │         readinessProbe:
  24 │           grpc:
  25 │             port: 7000
  26 └           periodSeconds: 5
  ..   
────────────────────────────────────────



config667.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"SECRET_KEY", "SENDGRID_API_KEY", "SQL_PORT", "WOKEEPOCH", "amqp", "redis"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'api-config' in 'default' namespace stores secrets in key(s) or value(s) '{"SECRET_KEY", "SENDGRID_API_PASS", "SQL_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config668.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'backend-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"SPACES_ACCESS"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'backend-config' in 'default' namespace stores secrets in key(s) or value(s) '{"SPACES_SECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config669.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'db-access' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config67.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ghost-conf' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"    \"from\""}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config671.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiali' in 'istio-system' namespace stores sensitive contents in key(s) or value(s) '{"  signing_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 config671.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'kiali' in 'istio-system' namespace stores secrets in key(s) or value(s) '{"login_token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 config671.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



config673.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiali' in 'istio-system' namespace stores sensitive contents in key(s) or value(s) '{"  signing_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 config673.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'kiali' in 'istio-system' namespace stores secrets in key(s) or value(s) '{"login_token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 config673.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



config675.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'service' in 'staging' namespace stores sensitive contents in key(s) or value(s) '{"mongodbUri"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 config675.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'service' in 'staging' namespace stores secrets in key(s) or value(s) '{"secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 config675.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



config680.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiali' in 'istio-system' namespace stores sensitive contents in key(s) or value(s) '{"  signing_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 config680.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'kiali' in 'istio-system' namespace stores secrets in key(s) or value(s) '{"login_token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 config680.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



config688_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"postgres-port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config69.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-ingress' of Deployment 'test-ingress' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-ingress' of 'deployment' 'test-ingress' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-ingress' of Deployment 'test-ingress' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-ingress' of Deployment 'test-ingress' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-ingress' of Deployment 'test-ingress' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-ingress" of deployment "test-ingress" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment test-ingress in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config69.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-ingress
   5 │   labels:
   6 └     app: test-ingress
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment test-ingress in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-ingress in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment test-ingress in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config69.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container test-ingress in deployment test-ingress (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config69.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: test-ingress
  19 │         image: michav1/test-ingress:0.1.3
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



config696.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'emailservice' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config696.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: emailservice
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'emailservice' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config696.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: emailservice
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'emailservice' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config696.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: emailservice
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'emailservice' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config696.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: emailservice
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'emailservice' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config696.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: emailservice
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'emailservice' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config696.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: emailservice
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'emailservice' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config696.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: emailservice
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config696.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: emailservice
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "emailservice" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config696.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: emailservice
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config696.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: emailservice
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config696.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: emailservice
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696.yaml:14-44
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: emailservice
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 └         - name: DISABLE_TRACING
  ..   
────────────────────────────────────────



config696_10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'adservice' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config696_10.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: adservice
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.3.4
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         readinessProbe:
  24 └           initialDelaySeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'adservice' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config696_10.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: adservice
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.3.4
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         readinessProbe:
  24 └           initialDelaySeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'adservice' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config696_10.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: adservice
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.3.4
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         readinessProbe:
  24 └           initialDelaySeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'adservice' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config696_10.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: adservice
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.3.4
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         readinessProbe:
  24 └           initialDelaySeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'adservice' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config696_10.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: adservice
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.3.4
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         readinessProbe:
  24 └           initialDelaySeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'adservice' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config696_10.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: adservice
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.3.4
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         readinessProbe:
  24 └           initialDelaySeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'adservice' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config696_10.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: adservice
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.3.4
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         readinessProbe:
  24 └           initialDelaySeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config696_10.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: adservice
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.3.4
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         readinessProbe:
  24 └           initialDelaySeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "adservice" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config696_10.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: adservice
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.3.4
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         readinessProbe:
  24 └           initialDelaySeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config696_10.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: adservice
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.3.4
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         readinessProbe:
  24 └           initialDelaySeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config696_10.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_10.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: adservice
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.3.4
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         readinessProbe:
  24 └           initialDelaySeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_10.yaml:15-43
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: adservice
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.3.4
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 └         readinessProbe:
  ..   
────────────────────────────────────────



config696_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cartservice' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config696_12.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: cartservice
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis:6379
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cartservice' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config696_12.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: cartservice
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis:6379
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cartservice' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config696_12.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: cartservice
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis:6379
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cartservice' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config696_12.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: cartservice
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis:6379
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cartservice' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config696_12.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: cartservice
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis:6379
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cartservice' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config696_12.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: cartservice
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis:6379
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cartservice' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config696_12.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: cartservice
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis:6379
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config696_12.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: cartservice
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis:6379
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cartservice" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config696_12.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: cartservice
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis:6379
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config696_12.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: cartservice
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis:6379
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config696_12.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_12.yaml:16-46
────────────────────────────────────────
  16 ┌       - name: cartservice
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis:6379
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_12.yaml:15-46
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: cartservice
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 └         - name: REDIS_ADDR
  ..   
────────────────────────────────────────



config696_14.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config696_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 5
  22 │           periodSeconds: 5
  23 │           tcpSocket:
  24 └             port: 6379
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config696_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 5
  22 │           periodSeconds: 5
  23 │           tcpSocket:
  24 └             port: 6379
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config696_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 5
  22 │           periodSeconds: 5
  23 │           tcpSocket:
  24 └             port: 6379
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config696_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 5
  22 │           periodSeconds: 5
  23 │           tcpSocket:
  24 └             port: 6379
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config696_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 5
  22 │           periodSeconds: 5
  23 │           tcpSocket:
  24 └             port: 6379
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config696_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 5
  22 │           periodSeconds: 5
  23 │           tcpSocket:
  24 └             port: 6379
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config696_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 5
  22 │           periodSeconds: 5
  23 │           tcpSocket:
  24 └             port: 6379
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config696_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 5
  22 │           periodSeconds: 5
  23 │           tcpSocket:
  24 └             port: 6379
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config696_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 5
  22 │           periodSeconds: 5
  23 │           tcpSocket:
  24 └             port: 6379
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config696_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 5
  22 │           periodSeconds: 5
  23 │           tcpSocket:
  24 └             port: 6379
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config696_14.yaml:4
────────────────────────────────────────
   4 [   name: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 5
  22 │           periodSeconds: 5
  23 │           tcpSocket:
  24 └             port: 6379
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_14.yaml:15-42
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 5
  22 │           periodSeconds: 5
  23 └           tcpSocket:
  ..   
────────────────────────────────────────



config696_16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'currencyservice' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config696_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: currencyservice
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'currencyservice' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config696_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: currencyservice
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'currencyservice' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config696_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: currencyservice
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'currencyservice' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config696_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: currencyservice
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'currencyservice' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config696_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: currencyservice
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'currencyservice' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config696_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: currencyservice
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'currencyservice' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config696_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: currencyservice
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config696_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: currencyservice
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "currencyservice" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config696_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: currencyservice
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config696_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: currencyservice
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config696_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: currencyservice
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_16.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: currencyservice
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 └         readinessProbe:
  ..   
────────────────────────────────────────



config696_18.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'checkoutservice' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config696_18.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: checkoutservice
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: SHIPPING_SERVICE_ADDR
  24 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'checkoutservice' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config696_18.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: checkoutservice
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: SHIPPING_SERVICE_ADDR
  24 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'checkoutservice' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config696_18.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: checkoutservice
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: SHIPPING_SERVICE_ADDR
  24 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'checkoutservice' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config696_18.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: checkoutservice
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: SHIPPING_SERVICE_ADDR
  24 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'checkoutservice' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config696_18.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: checkoutservice
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: SHIPPING_SERVICE_ADDR
  24 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'checkoutservice' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config696_18.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: checkoutservice
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: SHIPPING_SERVICE_ADDR
  24 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'checkoutservice' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config696_18.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: checkoutservice
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: SHIPPING_SERVICE_ADDR
  24 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config696_18.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: checkoutservice
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: SHIPPING_SERVICE_ADDR
  24 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "checkoutservice" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config696_18.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: checkoutservice
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: SHIPPING_SERVICE_ADDR
  24 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config696_18.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: checkoutservice
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: SHIPPING_SERVICE_ADDR
  24 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config696_18.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_18.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: checkoutservice
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: SHIPPING_SERVICE_ADDR
  24 └           value: shippingservice:50051
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_18.yaml:15-51
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: checkoutservice
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 └         - name: SHIPPING_SERVICE_ADDR
  ..   
────────────────────────────────────────



config696_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'recommendationservice' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config696_2.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: recommendationservice
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'recommendationservice' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config696_2.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: recommendationservice
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'recommendationservice' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config696_2.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: recommendationservice
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'recommendationservice' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config696_2.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: recommendationservice
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'recommendationservice' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config696_2.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: recommendationservice
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'recommendationservice' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config696_2.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: recommendationservice
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'recommendationservice' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config696_2.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: recommendationservice
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config696_2.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: recommendationservice
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "recommendationservice" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config696_2.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: recommendationservice
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config696_2.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: recommendationservice
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config696_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_2.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: recommendationservice
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_2.yaml:15-49
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: recommendationservice
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config696_20.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config696_20.yaml:16-59
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config696_20.yaml:16-59
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config696_20.yaml:16-59
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config696_20.yaml:16-59
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config696_20.yaml:16-59
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config696_20.yaml:16-59
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config696_20.yaml:16-59
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config696_20.yaml:16-59
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config696_20.yaml:16-59
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config696_20.yaml:16-59
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config696_20.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_20.yaml:16-59
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_20.yaml:15-59
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: frontend
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config696_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'productcatalogservice' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config696_4.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: productcatalogservice
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'productcatalogservice' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config696_4.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: productcatalogservice
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'productcatalogservice' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config696_4.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: productcatalogservice
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'productcatalogservice' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config696_4.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: productcatalogservice
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'productcatalogservice' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config696_4.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: productcatalogservice
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'productcatalogservice' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config696_4.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: productcatalogservice
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'productcatalogservice' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config696_4.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: productcatalogservice
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config696_4.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: productcatalogservice
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "productcatalogservice" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config696_4.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: productcatalogservice
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config696_4.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: productcatalogservice
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config696_4.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_4.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: productcatalogservice
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_4.yaml:15-41
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: productcatalogservice
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 └         livenessProbe:
  ..   
────────────────────────────────────────



config696_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'paymentservice' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config696_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'paymentservice' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config696_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'paymentservice' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config696_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'paymentservice' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config696_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'paymentservice' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config696_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'paymentservice' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config696_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'paymentservice' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config696_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config696_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "paymentservice" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config696_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config696_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config696_6.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: paymentservice
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_6.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: paymentservice
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 └         readinessProbe:
  ..   
────────────────────────────────────────



config696_8.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'shippingservice' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config696_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: shippingservice
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'shippingservice' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config696_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: shippingservice
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'shippingservice' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config696_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: shippingservice
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'shippingservice' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config696_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: shippingservice
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'shippingservice' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config696_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: shippingservice
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'shippingservice' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config696_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: shippingservice
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'shippingservice' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config696_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: shippingservice
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config696_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: shippingservice
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "shippingservice" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config696_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: shippingservice
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config696_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: shippingservice
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config696_8.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: shippingservice
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config696_8.yaml:15-40
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: shippingservice
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 └         readinessProbe:
  ..   
────────────────────────────────────────



config714.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mosquitto' of Deployment 'mosquitto' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mosquitto' of Deployment 'mosquitto' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mosquitto' of 'deployment' 'mosquitto' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mosquitto' of Deployment 'mosquitto' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mosquitto' of Deployment 'mosquitto' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mosquitto' of Deployment 'mosquitto' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mosquitto' of Deployment 'mosquitto' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mosquitto' of Deployment 'mosquitto' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mosquitto' of Deployment 'mosquitto' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mosquitto' of Deployment 'mosquitto' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mosquitto' of Deployment 'mosquitto' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mosquitto" of deployment "mosquitto" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mosquitto in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config714.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mosquitto
   5 │   labels:
   6 └     app: mosquitto
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mosquitto in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config714.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mosquitto in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config714.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mosquitto
  19 │         image: eclipse-mosquitto:1.6.12
  20 │         ports:
  21 └         - containerPort: 1883
────────────────────────────────────────



config733.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'emailservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config733.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────



config733_10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'shippingservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config733_10.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_10.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config733_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'adservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config733_12.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_12.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────



config733_14.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'cartservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config733_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_14.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────



config733_16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config733_16.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_16.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_16.yaml:14-33
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         env:
  20 │         - name: PORT
  21 │           value: '5050'
  22 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config733_18.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'frontend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config733_18.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_18.yaml:15-35
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_18.yaml:14-35
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config733_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config733_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_2.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_2.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  23 └           value: productcatalogservice:3550
────────────────────────────────────────



config733_21.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config733_21.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_21.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_21.yaml:14-24
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 │           name: redis-data
  22 └       volumes:
  ..   
────────────────────────────────────────



config733_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'paymentservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config733_4.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_4.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config733_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config733_6.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_6.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────



config733_8.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'currencyservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config733_8.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config733_8.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────



config76_10.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0005 (HIGH): Container 'speaker' of DaemonSet 'speaker' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
────────────────────────────────────────
 config76_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 config76_10.yaml:10-63
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config76_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config76_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config76_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config76_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config76_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 config76_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config76_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config76_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config76_10.yaml:49-54
────────────────────────────────────────
  49 ┌             add:
  50 │             - NET_ADMIN
  51 │             - NET_RAW
  52 │             - SYS_ADMIN
  53 │             drop:
  54 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config76_10.yaml:23-63
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config76_10.yaml:24-55
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



config76_11.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config76_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config76_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config76_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config76_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config76_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config76_11.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.8.2
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────



config76_4.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'metallb-system:controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 config76_4.yaml:8-16
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - services
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 │   - watch
  16 └   - update
────────────────────────────────────────



config771.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"database.port", "external-server.port", "internal-server.port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config791.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rate-limit-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"  - key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 config791.yaml:15
────────────────────────────────────────
  15 [ ---
────────────────────────────────────────



config838.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'dbconfig' in 'default' namespace stores secrets in key(s) or value(s) '{"postgres.secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config846.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"mykey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config846_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config846_1.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config846_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 └       name: config-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config846_1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/config
  11 │       name: config-volume
  12 │   volumes:
  13 │   - name: config-volume
  14 │     configMap:
  15 └       name: my-config
────────────────────────────────────────



config853.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config853.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config853.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config853.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config853.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config853.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config853.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config853.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config853.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config853.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config853.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config853.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 └         livenessProbe:
  ..   
────────────────────────────────────────



config853_10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config853_10.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config853_10.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config853_10.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config853_10.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config853_10.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config853_10.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config853_10.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config853_10.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config853_10.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config853_10.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config853_10.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_10.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_10.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 └         livenessProbe:
  ..   
────────────────────────────────────────



config853_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config853_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config853_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config853_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config853_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config853_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config853_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config853_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config853_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config853_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config853_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config853_12.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_12.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_12.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 └         livenessProbe:
  ..   
────────────────────────────────────────



config853_14.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config853_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config853_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config853_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config853_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config853_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config853_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config853_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config853_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config853_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config853_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config853_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_14.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 └           value: redis-cart:6379
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_14.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 └         - name: REDIS_ADDR
  ..   
────────────────────────────────────────



config853_16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config853_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config853_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config853_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config853_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config853_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config853_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config853_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config853_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config853_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config853_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config853_16.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_16.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 │             port: 6379
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_16.yaml:15-42
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: redis
  17 │         image: redis:alpine
  18 │         ports:
  19 │         - containerPort: 6379
  20 │         livenessProbe:
  21 │           initialDelaySeconds: 5
  22 │           tcpSocket:
  23 └             port: 6379
  ..   
────────────────────────────────────────



config853_18.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config853_18.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config853_18.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config853_18.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config853_18.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config853_18.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config853_18.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config853_18.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config853_18.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config853_18.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config853_18.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config853_18.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_18.yaml:16-49
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_18.yaml:15-49
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         env:
  21 │         - name: PORT
  22 │           value: '5050'
  23 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config853_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config853_2.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config853_2.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config853_2.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config853_2.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config853_2.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config853_2.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config853_2.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config853_2.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config853_2.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config853_2.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config853_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_2.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_2.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config853_20.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config853_20.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_20.yaml:16-48
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  24 └           value: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_20.yaml:15-48
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config853_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config853_4.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config853_4.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config853_4.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config853_4.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config853_4.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config853_4.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config853_4.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config853_4.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config853_4.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config853_4.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config853_4.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_4.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         livenessProbe:
  24 └           grpc:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_4.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 └         livenessProbe:
  ..   
────────────────────────────────────────



config853_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config853_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config853_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config853_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config853_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config853_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config853_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config853_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config853_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config853_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config853_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config853_6.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_6.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_6.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────



config853_8.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config853_8.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config853_8.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config853_8.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config853_8.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config853_8.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config853_8.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config853_8.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config853_8.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config853_8.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config853_8.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config853_8.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_8.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config853_8.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  18 │         ports:
  19 │         - containerPort: 7000
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7000'
  23 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────



config91.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app1-container' of Deployment 'app1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app1-container' of Deployment 'app1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app1-container' of 'deployment' 'app1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app1-container' of Deployment 'app1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app1-container' of Deployment 'app1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app1-container' of Deployment 'app1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app1-container' of Deployment 'app1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app1-container' of Deployment 'app1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app1-container' of Deployment 'app1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app1-container' of Deployment 'app1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app1-container' of Deployment 'app1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app1-container' of Deployment 'app1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app1-container" of deployment "app1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config91.yaml:4
────────────────────────────────────────
   4 [   name: app1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config91.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app1-container in deployment app1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config91.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app1-container
  17 │         image: mukomelise/tetrisgame
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────



config92.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app2-container' of Deployment 'app2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app2-container' of Deployment 'app2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app2-container' of 'deployment' 'app2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app2-container' of Deployment 'app2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app2-container' of Deployment 'app2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app2-container' of Deployment 'app2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app2-container' of Deployment 'app2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app2-container' of Deployment 'app2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app2-container' of Deployment 'app2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app2-container' of Deployment 'app2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app2-container' of Deployment 'app2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app2-container' of Deployment 'app2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app2-container" of deployment "app2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config92.yaml:4
────────────────────────────────────────
   4 [   name: app2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment app2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config92.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app2-container in deployment app2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config92.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app2-container
  17 │         image: pratikpatharkar/tic-tac-toe
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



config93.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app3-container' of Deployment 'app3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app3-container' of Deployment 'app3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app3-container' of 'deployment' 'app3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app3-container' of Deployment 'app3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app3-container' of Deployment 'app3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app3-container' of Deployment 'app3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app3-container' of Deployment 'app3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app3-container' of Deployment 'app3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app3-container' of Deployment 'app3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app3-container' of Deployment 'app3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app3-container' of Deployment 'app3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app3-container' of Deployment 'app3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app3-container" of deployment "app3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config93.yaml:4
────────────────────────────────────────
   4 [   name: app3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config93.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app3-container in deployment app3 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config93.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: app3-container
  17 │         image: aveshatest/pacman
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────



config945.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"db_port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config98_2.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'role-cicd' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 config98_2.yaml:7-20
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - apps
   9 │   - ''
  10 │   resources:
  11 │   - deployment
  12 │   - pods
  13 │   - replicasets
  14 │   verbs:
  15 └   - get
  ..   
────────────────────────────────────────



config98_6.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test' of Pod 'test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test' of Pod 'test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test' of 'pod' 'test' in 'cicd' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test' of Pod 'test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test' of Pod 'test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test' of Pod 'test' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test' of Pod 'test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test' of Pod 'test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test' of Pod 'test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test' of Pod 'test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test' of Pod 'test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test' of Pod 'test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test" of pod "test" in "cicd" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod test in cicd namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test in cicd namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config98_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod test in cicd namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config98_6.yaml:9-13
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: test
  11 │     image: nginx:latest
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────



configmap-1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-1.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-1.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────



configmap-11.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-11.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-11.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-11.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────



configmap-111.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-111.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-111.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-111.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────



configmap-112.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-112.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-112.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-112.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────



configmap-12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-12.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-12.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-12.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────



configmap-13.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-13.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-13.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-13.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────



configmap-15.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-15.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-15.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-15.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────



configmap-16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-16.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-16.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-16.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────



configmap-17.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-17.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-17.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-17.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────



configmap-18.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'new-map' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"IRONMAN", "SUPERMAN"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-19.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-19.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-19.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-19.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └        name: configmap-1
────────────────────────────────────────



configmap-2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-2.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-2.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────



configmap-21.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-21.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-21.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-21.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────



configmap-210.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-210.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-210.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-210.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────



configmap-211.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-211.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-211.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-211.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────



configmap-22.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-22.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-22.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-22.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────



configmap-23.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-23.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-23.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-23.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────



configmap-25.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-25.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-25.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-25.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────



configmap-26.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-26.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-26.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-26.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────



configmap-27.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-27.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-27.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-27.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────



configmap-28.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-28.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-28.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-28.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: COLOR
  11 │       valueFrom:   
  12 │         configMapKeyRef:   
  13 │           name: configmap-2
  14 └           key: color
────────────────────────────────────────



configmap-3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-3.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-3.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 │         mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config
  14 │     configMap:
  15 └       name: configmap-3
────────────────────────────────────────



configmap-31.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-31.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-31.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-31.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 │         mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config
  14 │     configMap:
  15 └       name: configmap-3
────────────────────────────────────────



configmap-32.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-32.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-32.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-32.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 │         mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config
  14 │     configMap:
  15 └       name: configmap-3
────────────────────────────────────────



configmap-33.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-33.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-33.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-33.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 │         mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config
  14 │     configMap:
  15 └       name: configmap-3
────────────────────────────────────────



configmap-34.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-34.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-34.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-34.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 │         mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config
  14 │     configMap:
  15 └       name: configmap-3
────────────────────────────────────────



configmap-35.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-35.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-35.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-35.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 │         mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config
  14 │     configMap:
  15 └       name: configmap-3
────────────────────────────────────────



configmap-36.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-36.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-36.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-36.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 │         mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config
  14 │     configMap:
  15 └       name: configmap-3
────────────────────────────────────────



configmap-37.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-37.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-37.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-37.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 │         mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config
  14 │     configMap:
  15 └       name: configmap-3
────────────────────────────────────────



configmap-38.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-38.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-38.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-38.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 │         mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config
  14 │     configMap:
  15 └       name: configmap-3
────────────────────────────────────────



configmap-39.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-39.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-39.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-39.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │       - name: config
  11 │         mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config
  14 │     configMap:
  15 └       name: configmap-3
────────────────────────────────────────



configmap-api-gateway.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-gateway-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"API_RATELIMIT_DURATION", "EXPRESS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-api-gateway1.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-gateway-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"API_RATELIMIT_DURATION", "EXPRESS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-api.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MERCADO_PAGO_BEARER_TOKEN", "MERCADO_PAGO_EXTERNAL_POS_ID", "MERCADO_PAGO_USER_ID"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'api-config' in 'default' namespace stores secrets in key(s) or value(s) '{"MERCADO_PAGO_BEARER_TOKEN"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-api1.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MERCADO_PAGO_BEARER_TOKEN", "MERCADO_PAGO_EXTERNAL_POS_ID", "MERCADO_PAGO_USER_ID"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'api-config' in 'default' namespace stores secrets in key(s) or value(s) '{"MERCADO_PAGO_BEARER_TOKEN"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-api2.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-api' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MySqlSettings__Port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'configmap-api' in 'default' namespace stores secrets in key(s) or value(s) '{"Server"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-app.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-configmap-app' in 'name1' namespace stores sensitive contents in key(s) or value(s) '{"port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'my-configmap-app' in 'name1' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-app1.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-configmap-app' in 'name2' namespace stores sensitive contents in key(s) or value(s) '{"port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'my-configmap-app' in 'name2' namespace stores secrets in key(s) or value(s) '{"password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-argocd-cm-patch-example.yaml (kubernetes)
===================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'argocd-cm' in 'default' namespace stores secrets in key(s) or value(s) '{"clientSecret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-as-args.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mycfgmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"bindPort"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-as-args_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'mypod-with-cfgmap-arg' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-arg' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'mypod-with-cfgmap-arg' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-arg' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'mypod-with-cfgmap-arg' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'mypod-with-cfgmap-arg' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'mypod-with-cfgmap-arg' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-arg' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-arg' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-arg' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-arg' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-arg' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "mypod-with-cfgmap-arg" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod-with-cfgmap-arg in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-as-args_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mypod-with-cfgmap-arg
   5 │   labels:
   6 └     app: mypod-with-cfgmap-arg
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod-with-cfgmap-arg in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-as-args_1.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 │     - /bin/sh
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod-with-cfgmap-arg in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-as-args_1.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: busybox
  10 │     name: main
  11 │     envFrom:
  12 │     - prefix: CFG_
  13 │       configMapRef:
  14 │         name: mycfgmap
  15 │     command:
  16 └     - /bin/sh
  ..   
────────────────────────────────────────



configmap-as-env.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mycfgmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"bindPort"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-as-env_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-as-env_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mypod
   5 │   labels:
   6 └     app: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-as-env_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-as-env_1.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:latest
  10 │     name: main
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: mycfgmap
  14 └       prefix: CFG_
────────────────────────────────────────



configmap-as-environment-variables.yaml (kubernetes)
====================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mycontainer' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mycontainer' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mycontainer' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mycontainer" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-as-environment-variables.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-as-environment-variables.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-as-environment-variables.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: mycontainer
   8 │     image: myimage
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: my-configmap
────────────────────────────────────────



configmap-as-volume.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mycontainer' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mycontainer' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mycontainer' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mycontainer" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-as-volume.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-as-volume.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-as-volume.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 │       mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config-volume
  14 │     configMap:
  15 └       name: my-configmap
────────────────────────────────────────



configmap-as-volume1.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mycfgmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"bindPort"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-as-volume1_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'mypod-with-cfgmap-vol' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-vol' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'mypod-with-cfgmap-vol' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-vol' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'mypod-with-cfgmap-vol' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'mypod-with-cfgmap-vol' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'mypod-with-cfgmap-vol' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-vol' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-vol' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-vol' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-vol' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'mypod-with-cfgmap-vol' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "mypod-with-cfgmap-vol" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod-with-cfgmap-vol in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-as-volume1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mypod-with-cfgmap-vol
   5 │   labels:
   6 └     app: mypod-with-cfgmap-vol
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod-with-cfgmap-vol in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-as-volume1_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod-with-cfgmap-vol in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-as-volume1_1.yaml:8-18
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx
  10 │     name: main
  11 │     volumeMounts:
  12 │     - name: mycfg
  13 │       mountPath: /etc/mycfg
  14 │       readOnly: true
  15 │   volumes:
  16 └   - name: mycfg
  ..   
────────────────────────────────────────



configmap-auth.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-config' in 'mini-ecommerce' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-bdd.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'my-configmap-bdd' in 'name1' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-billing-app.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'billing-app-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"EXPRESS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-billing-app1.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'billing-app-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"EXPRESS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-certs.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ctl-certs-config' in 'relp-rsyslog' namespace stores sensitive contents in key(s) or value(s) '{"client-key.pem"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-certs1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'certs-config' in 'relp-rsyslog' namespace stores sensitive contents in key(s) or value(s) '{"server-key.pem"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-datasource.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'grafana-datasource' in '${NAMESPACE}' namespace stores secrets in key(s) or value(s) '{"    token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-db.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'cm-db' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_PASSOWORD", "MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-db1.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'configmap-db' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-definition.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'myapp-configmap' in 'dev' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "DB_USERNAME", "PORT", "VITE_API_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'myapp-configmap' in 'dev' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-demo1.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'flask-config-map' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"TOKEN"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'flask-config-map' in 'default' namespace stores secrets in key(s) or value(s) '{"TOKEN"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-demo1_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-flask' of 'replicaset' 'simple-flask' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-flask" of replicaset "simple-flask" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset simple-flask in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-demo1_1.yaml:4
────────────────────────────────────────
   4 [   name: simple-flask
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container simple-flask in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset simple-flask in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-demo1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-flask in replicaset simple-flask (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap-demo1_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: flask-config-map
────────────────────────────────────────



configmap-demo_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'configmap-demo' of Pod 'configmap-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'configmap-demo' of Pod 'configmap-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'configmap-demo' of 'pod' 'configmap-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'configmap-demo' of Pod 'configmap-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'configmap-demo' of Pod 'configmap-demo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'configmap-demo' of Pod 'configmap-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'configmap-demo' of Pod 'configmap-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'configmap-demo' of Pod 'configmap-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'configmap-demo' of Pod 'configmap-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'configmap-demo' of Pod 'configmap-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "configmap-demo" of pod "configmap-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-demo_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: configmap-demo
   5 │   labels:
   6 └     name: configmap-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-demo_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 │     - sh
  17 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-demo_1.yaml:8-22
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: configmap-demo
  10 │     image: busybox
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     command:
  16 └     - sh
  ..   
────────────────────────────────────────



configmap-develop.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'devops-app' in 'devops-develop' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT", "PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap-develop.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap-env-var_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-env-var_1.yaml:4
────────────────────────────────────────
   4 [   name: test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-env-var_1.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-env-var_1.yaml:6-14
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - env
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: test-config
────────────────────────────────────────



configmap-env12.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'javaserver-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'javaserver-env' in 'default' namespace stores secrets in key(s) or value(s) '{"PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-env29.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'goserver-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"NAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-env38.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'phpserve-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LASTNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-env48.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'harbor-jobservice-env' in 'harbor' namespace stores sensitive contents in key(s) or value(s) '{"REGISTRY_CREDENTIAL_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'harbor-jobservice-env' in 'harbor' namespace stores secrets in key(s) or value(s) '{"TOKEN_SERVICE_URL"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-env5.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'javaserver-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'javaserver-env' in 'default' namespace stores secrets in key(s) or value(s) '{"PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-example.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-1' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"redisPort"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-example2.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-1' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"redisPort"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-example2_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-cmd-line' of 'pod' 'configmap-example-cmd-line' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-cmd-line" of pod "configmap-example-cmd-line" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-example-cmd-line in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-example2_1.yaml:4
────────────────────────────────────────
   4 [   name: configmap-example-cmd-line
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-example-cmd-line in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example2_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-example-cmd-line in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example2_1.yaml:6-24
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 └     env:
  ..   
────────────────────────────────────────



configmap-example2_2.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-2' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"REDIS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-example2_3.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-env' of 'pod' 'configmap-example-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-env' of Pod 'configmap-example-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-env" of pod "configmap-example-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-example-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-example2_3.yaml:4
────────────────────────────────────────
   4 [   name: configmap-example-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-example-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example2_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-example-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example2_3.yaml:6-18
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 └     args:
  ..   
────────────────────────────────────────



configmap-example2_4.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'configmap-example-volume' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'configmap-example-volume' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "configmap-example-volume" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-example-volume in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-example2_4.yaml:4
────────────────────────────────────────
   4 [   name: configmap-example-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-example-volume in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example2_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-example-volume in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example2_4.yaml:6-23
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 └     args:
  ..   
────────────────────────────────────────



configmap-example3.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-1' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"redisPort"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-example3_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-cmd-line' of 'pod' 'configmap-example-cmd-line' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-cmd-line" of pod "configmap-example-cmd-line" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-example-cmd-line in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-example3_1.yaml:4
────────────────────────────────────────
   4 [   name: configmap-example-cmd-line
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-example-cmd-line in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example3_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-example-cmd-line in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example3_1.yaml:6-24
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 └     env:
  ..   
────────────────────────────────────────



configmap-example3_2.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-2' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"REDIS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-example3_3.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-env' of 'pod' 'configmap-example-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-env' of Pod 'configmap-example-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-env" of pod "configmap-example-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-example-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-example3_3.yaml:4
────────────────────────────────────────
   4 [   name: configmap-example-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-example-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example3_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-example-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example3_3.yaml:6-18
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 └     args:
  ..   
────────────────────────────────────────



configmap-example3_4.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'configmap-example-volume' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'configmap-example-volume' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "configmap-example-volume" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-example-volume in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-example3_4.yaml:4
────────────────────────────────────────
   4 [   name: configmap-example-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-example-volume in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example3_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-example-volume in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example3_4.yaml:6-23
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 └     args:
  ..   
────────────────────────────────────────



configmap-example_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-cmd-line' of 'pod' 'configmap-example-cmd-line' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-cmd-line' of Pod 'configmap-example-cmd-line' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-cmd-line" of pod "configmap-example-cmd-line" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-example-cmd-line in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-example_1.yaml:4
────────────────────────────────────────
   4 [   name: configmap-example-cmd-line
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-example-cmd-line in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example_1.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 │     env:
  15 │     - name: REDIS_HOST
  16 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-example-cmd-line in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example_1.yaml:6-24
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: busybox-cmd-line
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - 'echo Redis Host:  $(REDIS_HOST)  Redis Port:  $(REDIS_PORT)'
  14 └     env:
  ..   
────────────────────────────────────────



configmap-example_2.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-2' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"REDIS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-example_3.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-env' of 'pod' 'configmap-example-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-env' of Pod 'configmap-example-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-env' of Pod 'configmap-example-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-env" of pod "configmap-example-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-example-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-example_3.yaml:4
────────────────────────────────────────
   4 [   name: configmap-example-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-example-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example_3.yaml:8-18
────────────────────────────────────────
   8 ┌   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-example-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example_3.yaml:6-18
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: busybox-env
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 └     args:
  ..   
────────────────────────────────────────



configmap-example_4.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'configmap-example-volume' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'configmap-example-volume' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'configmap-example-volume' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "configmap-example-volume" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-example-volume in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-example_4.yaml:4
────────────────────────────────────────
   4 [   name: configmap-example-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-example-volume in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example_4.yaml:8-19
────────────────────────────────────────
   8 ┌   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 │     args:
  15 │     - while true; do sleep 30; done;
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-example-volume in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-example_4.yaml:6-23
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: test-container
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - --
  14 └     args:
  ..   
────────────────────────────────────────



configmap-file.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"spring.datasource.username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'app-config' in 'default' namespace stores secrets in key(s) or value(s) '{"spring.datasource.password "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-file1.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"spring.datasource.username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'app-config' in 'default' namespace stores secrets in key(s) or value(s) '{"spring.datasource.password "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-file2.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"spring.datasource.username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'app-config' in 'default' namespace stores secrets in key(s) or value(s) '{"spring.datasource.password "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-file3.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"spring.datasource.username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'app-config' in 'default' namespace stores secrets in key(s) or value(s) '{"spring.datasource.password "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-file7_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-file7_1.yaml:4
────────────────────────────────────────
   4 [   name: test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-file7_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 │     - name: config
  15 │       mountPath: /datadir
  16 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-file7_1.yaml:6-20
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: busybox
   9 │     image: k8s.gcr.io/busybox
  10 │     command:
  11 │     - sleep
  12 │     - '3600'
  13 │     volumeMounts:
  14 └     - name: config
  ..   
────────────────────────────────────────



configmap-global-variables.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nginx-config' in 'nginx-ingress' namespace stores sensitive contents in key(s) or value(s) '{"variables-hash-bucket-size"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-inventory-app.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'inventory-app-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"EXPRESS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-inventory-app1.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'inventory-app-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"EXPRESS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-json1_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp-container' of Pod 'myapp-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp-container' of 'pod' 'myapp-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp-container' of Pod 'myapp-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myapp-container' of Pod 'myapp-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp-container' of Pod 'myapp-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp-container" of pod "myapp-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-json1_1.yaml:4
────────────────────────────────────────
   4 [   name: myapp-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-json1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-json1_1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: myapp-container
   8 │     image: myapp
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 │       mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config-volume
  14 │     configMap:
  15 └       name: app-config
────────────────────────────────────────



configmap-key-as-env.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mycfgmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"bindPort"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-key-as-env_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-key-as-env_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mypod
   5 │   labels:
   6 └     app: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-key-as-env_1.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-key-as-env_1.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:latest
  10 │     name: main
  11 │     env:
  12 │     - name: BIND_PORT
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           name: mycfgmap
  16 └           key: bindPort
────────────────────────────────────────



configmap-master.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'devops-app' in 'devops-master' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT", "PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap-master.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap-mysql1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'configmap-mysql' in 'wordpress' namespace stores secrets in key(s) or value(s) '{"MYSQL_PASSWORD", "MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-no-validation-keys.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nginx-config' in 'nginx-ingress' namespace stores sensitive contents in key(s) or value(s) '{"client-max-body-size"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-orders.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'orders-config' in 'mini-ecommerce' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-pod-definition.yaml (kubernetes)
==========================================
Tests: 131 (SUCCESSES: 98, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox-controller' of Pod 'webapp-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx-controller' of Pod 'webapp-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-controller' of 'pod' 'webapp-pod' in 'dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-controller' of 'pod' 'webapp-pod' in 'dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-controller' of Pod 'webapp-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-controller' of Pod 'webapp-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-controller' of Pod 'webapp-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-controller' of Pod 'webapp-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-controller' of Pod 'webapp-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-controller' of Pod 'webapp-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-controller" of pod "webapp-pod" in "dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-controller" of pod "webapp-pod" in "dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-pod in dev namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod-definition.yaml:16-23
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             configMapKeyRef:
  22 │                name: app-config
  23 └                key: APP_COLOR
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-pod in dev namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp-pod in dev namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod-definition.yaml:10-27
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - configMapRef:
  15 │           name: app-config
  16 │   - name: busybox-controller
  17 │     image: busybox
  18 └     env:
  ..   
────────────────────────────────────────


