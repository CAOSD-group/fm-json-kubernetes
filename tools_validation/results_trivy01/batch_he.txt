
Report Summary

┌─────────────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                           Target                            │    Type    │ Misconfigurations │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Prometheus-deployment53.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ product_deployment.yaml                                     │ kubernetes │        30         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ product_management.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ product_management_1.yaml                                   │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ product_management_2.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ product_management_3.yaml                                   │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ product_management_4.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ product_management_5.yaml                                   │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ product_postgresql.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ product_postgresql_1.yaml                                   │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ product_postgresql_2.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ product_service.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-deploy1.yaml                                     │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-deploy1_1.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-deploy1_2.yaml                                   │ kubernetes │        13         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-deploy1_3.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-deploy1_4.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-deploy1_5.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-deploy_1.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-deploy_2.yaml                                    │ kubernetes │        13         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-deploy_3.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-deploy_4.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-deploy_5.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-deployment2.yaml                                 │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-gateway_1.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-ingress.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-namespace.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-namespace1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-service.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-svc-blue.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-svc-blue1.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-svc-green.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production-svc-green1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production11.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ production16.yaml                                           │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productivity.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage-nodeport.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage-nodeport1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage-nodeport2.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage-nodeport3.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage-nodeport4.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage-nodeport5.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage-svc.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage-v2-canary.yaml                                  │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage-v2-canary1.yaml                                 │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage-v2.yaml                                         │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage-v21.yaml                                        │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage.yaml                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage1.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage1_1.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage1_2.yaml                                         │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage2.yaml                                           │ kubernetes │        50         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage4.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage4_1.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage4_2.yaml                                         │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage_1.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productpage_2.yaml                                          │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api-cluster-ip-service.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api-deployment.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api-deployment1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api-deployment1_1.yaml                             │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api-service.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api-service1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api-service2.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api-service3.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api-service4.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api_1.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api_2.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-api_3.yaml                                         │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-db-service.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-db-service1.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-db-service2.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-db-service3.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-db-service4.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-db.yaml                                            │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-db1.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-db1_1.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-db1_2.yaml                                         │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-db3.yaml                                           │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-depl.yaml                                          │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-depl1.yaml                                         │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-depl1_1.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-depl2.yaml                                         │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-depl2_1.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-depl_1.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-deployment.yaml                                    │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-deployment1.yaml                                   │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-deployment2.yaml                                   │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-service-autoscaler.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-service.yaml                                       │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-service1.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-service2.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-service3.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products-service4.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products1.yaml                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products1_1.yaml                                            │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products2.yaml                                              │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products2_1.yaml                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products3.yaml                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products3_1.yaml                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products3_2.yaml                                            │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products3_3.yaml                                            │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ products_service.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productservice-deployment.yaml                              │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ productservice-deployment1.yaml                             │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ produk-service.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ produtos.yaml                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ produtos_1.yaml                                             │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ profile_deployment.yaml                                     │ kubernetes │         8         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ profile_deployment1.yaml                                    │ kubernetes │         8         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ profile_service.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ profile_service1.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ profiler.yaml                                               │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ profileservice-deployment.yaml                              │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ profileservice-deployment_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ program-secret.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing26.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing51.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing55.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing81.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing98.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing_addingMoreReplicas.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing_addingMoreReplicas1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing_aggregatedStatus.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing_aggregatedStatus1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing_aggregatedStatus2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing_aggregatedStatus3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing_cluster.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing_cluster1.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing_cluster2.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing_cluster3.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing_waitingUntilAvailable.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ progressing_waitingUntilAvailable1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project-darwin-manifest-ingress-homepage.yaml               │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project-darwin-manifest-ingress-homepage_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project-darwin-manifest-ingress-homepage_2.yaml             │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project-darwin-manifest-ingress-homepage_3.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project-darwin-manifest-ingress-homepage_4.yaml             │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project-darwin-manifest-ingress-homepage_5.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project-darwin-manifest-ingress-homepage_6.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project-earthflower.yaml                                    │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project.yaml.yaml                                           │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project.yaml_1.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project38.yaml                                              │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project38_1.yaml                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project38_2.yaml                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project_manager_deployment.yaml                             │ kubernetes │         8         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project_manager_deployment1.yaml                            │ kubernetes │         8         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project_manager_service.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project_manager_service1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ project_variables.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projected-volume.yaml                                       │ kubernetes │        50         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projected-volume1.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projected-volume1_1.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projected.yaml                                              │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projectmanager.yaml                                         │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projectmanager1.yaml                                        │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projectmanager1_1.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projectmanager_1.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projectmanagernfs.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projectmanagernfs1.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projectmanagernfs1_1.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projectmanagernfs_1.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projectzomboid_editor_role.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projectzomboid_viewer_role.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ projet.yaml                                                 │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-data-persistentvolumeclaim.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-data-persistentvolumeclaim1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-data-persistentvolumeclaim2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-data-persistentvolumeclaim3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-data-persistentvolumeclaim4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-data-persistentvolumeclaim5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-data-pv.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-deployment.yaml                                        │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-graf-sample-go-app.yaml                                │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-graf-sample-go-app_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-ingress.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-pod-monitors.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-rbac.yaml                                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-rbac_1.yaml                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-rbac_2.yaml                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-statsd-sink.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-statsd-sink_1.yaml                                     │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-statsd-sink_2.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prom-svc.yaml                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prome-cm.yaml                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prome-rbac.yaml                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prome-rbac_1.yaml                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prome-redis-exporter_1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prome-svc.yaml                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prome-volume.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prome-volume_1.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-apiService.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-apiService1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-apiService2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-apiService3.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-apiService4.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-apiService5.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRole.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRole1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRole2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRole3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRole4.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRole5.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleAggregatedMetricsReader.yaml  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleAggregatedMetricsReader1.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleAggregatedMetricsReader2.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleAggregatedMetricsReader3.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleAggregatedMetricsReader4.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleAggregatedMetricsReader5.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleBinding.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleBinding1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleBinding2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleBinding3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleBinding4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleBinding5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleBindingDelegator.yaml         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleBindingDelegator1.yaml        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleBindingDelegator2.yaml        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleBindingDelegator3.yaml        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleBindingDelegator4.yaml        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleBindingDelegator5.yaml        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleServerResources.yaml          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleServerResources1.yaml         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleServerResources2.yaml         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleServerResources3.yaml         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleServerResources4.yaml         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-clusterRoleServerResources5.yaml         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-configMap.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-configMap1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-configMap2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-configMap3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-configMap4.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-configMap5.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-deployment.yaml                          │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-deployment1.yaml                         │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-deployment2.yaml                         │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-deployment3.yaml                         │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-deployment4.yaml                         │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-deployment5.yaml                         │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-roleBindingAuthReader.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-roleBindingAuthReader1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-roleBindingAuthReader2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-roleBindingAuthReader3.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-roleBindingAuthReader4.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-roleBindingAuthReader5.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-service.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-service1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-service2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-service3.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-service4.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-service5.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-serviceAccount.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-serviceAccount1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-serviceAccount2.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-serviceAccount3.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-serviceAccount4.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-adapter-serviceAccount5.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-additional.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-additional1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-additional2.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-alertmanager-volume.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-alertmanager-volume1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-alertmanager-volume1_1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-alertmanager-volume_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-base.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-base_1.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-base_2.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-bundle_15.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-bundle_16.yaml                                   │ kubernetes │         7         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-bundle_17.yaml                                   │ kubernetes │         8         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-bundle_18.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-bundle_19.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-claim0-persistentvolumeclaim.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-claim0-persistentvolumeclaim1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-claim0-persistentvolumeclaim2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-claim0-persistentvolumeclaim3.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-claim0-persistentvolumeclaim4.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-claim0-persistentvolumeclaim5.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-cluster-role-binding.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-cluster-role.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-cluster-role1.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-cluster-role1_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-cluster-roles.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-cluster-roles_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole10.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole11.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole12.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole13.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole14.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole15.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole16.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole18.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole20.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole21.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole22.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole23.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole24.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole4.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole5.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole6.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole7.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole8.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRole9.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding10.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding11.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding12.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding13.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding14.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding15.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding16.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding18.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding20.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding21.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding22.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding23.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding24.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding3.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding4.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding5.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding6.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding7.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding8.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterRoleBinding9.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterrole17.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterrole19.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterrolebinding17.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-clusterrolebinding19.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-cm.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-cm1.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config-kube.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config-kube1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config-kube2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config-kube3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config-map1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config1.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config10.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config11.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config12.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config13.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config15.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config16.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config17.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config18.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config20.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config21.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config22.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config24.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config25.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config26.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config28.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config3.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config4.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config6.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config7.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config8.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-config9.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configMap12.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap10.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap11.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap13.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap15.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap16.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap17.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap18.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap22.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap23.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap3.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap6.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap7.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap8.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-configmap9.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-cr-svc.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-cr.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-cr2.yaml                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crb.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac10.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac10_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac11.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac11_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac12.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac12_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac13.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac13_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac14.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac14_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac15.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac15_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac16.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac16_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac17.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac17_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac1_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac2.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac2_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac3.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac3_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac4.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac4_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac5.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac5_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac6.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac6_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac7.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac7_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac8.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac8_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac9.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac9_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-crds-rbac_1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-daemonset.yaml                                   │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-daemonset1.yaml                                  │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-data-persistentvolumeclaim.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-depl1.yaml                                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-depl1_1.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-depl2.yaml                                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deploy.yaml                                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deploy2.yaml                                     │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment.yaml                                  │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment1.yaml                                 │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment10.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment11.yaml                                │ kubernetes │        35         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment12.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment13.yaml                                │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment14.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment15.yaml                                │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment16.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment17.yaml                                │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment18.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment18_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment18_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment18_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment18_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment18_6.yaml                              │ kubernetes │        24         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment19.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment19_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment19_2.yaml                              │ kubernetes │        11         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment2.yaml                                 │ kubernetes │        35         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment20.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment21.yaml                                │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment22.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment23.yaml                                │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment24.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment25.yaml                                │ kubernetes │        35         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment26.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment27.yaml                                │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment28.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment29.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment3.yaml                                 │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment30.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment30_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment30_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment31.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment32.yaml                                │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment33.yaml                                │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment34.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment34_1.yaml                              │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment34_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment35.yaml                                │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment36.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment37.yaml                                │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment38.yaml                                │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment39.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment39_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment4.yaml                                 │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment40.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment40_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment41.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment42.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment43.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment44.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment46.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment47.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment48.yaml                                │ kubernetes │        36         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment49.yaml                                │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment5.yaml                                 │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment50.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment50_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment50_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment50_3.yaml                              │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment51.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment52.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment54.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment55.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment56.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment57.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment58.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment59.yaml                                │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment6.yaml                                 │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment60.yaml                                │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment61.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment63.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment63_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment63_2.yaml                              │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment63_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment64.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment64_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment64_2.yaml                              │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment64_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment65.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment67.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment68.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment7.yaml                                 │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment70.yaml                                │ kubernetes │        32         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment70_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment71.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment73.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment74.yaml                                │ kubernetes │        13         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment75.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment76.yaml                                │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment76_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment8.yaml                                 │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-deployment9.yaml                                 │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-example1_1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-exporter-service.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-exporter.yaml                                    │ kubernetes │        21         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-goosefs.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress1.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress10.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress11_1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress12.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress13.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress14.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress16_1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress17.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress18.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress18_1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress19.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress1_1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress2.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress20.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress20_1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress21_1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress22.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress2_1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress3.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress3_2.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress4.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress4_1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress5.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress5_1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress6.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress7.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress8_1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress9.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ingress_2.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-jindofs.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-k8s-full-crb.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-k8s-role.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-k8s-role1.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-lb.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-loadbalancer.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-monitoring-ns.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-monitoring-rbac.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-monitoring-rbac_2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-monitoring-serviceaccount.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-monitoring-serviceaccount_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-namespace.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-networkPolicy.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-networkPolicy1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-networkPolicy2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-networkPolicy3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-networkPolicy4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-networkPolicy5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-networkPolicy6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-networkPolicy7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-networkPolicy8.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-networkPolicy9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-node-exporter.yaml                               │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-node-exporter_1.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-nodeport.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-nodeport1.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-ns.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-clusterRole.yaml                        │ kubernetes │         7         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-clusterRole1.yaml                       │ kubernetes │         7         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-clusterRole2.yaml                       │ kubernetes │         7         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-clusterRole3.yaml                       │ kubernetes │         7         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-clusterRole4.yaml                       │ kubernetes │         7         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-clusterRole5.yaml                       │ kubernetes │         7         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-clusterRoleBinding.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-clusterRoleBinding1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-clusterRoleBinding2.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-clusterRoleBinding3.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-clusterRoleBinding4.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-clusterRoleBinding5.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-deployment.yaml                         │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-deployment2.yaml                        │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-deployment4.yaml                        │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-deployment5.yaml                        │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-deployment6.yaml                        │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-deployment8.yaml                        │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-service.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-service1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-service2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-service3.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-service4.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-service5.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-serviceAccount.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-serviceAccount1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-serviceAccount2.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-serviceAccount3.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-serviceAccount4.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator-serviceAccount5.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator11.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator11_3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator16_2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator2.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator2_3.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator7.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-operator7_3.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget10.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget12.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget13.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget15.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget16.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget17.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget19.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget20.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget4.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget5.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget6.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget7.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-podDisruptionBudget8.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv-claim.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv-pvc.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv-pvc_1.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv1.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv2.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv3.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv4.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv5.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv5_1.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv6.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv6_1.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv7.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pv8.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pvc.yaml                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pvc1.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pvc2.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pvc3.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pvc4.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pvc5.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pvc7.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-pvc8.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac-clusterrole.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac-role-binding.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac1.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac1_1.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac1_2.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac2.yaml                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac2_1.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac3.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac3_1.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac3_2.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac4.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac4_1.yaml                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac4_2.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac5.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac5_1.yaml                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac7.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac7_1.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac7_2.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac8.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac8_1.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac8_2.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac_1.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rbac_2.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-role-bindings.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-role-bindings_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-role-bindings_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-role.yaml                                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-role1.yaml                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBinding.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBinding1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig10.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig11.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig12.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig13.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig14.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig15.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig16.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig17.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig18.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig19.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig20.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig4.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig5.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig6.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig7.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig8.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleBindingConfig9.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig10.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig11.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig12.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig13.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig14.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig15.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig16.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig17.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig18.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig19.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig2.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig20.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig3.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig4.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig5.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig6.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig7.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig8.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-roleConfig9.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-role_1.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-role_2.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rolebinding2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-rules10.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-sa.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-scrape.yaml                                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-scrape2.yaml                                     │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-secret.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-server-ext.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-server-pv.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-server-service.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-server-volume.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-server-volume1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-server-volume1_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-server-volume_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-service-account.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-service-account1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-service-account2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-service-account3.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-service-ext.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-service-local.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-service.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-service1.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-service10.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ prometheus-service11.yaml                                   │ kubernetes │         0         │
└─────────────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Prometheus-deployment53.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Prometheus-deployment53.yaml:5
────────────────────────────────────────
   5 [   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Prometheus-deployment53.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus
  24 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Prometheus-deployment53.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus:latest
  19 │         ports:
  20 │         - containerPort: 9090
  21 │         volumeMounts:
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus
────────────────────────────────────────



product_deployment.yaml (kubernetes)
====================================
Tests: 127 (SUCCESSES: 97, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 16, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-ds' of Deployment 'product' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'product-app' of Deployment 'product' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-ds' of Deployment 'product' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'product-app' of Deployment 'product' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-ds' of 'deployment' 'product' in 'production' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'product-app' of 'deployment' 'product' in 'production' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-ds' of Deployment 'product' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-ds' of Deployment 'product' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'product-app' of Deployment 'product' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init-ds' of Deployment 'product' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'product-app' of Deployment 'product' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-ds' of Deployment 'product' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'product-app' of Deployment 'product' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-ds' of Deployment 'product' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-ds' of Deployment 'product' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-ds' of Deployment 'product' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-ds' of Deployment 'product' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'product-app' of Deployment 'product' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-ds' of Deployment 'product' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'product-app' of Deployment 'product' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-ds" of deployment "product" in "production" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "product-app" of deployment "product" in "production" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container product in production namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 product_deployment.yaml:31-36
────────────────────────────────────────
  31 ┌         - name: init-ds
  32 │           image: busybox:latest
  33 │           command:
  34 │             - "/bin/sh"
  35 │             - "-c"
  36 └             - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container product in production namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment product in production namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 product_deployment.yaml:18-96
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           preferredDuringSchedulingIgnoredDuringExecution:
  21 │             - podAffinityTerm:
  22 │                 labelSelector:
  23 │                   matchExpressions:
  24 │                     - key: app
  25 │                       operator: In
  26 └                       values:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container product-app in deployment product (namespace: production) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 product_deployment.yaml:48-96
────────────────────────────────────────
  48 ┌         - name: product-app
  49 │           image: kamathadityaa/product-istio
  50 │           env:
  51 │             - name: SPRING_PROFILES_ACTIVE
  52 │               value: prod
  53 │             - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
  54 │               valueFrom:
  55 │                 secretKeyRef:
  56 └                   name: jwt-secret
  ..   
────────────────────────────────────────



product_management_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'db' of Deployment 'db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'db' of Deployment 'db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'db' of 'deployment' 'db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'db' of Deployment 'db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'db' of Deployment 'db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'db' of Deployment 'db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'db' of Deployment 'db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'db' of Deployment 'db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'db' of Deployment 'db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'db' of Deployment 'db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'db' of Deployment 'db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "db" of deployment "db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 product_management_1.yaml:4
────────────────────────────────────────
   4 [   name: db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 product_management_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 product_management_1.yaml:15-29
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────



product_management_3.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'web' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 product_management_3.yaml:4
────────────────────────────────────────
   4 [   name: web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 product_management_3.yaml:15-29
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment web (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 product_management_3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: pavvanpradeep/product_management-web:latest
  18 │         ports:
  19 │         - containerPort: 8001
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           value: db
  23 │         imagePullPolicy: IfNotPresent
  24 └         volumeMounts:
  ..   
────────────────────────────────────────



product_management_5.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'queue' of Deployment 'queue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'queue' of Deployment 'queue' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'queue' of 'deployment' 'queue' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'queue' of Deployment 'queue' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'queue' of Deployment 'queue' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'queue' of Deployment 'queue' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'queue' of Deployment 'queue' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'queue' of Deployment 'queue' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'queue' of Deployment 'queue' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'queue' of Deployment 'queue' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'queue' of Deployment 'queue' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'queue' of Deployment 'queue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "queue" of deployment "queue" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment queue in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 product_management_5.yaml:4
────────────────────────────────────────
   4 [   name: queue
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container queue in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment queue in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 product_management_5.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 └         - name: app-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container queue in deployment queue (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 product_management_5.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: pavvanpradeep/product_management-queue:latest
  18 │         command:
  19 │         - python
  20 │         - consumer.py
  21 │         imagePullPolicy: IfNotPresent
  22 │         volumeMounts:
  23 │         - name: app-volume
  24 └           mountPath: /app
────────────────────────────────────────



product_postgresql_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'product-postgresql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 product_postgresql_1.yaml:22-44
────────────────────────────────────────
  22 ┌       - name: postgres
  23 │         image: postgres:14.2
  24 │         env:
  25 │         - name: POSTGRES_USER
  26 │           value: product
  27 │         - name: POSTGRES_PASSWORD
  28 │           valueFrom:
  29 │             secretKeyRef:
  30 └               name: product-postgresql
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'product-postgresql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 product_postgresql_1.yaml:22-44
────────────────────────────────────────
  22 ┌       - name: postgres
  23 │         image: postgres:14.2
  24 │         env:
  25 │         - name: POSTGRES_USER
  26 │           value: product
  27 │         - name: POSTGRES_PASSWORD
  28 │           valueFrom:
  29 │             secretKeyRef:
  30 └               name: product-postgresql
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'product-postgresql' in 'production' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 product_postgresql_1.yaml:22-44
────────────────────────────────────────
  22 ┌       - name: postgres
  23 │         image: postgres:14.2
  24 │         env:
  25 │         - name: POSTGRES_USER
  26 │           value: product
  27 │         - name: POSTGRES_PASSWORD
  28 │           valueFrom:
  29 │             secretKeyRef:
  30 └               name: product-postgresql
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'product-postgresql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 product_postgresql_1.yaml:22-44
────────────────────────────────────────
  22 ┌       - name: postgres
  23 │         image: postgres:14.2
  24 │         env:
  25 │         - name: POSTGRES_USER
  26 │           value: product
  27 │         - name: POSTGRES_PASSWORD
  28 │           valueFrom:
  29 │             secretKeyRef:
  30 └               name: product-postgresql
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'product-postgresql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 product_postgresql_1.yaml:22-44
────────────────────────────────────────
  22 ┌       - name: postgres
  23 │         image: postgres:14.2
  24 │         env:
  25 │         - name: POSTGRES_USER
  26 │           value: product
  27 │         - name: POSTGRES_PASSWORD
  28 │           valueFrom:
  29 │             secretKeyRef:
  30 └               name: product-postgresql
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'product-postgresql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 product_postgresql_1.yaml:22-44
────────────────────────────────────────
  22 ┌       - name: postgres
  23 │         image: postgres:14.2
  24 │         env:
  25 │         - name: POSTGRES_USER
  26 │           value: product
  27 │         - name: POSTGRES_PASSWORD
  28 │           valueFrom:
  29 │             secretKeyRef:
  30 └               name: product-postgresql
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'product-postgresql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 product_postgresql_1.yaml:22-44
────────────────────────────────────────
  22 ┌       - name: postgres
  23 │         image: postgres:14.2
  24 │         env:
  25 │         - name: POSTGRES_USER
  26 │           value: product
  27 │         - name: POSTGRES_PASSWORD
  28 │           valueFrom:
  29 │             secretKeyRef:
  30 └               name: product-postgresql
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 product_postgresql_1.yaml:22-44
────────────────────────────────────────
  22 ┌       - name: postgres
  23 │         image: postgres:14.2
  24 │         env:
  25 │         - name: POSTGRES_USER
  26 │           value: product
  27 │         - name: POSTGRES_PASSWORD
  28 │           valueFrom:
  29 │             secretKeyRef:
  30 └               name: product-postgresql
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "product-postgresql" in "production" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 product_postgresql_1.yaml:22-44
────────────────────────────────────────
  22 ┌       - name: postgres
  23 │         image: postgres:14.2
  24 │         env:
  25 │         - name: POSTGRES_USER
  26 │           value: product
  27 │         - name: POSTGRES_PASSWORD
  28 │           valueFrom:
  29 │             secretKeyRef:
  30 └               name: product-postgresql
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 product_postgresql_1.yaml:22-44
────────────────────────────────────────
  22 ┌       - name: postgres
  23 │         image: postgres:14.2
  24 │         env:
  25 │         - name: POSTGRES_USER
  26 │           value: product
  27 │         - name: POSTGRES_PASSWORD
  28 │           valueFrom:
  29 │             secretKeyRef:
  30 └               name: product-postgresql
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container product-postgresql in production namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 product_postgresql_1.yaml:22-44
────────────────────────────────────────
  22 ┌       - name: postgres
  23 │         image: postgres:14.2
  24 │         env:
  25 │         - name: POSTGRES_USER
  26 │           value: product
  27 │         - name: POSTGRES_PASSWORD
  28 │           valueFrom:
  29 │             secretKeyRef:
  30 └               name: product-postgresql
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment product-postgresql in production namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 product_postgresql_1.yaml:18-44
────────────────────────────────────────
  18 ┌       volumes:
  19 │       - name: data
  20 │         emptyDir: {}
  21 │       containers:
  22 │       - name: postgres
  23 │         image: postgres:14.2
  24 │         env:
  25 │         - name: POSTGRES_USER
  26 └           value: product
  ..   
────────────────────────────────────────



production-deploy1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql-prod' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql-prod' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql-prod' of 'deployment' 'mysql-deployment' in 'production' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql-prod' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql-prod' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql-prod' of Deployment 'mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql-prod' of Deployment 'mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql-prod' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql-prod' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql-prod" of deployment "mysql-deployment" in "production" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in production namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 production-deploy1.yaml:21-32
────────────────────────────────────────
  21 ┌       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 │             memory: 1Gi
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in production namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 production-deploy1.yaml:20-39
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: mysql-prod
  22 │         image: mysql:5.6
  23 │         envFrom:
  24 │         - secretRef:
  25 │             name: mysql-pr-secret
  26 │         resources:
  27 │           limits:
  28 └             memory: 1Gi
  ..   
────────────────────────────────────────



production-deploy1_2.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wordpress-cotainer-pr' of Deployment 'wordpress-deploy-pr' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 production-deploy1_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wordpress-cotainer-pr' of Deployment 'wordpress-deploy-pr' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 production-deploy1_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wordpress-cotainer-pr' of 'deployment' 'wordpress-deploy-pr' in 'production' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 production-deploy1_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wordpress-cotainer-pr' of Deployment 'wordpress-deploy-pr' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 production-deploy1_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wordpress-cotainer-pr' of Deployment 'wordpress-deploy-pr' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 production-deploy1_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wordpress-cotainer-pr' of Deployment 'wordpress-deploy-pr' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 production-deploy1_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wordpress-cotainer-pr' of Deployment 'wordpress-deploy-pr' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 production-deploy1_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 production-deploy1_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wordpress-cotainer-pr" of deployment "wordpress-deploy-pr" in "production" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 production-deploy1_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 production-deploy1_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment wordpress-deploy-pr in production namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wordpress-deploy-pr in production namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 production-deploy1_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment wordpress-deploy-pr in production namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 production-deploy1_2.yaml:23-47
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 └             memory: 512Mi
  ..   
────────────────────────────────────────



production-deploy_2.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wordpress-cotainer-pr' of Deployment 'wordpress-deploy-pr' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 production-deploy_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wordpress-cotainer-pr' of Deployment 'wordpress-deploy-pr' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 production-deploy_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wordpress-cotainer-pr' of 'deployment' 'wordpress-deploy-pr' in 'production' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 production-deploy_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wordpress-cotainer-pr' of Deployment 'wordpress-deploy-pr' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 production-deploy_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wordpress-cotainer-pr' of Deployment 'wordpress-deploy-pr' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 production-deploy_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wordpress-cotainer-pr' of Deployment 'wordpress-deploy-pr' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 production-deploy_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wordpress-cotainer-pr' of Deployment 'wordpress-deploy-pr' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 production-deploy_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 production-deploy_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wordpress-cotainer-pr" of deployment "wordpress-deploy-pr" in "production" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 production-deploy_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 production-deploy_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment wordpress-deploy-pr in production namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wordpress-deploy-pr in production namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 production-deploy_2.yaml:24-40
────────────────────────────────────────
  24 ┌       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 │             memory: 512Mi
  32 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment wordpress-deploy-pr in production namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 production-deploy_2.yaml:23-47
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: wordpress-cotainer-pr
  25 │         image: wordpress:5.6
  26 │         ports:
  27 │         - containerPort: 80
  28 │         resources:
  29 │           limits:
  30 │             cpu: '0.5'
  31 └             memory: 512Mi
  ..   
────────────────────────────────────────



production-deployment2.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'production-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'production-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'production-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'production-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'production-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'production-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'production-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'production-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'production-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'production-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'production-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "production-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment production-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 production-deployment2.yaml:4
────────────────────────────────────────
   4 [   name: production-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment production-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container production-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment production-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 production-deployment2.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 │             - containerPort: 80
  20 │       imagePullSecrets:
  21 └         - name: regcred
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in deployment production-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 production-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: nginx
  17 │           image: docker.io/nginx:1.14.2
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────



production16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'my-app-production' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'my-app-production' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'my-app-production' in 'production' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'my-app-production' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'my-app-production' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'my-app-production' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'my-app-production' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'my-app-production' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'my-app-production' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'my-app-production' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'my-app-production' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'my-app-production' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "my-app-production" in "production" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-app-production in production namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-app-production in production namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 production16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-app-production in production namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 production16.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 83
────────────────────────────────────────



productpage-v2-canary.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'productpage' of Deployment 'productpage-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'productpage' of 'deployment' 'productpage-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "productpage" of deployment "productpage-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productpage-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 productpage-v2-canary.yaml:4-7
────────────────────────────────────────
   4 ┌   name: productpage-v2
   5 │   labels:
   6 │     app: productpage
   7 └     version: v2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productpage-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productpage-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage-v2-canary.yaml:20-26
────────────────────────────────────────
  20 ┌       serviceAccountName: bookinfo-productpage
  21 │       containers:
  22 │       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container productpage in deployment productpage-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 productpage-v2-canary.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────



productpage-v2-canary1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'productpage' of Deployment 'productpage-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'productpage' of 'deployment' 'productpage-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "productpage" of deployment "productpage-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productpage-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 productpage-v2-canary1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: productpage-v2
   5 │   labels:
   6 │     app: productpage
   7 └     version: v2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productpage-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productpage-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage-v2-canary1.yaml:20-26
────────────────────────────────────────
  20 ┌       serviceAccountName: bookinfo-productpage
  21 │       containers:
  22 │       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container productpage in deployment productpage-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 productpage-v2-canary1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────



productpage-v2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'productpage' of Deployment 'productpage-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'productpage' of 'deployment' 'productpage-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "productpage" of deployment "productpage-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productpage-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 productpage-v2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: productpage-v2
   5 │   labels:
   6 │     app: productpage
   7 └     version: v2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productpage-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productpage-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage-v2.yaml:20-26
────────────────────────────────────────
  20 ┌       serviceAccountName: bookinfo-productpage
  21 │       containers:
  22 │       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container productpage in deployment productpage-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 productpage-v2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────



productpage-v21.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'productpage' of Deployment 'productpage-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'productpage' of 'deployment' 'productpage-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'productpage' of Deployment 'productpage-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "productpage" of deployment "productpage-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productpage-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 productpage-v21.yaml:4-7
────────────────────────────────────────
   4 ┌   name: productpage-v2
   5 │   labels:
   6 │     app: productpage
   7 └     version: v2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productpage-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productpage-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage-v21.yaml:20-26
────────────────────────────────────────
  20 ┌       serviceAccountName: bookinfo-productpage
  21 │       containers:
  22 │       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container productpage in deployment productpage-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 productpage-v21.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/sixeyed/bookinfo-productpage:v2
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 └         - containerPort: 9080
────────────────────────────────────────



productpage1_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'productpage' of Deployment 'productpage-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'productpage' of 'deployment' 'productpage-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "productpage" of deployment "productpage-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productpage-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 productpage1_2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: productpage-v1
   5 │   labels:
   6 │     app: productpage
   7 └     version: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productpage-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productpage-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage1_2.yaml:20-39
────────────────────────────────────────
  20 ┌       serviceAccountName: bookinfo-productpage
  21 │       containers:
  22 │       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 └         - name: RATINGS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container productpage in deployment productpage-v1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 productpage1_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────



productpage2.yaml (kubernetes)
==============================
Tests: 145 (SUCCESSES: 95, FAILURES: 50)
Failures: 50 (UNKNOWN: 0, LOW: 31, MEDIUM: 13, HIGH: 6, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'envoy-init' of Pod 'productpage' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'envoy-proxy' of Pod 'productpage' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'productpage' of Pod 'productpage' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'envoy-init' of Pod 'productpage' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'envoy-proxy' of Pod 'productpage' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'productpage' of Pod 'productpage' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'envoy-init' of 'pod' 'productpage' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'envoy-proxy' of 'pod' 'productpage' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'productpage' of 'pod' 'productpage' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'envoy-init' of Pod 'productpage' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'envoy-proxy' of Pod 'productpage' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'productpage' of Pod 'productpage' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'envoy-init' of Pod 'productpage' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'envoy-proxy' of Pod 'productpage' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'productpage' of Pod 'productpage' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'envoy-init' of Pod 'productpage' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'envoy-init' of Pod 'productpage' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'envoy-proxy' of Pod 'productpage' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'productpage' of Pod 'productpage' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'envoy-init' of Pod 'productpage' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'envoy-proxy' of Pod 'productpage' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'productpage' of Pod 'productpage' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'envoy-init' of Pod 'productpage' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'envoy-proxy' of Pod 'productpage' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'productpage' of Pod 'productpage' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'envoy-init' of Pod 'productpage' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'envoy-init' of Pod 'productpage' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'envoy-proxy' of Pod 'productpage' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'productpage' of Pod 'productpage' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'envoy-init' of Pod 'productpage' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'envoy-proxy' of Pod 'productpage' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'productpage' of Pod 'productpage' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'envoy-init' of Pod 'productpage' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'envoy-proxy' of Pod 'productpage' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'productpage' of Pod 'productpage' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "envoy-init" of pod "productpage" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "envoy-proxy" of pod "productpage" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "productpage" of pod "productpage" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod productpage in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 productpage2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: productpage
   5 │   namespace: default
   6 │   labels:
   7 └     app: productpage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productpage in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod productpage in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage2.yaml:9-23
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 │           protocol: tcp
  15 │     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 └       securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container envoy-init in pod productpage (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 productpage2.yaml:20-23
────────────────────────────────────────
  20 ┌     - name: envoy-init
  21 │       image: sjtuzc/envoy-init:latest
  22 │       securityContext:
  23 └         privileged: true
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container envoy-proxy in pod productpage (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 productpage2.yaml:15-18
────────────────────────────────────────
  15 ┌     - name: envoy-proxy
  16 │       image: sjtuzc/envoy:1.2
  17 │       securityContext:
  18 └         runAsUser: 1337
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container productpage in pod productpage (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 productpage2.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: productpage
  11 │       image: istio/examples-bookinfo-productpage-v1:1.19.1
  12 │       ports:
  13 │         - containerPort: 9080
  14 └           protocol: tcp
────────────────────────────────────────



productpage4_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'productpage' of Deployment 'productpage-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'productpage' of 'deployment' 'productpage-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "productpage" of deployment "productpage-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productpage-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 productpage4_2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: productpage-v1
   5 │   labels:
   6 │     app: productpage
   7 └     version: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productpage-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productpage-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage4_2.yaml:24-36
────────────────────────────────────────
  24 ┌       serviceAccountName: bookinfo-productpage
  25 │       containers:
  26 │       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 └         - name: tmp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container productpage in deployment productpage-v1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 productpage4_2.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: productpage
  27 │         image: docker.io/istio/examples-bookinfo-productpage-v1:1.18.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         ports:
  30 │         - containerPort: 9080
  31 │         volumeMounts:
  32 │         - name: tmp
  33 └           mountPath: /tmp
────────────────────────────────────────



productpage_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'productpage' of Deployment 'productpage-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'productpage' of 'deployment' 'productpage-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'productpage' of Deployment 'productpage-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "productpage" of deployment "productpage-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productpage-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 productpage_2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: productpage-v1
   5 │   labels:
   6 │     app: productpage
   7 └     version: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productpage-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productpage-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productpage_2.yaml:20-39
────────────────────────────────────────
  20 ┌       serviceAccountName: bookinfo-productpage
  21 │       containers:
  22 │       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 └         - name: RATINGS_DOMAIN
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container productpage in deployment productpage-v1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 productpage_2.yaml:22-36
────────────────────────────────────────
  22 ┌       - name: productpage
  23 │         image: docker.io/iharvauchok/productpage:0.0.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: DETAILS_DOMAIN
  27 │           value: details
  28 │         - name: RATINGS_DOMAIN
  29 │           value: ratings
  30 └         - name: REVIEWS_DOMAIN
  ..   
────────────────────────────────────────



products-api-deployment.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'products-api' of Deployment 'products-api' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'products-api' of Deployment 'products-api' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'products-api' of 'deployment' 'products-api' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'products-api' of Deployment 'products-api' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'products-api' of Deployment 'products-api' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'products-api' of Deployment 'products-api' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'products-api' of Deployment 'products-api' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'products-api' of Deployment 'products-api' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'products-api' of Deployment 'products-api' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'products-api' of Deployment 'products-api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'products-api' of Deployment 'products-api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "products-api" of deployment "products-api" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment products-api in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 products-api-deployment.yaml:4
────────────────────────────────────────
   4 [   name: products-api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-api in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products-api in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-api-deployment.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container products-api in deployment products-api (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products-api-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: products-api
  17 │           image: abdosaudi/ecommerce-node-products-api:v1.2
  18 │           ports:
  19 │             - containerPort: 5002
  20 │           env:
  21 │             - name: MONGODB_HOST
  22 │               value: "mongodb-cluster-ip-service"
  23 │           envFrom:
  24 │             - configMapRef:
  25 └                 name: rabbitmq-configmap
────────────────────────────────────────



products-api-deployment1_1.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'products-api' of Deployment 'products-api' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'products-api' of Deployment 'products-api' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'products-api' of 'deployment' 'products-api' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'products-api' of Deployment 'products-api' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'products-api' of Deployment 'products-api' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'products-api' of Deployment 'products-api' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'products-api' of Deployment 'products-api' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'products-api' of Deployment 'products-api' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'products-api' of Deployment 'products-api' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'products-api' of Deployment 'products-api' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'products-api' of Deployment 'products-api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'products-api' of Deployment 'products-api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "products-api" of deployment "products-api" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment products-api in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 products-api-deployment1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: products-api
   5 │   labels:
   6 └     app: products-api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-api in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-api-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 │           value: mysql
  26 └         - name: MYSQL_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products-api in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-api-deployment1_1.yaml:17-35
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: products-api
  19 │         image: products-api:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_HOST
  25 └           value: mysql
  ..   
────────────────────────────────────────



products-api_3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'products-api' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'products-api' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'products-api' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'products-api' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'products-api' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'products-api' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'products-api' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'products-api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'products-api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "products-api" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment products-api in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 products-api_3.yaml:4-7
────────────────────────────────────────
   4 ┌   name: products-api
   5 │   labels:
   6 │     kubernetes.courselabs.co: hackathon
   7 └     app: widgetario
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment products-api in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-api in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products-api in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-api_3.yaml:24-54
────────────────────────────────────────
  24 ┌       automountServiceAccountToken: false
  25 │       containers:
  26 │       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in deployment products-api (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products-api_3.yaml:26-50
────────────────────────────────────────
  26 ┌       - name: app
  27 │         image: widgetario/products-api:21.03
  28 │         ports:
  29 │         - containerPort: 80
  30 │           name: http
  31 │         readinessProbe:
  32 │           httpGet:
  33 │             path: /
  34 └             port: http
  ..   
────────────────────────────────────────



products-db.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'products-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'products-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'products-db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'products-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'products-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'products-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'products-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'products-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'products-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'products-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'products-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "products-db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment products-db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 products-db.yaml:4-7
────────────────────────────────────────
   4 ┌   name: products-db
   5 │   labels:
   6 │     kubernetes.courselabs.co: hackathon
   7 └     app: widgetario
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products-db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-db.yaml:20-28
────────────────────────────────────────
  20 ┌       containers:
  21 │         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in deployment products-db (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products-db.yaml:21-28
────────────────────────────────────────
  21 ┌         - name: app
  22 │           image: widgetario/products-db:21.03
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: postgres
  26 │           envFrom:
  27 │             - secretRef:
  28 └                 name: products-db-password
────────────────────────────────────────



products-db1_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of StatefulSet 'products-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of StatefulSet 'products-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'statefulset' 'products-db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of StatefulSet 'products-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of StatefulSet 'products-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of StatefulSet 'products-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of StatefulSet 'products-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of StatefulSet 'products-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of StatefulSet 'products-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of statefulset "products-db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset products-db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 products-db1_2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: products-db
   5 │   labels:
   6 │     kubernetes.courselabs.co: hackathon
   7 └     app: widgetario
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset products-db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-db1_2.yaml:23-54
────────────────────────────────────────
  23 ┌       automountServiceAccountToken: false
  24 │       containers:
  25 │       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 └         - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in statefulset products-db (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products-db1_2.yaml:25-54
────────────────────────────────────────
  25 ┌       - name: app
  26 │         image: widgetario/products-db-replicated:21.03
  27 │         envFrom:
  28 │         - secretRef:
  29 │             name: products-db-password
  30 │         ports:
  31 │         - containerPort: 5432
  32 │           name: postgres
  33 └         readinessProbe:
  ..   
────────────────────────────────────────



products-db3.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'db' of Deployment 'products-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'db' of Deployment 'products-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'db' of 'deployment' 'products-db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'db' of Deployment 'products-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'db' of Deployment 'products-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'db' of Deployment 'products-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'db' of Deployment 'products-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'db' of Deployment 'products-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'db' of Deployment 'products-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'db' of Deployment 'products-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'db' of Deployment 'products-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "db" of deployment "products-db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment products-db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 products-db3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: products-db
   5 │   labels:
   6 └     kubernetes.courselabs.co: productionizing
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products-db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-db3.yaml:16-29
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 └           livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container db in deployment products-db (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products-db3.yaml:17-29
────────────────────────────────────────
  17 ┌         - name: db
  18 │           image: widgetario/products-db:postgres
  19 │           readinessProbe:
  20 │             tcpSocket:
  21 │               port: 5432
  22 │             periodSeconds: 5
  23 │             initialDelaySeconds: 10
  24 │           livenessProbe:
  25 └             exec:
  ..   
────────────────────────────────────────



products-depl.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tickets-2' of Deployment 'tickets-depl-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tickets-2' of Deployment 'tickets-depl-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tickets-2' of 'deployment' 'tickets-depl-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'tickets-2' of Deployment 'tickets-depl-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tickets-2' of Deployment 'tickets-depl-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tickets-2' of Deployment 'tickets-depl-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tickets-2' of Deployment 'tickets-depl-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tickets-2' of Deployment 'tickets-depl-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tickets-2' of Deployment 'tickets-depl-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'tickets-2' of Deployment 'tickets-depl-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tickets-2' of Deployment 'tickets-depl-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tickets-2' of Deployment 'tickets-depl-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tickets-2" of deployment "tickets-depl-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment tickets-depl-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 products-depl.yaml:4
────────────────────────────────────────
   4 [   name: tickets-depl-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container tickets-depl-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment tickets-depl-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-depl.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container tickets-2 in deployment tickets-depl-2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: tickets-2
  17 └         image: sydsfn/tickets-demo-2
────────────────────────────────────────



products-depl1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'products' of Deployment 'products-depl-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'products' of Deployment 'products-depl-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'products' of 'deployment' 'products-depl-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'products' of Deployment 'products-depl-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'products' of Deployment 'products-depl-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'products' of Deployment 'products-depl-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'products' of Deployment 'products-depl-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'products' of Deployment 'products-depl-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'products' of Deployment 'products-depl-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'products' of Deployment 'products-depl-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'products' of Deployment 'products-depl-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'products' of Deployment 'products-depl-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "products" of deployment "products-depl-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment products-depl-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 products-depl1.yaml:4
────────────────────────────────────────
   4 [   name: products-depl-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-depl-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products-depl-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-depl1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container products in deployment products-depl-2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo-2
────────────────────────────────────────



products-depl2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'products' of Deployment 'products-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'products' of Deployment 'products-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'products' of 'deployment' 'products-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'products' of Deployment 'products-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'products' of Deployment 'products-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'products' of Deployment 'products-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'products' of Deployment 'products-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'products' of Deployment 'products-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'products' of Deployment 'products-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'products' of Deployment 'products-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'products' of Deployment 'products-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'products' of Deployment 'products-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "products" of deployment "products-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment products-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 products-depl2.yaml:4
────────────────────────────────────────
   4 [   name: products-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-depl2.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container products in deployment products-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: products
  17 └         image: sydsfn/products-demo
────────────────────────────────────────



products-deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'products-container' of Deployment 'products' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'products-container' of Deployment 'products' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'products-container' of 'deployment' 'products' in 'ecommerce' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'products-container' of Deployment 'products' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'products-container' of Deployment 'products' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'products-container' of Deployment 'products' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'products-container' of Deployment 'products' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'products-container' of Deployment 'products' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'products-container' of Deployment 'products' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "products-container" of deployment "products" in "ecommerce" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products in ecommerce namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products in ecommerce namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-deployment.yaml:18-26
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container products-container in deployment products (namespace: ecommerce) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────



products-deployment1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'products-container' of Deployment 'products' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'products-container' of Deployment 'products' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'products-container' of 'deployment' 'products' in 'ecommerce' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'products-container' of Deployment 'products' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'products-container' of Deployment 'products' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'products-container' of Deployment 'products' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'products-container' of Deployment 'products' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'products-container' of Deployment 'products' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'products-container' of Deployment 'products' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "products-container" of deployment "products" in "ecommerce" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products in ecommerce namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products in ecommerce namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-deployment1.yaml:18-26
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container products-container in deployment products (namespace: ecommerce) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products-deployment1.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: products-container
  20 │           image: "public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1"
  21 │           ports:
  22 │           - containerPort: 3004
  23 │           resources:
  24 │             requests:
  25 │               cpu: "1"
  26 └               memory: "64Mi"
────────────────────────────────────────



products-deployment2.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'products' of Deployment 'products-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'products' of Deployment 'products-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'products' of 'deployment' 'products-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'products' of Deployment 'products-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'products' of Deployment 'products-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'products' of Deployment 'products-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'products' of Deployment 'products-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'products' of Deployment 'products-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "products" of deployment "products-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment products-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 products-deployment2.yaml:4
────────────────────────────────────────
   4 [   name: products-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-deployment2.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 └               memory: "100Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container products in deployment products-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: products
  17 │           image: sanzhik03/products-service:latest
  18 │           ports:
  19 │             - containerPort: 8082
  20 │           resources:
  21 │             requests:
  22 │               cpu: "100m"
  23 │               memory: "100Mi"
  24 └             limits:
  ..   
────────────────────────────────────────



products-service.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'products' of Deployment 'products-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products-service.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 │             memory: "512Mi"
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'products' of Deployment 'products-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products-service.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 │             memory: "512Mi"
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'products' of 'deployment' 'products-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products-service.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 │             memory: "512Mi"
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'products' of Deployment 'products-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products-service.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 │             memory: "512Mi"
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'products' of Deployment 'products-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 products-service.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 │             memory: "512Mi"
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'products' of Deployment 'products-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products-service.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 │             memory: "512Mi"
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'products' of Deployment 'products-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products-service.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 │             memory: "512Mi"
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'products' of Deployment 'products-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products-service.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 │             memory: "512Mi"
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products-service.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 │             memory: "512Mi"
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "products" of deployment "products-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products-service.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 │             memory: "512Mi"
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products-service.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 │             memory: "512Mi"
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment products-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 products-service.yaml:4
────────────────────────────────────────
   4 [   name: products-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment products-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-service.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 │             memory: "512Mi"
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products-service.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: products
  17 │         image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/products-repository:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: "1"
  23 └             memory: "512Mi"
  ..   
────────────────────────────────────────



products1_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'products-container' of Deployment 'products' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'products-container' of Deployment 'products' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'products-container' of 'deployment' 'products' in 'ecommerce' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'products-container' of Deployment 'products' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'products-container' of Deployment 'products' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'products-container' of Deployment 'products' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'products-container' of Deployment 'products' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'products-container' of Deployment 'products' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'products-container' of Deployment 'products' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "products-container" of deployment "products" in "ecommerce" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products in ecommerce namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products in ecommerce namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products1_1.yaml:18-26
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container products-container in deployment products (namespace: ecommerce) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products1_1.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: products-container
  20 │         image: public.ecr.aws/k3d0y0m9/ecommerce/products:0.0.1
  21 │         ports:
  22 │         - containerPort: 3004
  23 │         resources:
  24 │           requests:
  25 │             cpu: '1'
  26 └             memory: 64Mi
────────────────────────────────────────



products2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'products' of Deployment 'products-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'products' of Deployment 'products-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'products' of 'deployment' 'products-deployment' in 'mini-ecommerce' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'products' of Deployment 'products-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'products' of Deployment 'products-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'products' of Deployment 'products-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'products' of Deployment 'products-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'products' of Deployment 'products-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "products" of deployment "products-deployment" in "mini-ecommerce" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-deployment in mini-ecommerce namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products-deployment in mini-ecommerce namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products2.yaml:16-97
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container products in deployment products-deployment (namespace: mini-ecommerce) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products2.yaml:17-97
────────────────────────────────────────
  17 ┌       - name: products
  18 │         image: foyezar/ecommerce-products
  19 │         ports:
  20 │         - containerPort: 3002
  21 │         env:
  22 │         - name: Service
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 └               name: products-config
  ..   
────────────────────────────────────────



products3_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'products-container' of Deployment 'products-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'products-container' of Deployment 'products-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'products-container' of 'deployment' 'products-1' in 'ecommerce' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'products-container' of Deployment 'products-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'products-container' of Deployment 'products-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'products-container' of Deployment 'products-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'products-container' of Deployment 'products-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'products-container' of Deployment 'products-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'products-container' of Deployment 'products-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'products-container' of Deployment 'products-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'products-container' of Deployment 'products-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "products-container" of deployment "products-1" in "ecommerce" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-1 in ecommerce namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products-1 in ecommerce namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products3_2.yaml:23-30
────────────────────────────────────────
  23 ┌       serviceAccountName: products-service-account
  24 │       nodeSelector:
  25 │         node.kubernetes.io/instance-type: m5.xlarge
  26 │       containers:
  27 │       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container products-container in deployment products-1 (namespace: ecommerce) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products3_2.yaml:27-30
────────────────────────────────────────
  27 ┌       - name: products-container
  28 │         image: lukondefmwila/ecommerce-products:0.1.5
  29 │         ports:
  30 └         - containerPort: 3004
────────────────────────────────────────



products3_3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'products-container' of Deployment 'products-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'products-container' of Deployment 'products-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'products-container' of 'deployment' 'products-2' in 'ecommerce' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'products-container' of Deployment 'products-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'products-container' of Deployment 'products-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'products-container' of Deployment 'products-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'products-container' of Deployment 'products-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'products-container' of Deployment 'products-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'products-container' of Deployment 'products-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'products-container' of Deployment 'products-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'products-container' of Deployment 'products-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "products-container" of deployment "products-2" in "ecommerce" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container products-2 in ecommerce namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment products-2 in ecommerce namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 products3_3.yaml:23-38
────────────────────────────────────────
  23 ┌       serviceAccountName: products-service-account
  24 │       affinity:
  25 │         podAffinity:
  26 │           requiredDuringSchedulingIgnoredDuringExecution:
  27 │           - labelSelector:
  28 │               matchExpressions:
  29 │               - key: app
  30 │                 operator: In
  31 └                 values:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container products-container in deployment products-2 (namespace: ecommerce) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 products3_3.yaml:35-38
────────────────────────────────────────
  35 ┌       - name: products-container
  36 │         image: lukondefmwila/ecommerce-products:0.1.6-alpha
  37 │         ports:
  38 └         - containerPort: 3004
────────────────────────────────────────



productservice-deployment.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'productservice' of Deployment 'productservice-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'productservice' of 'deployment' 'productservice-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'productservice' of Deployment 'productservice-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'productservice' of Deployment 'productservice-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'productservice' of Deployment 'productservice-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "productservice" of deployment "productservice-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productservice-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 productservice-deployment.yaml:4
────────────────────────────────────────
   4 [   name: productservice-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productservice-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productservice-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productservice-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productservice-deployment.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: productservice
  17 └           image: redis
────────────────────────────────────────



productservice-deployment1.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'productservice' of Deployment 'productservice-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'productservice' of 'deployment' 'productservice-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'productservice' of Deployment 'productservice-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'productservice' of Deployment 'productservice-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'productservice' of Deployment 'productservice-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'productservice' of Deployment 'productservice-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "productservice" of deployment "productservice-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productservice-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 productservice-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: productservice-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productservice-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productservice-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: productservice
  17 └           image: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productservice-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 productservice-deployment1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: productservice
  17 └           image: redis
────────────────────────────────────────



produtos_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postech-produtos' of Deployment 'postech-produtos-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postech-produtos' of Deployment 'postech-produtos-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postech-produtos' of 'deployment' 'postech-produtos-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postech-produtos' of Deployment 'postech-produtos-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postech-produtos' of Deployment 'postech-produtos-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postech-produtos' of Deployment 'postech-produtos-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postech-produtos' of Deployment 'postech-produtos-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postech-produtos' of Deployment 'postech-produtos-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postech-produtos' of Deployment 'postech-produtos-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postech-produtos' of Deployment 'postech-produtos-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postech-produtos' of Deployment 'postech-produtos-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postech-produtos" of deployment "postech-produtos-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postech-produtos-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 produtos_1.yaml:4
────────────────────────────────────────
   4 [   name: postech-produtos-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postech-produtos-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postech-produtos-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 produtos_1.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 └         - name: SPRING_DATASOURCE_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container postech-produtos in deployment postech-produtos-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 produtos_1.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postech-produtos
  17 │         image: danielmaria/postech-produtos:latest-macos
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           value: jdbc:mysql://mysql:3306/produtos?createDatabaseIfNotExist=true
  23 │         - name: SPRING_DATASOURCE_USERNAME
  24 └           value: root
  ..   
────────────────────────────────────────



profile_deployment.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'profile-server' of Deployment 'profile-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 profile_deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'profile-server' of Deployment 'profile-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 profile_deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'profile-server' of Deployment 'profile-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 profile_deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'profile-server' of Deployment 'profile-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 profile_deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'profile-server' of Deployment 'profile-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 profile_deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'profile-server' of Deployment 'profile-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 profile_deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'profile-server' of Deployment 'profile-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 profile_deployment.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment profile-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 profile_deployment.yaml:5-7
────────────────────────────────────────
   5 ┌   name: profile-server
   6 │   labels:
   7 └     db: pgsql
────────────────────────────────────────



profile_deployment1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'profile-server' of Deployment 'profile-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 profile_deployment1.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'profile-server' of Deployment 'profile-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 profile_deployment1.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'profile-server' of Deployment 'profile-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 profile_deployment1.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'profile-server' of Deployment 'profile-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 profile_deployment1.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'profile-server' of Deployment 'profile-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 profile_deployment1.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'profile-server' of Deployment 'profile-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 profile_deployment1.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'profile-server' of Deployment 'profile-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 profile_deployment1.yaml:18-85
────────────────────────────────────────
  18 ┌       - name: profile-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-profile_server_image
  21 │         ports:
  22 │         - containerPort: 51500
  23 │           name: http2
  24 │         - containerPort: 51501
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment profile-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 profile_deployment1.yaml:5-7
────────────────────────────────────────
   5 ┌   name: profile-server
   6 │   labels:
   7 └     db: pgsql
────────────────────────────────────────



profiler.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'profiler' of Deployment 'profiler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'profiler' of Deployment 'profiler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'profiler' of 'deployment' 'profiler' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'profiler' of Deployment 'profiler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'profiler' of Deployment 'profiler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'profiler' of Deployment 'profiler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'profiler' of Deployment 'profiler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'profiler' of Deployment 'profiler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'profiler' of Deployment 'profiler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'profiler' of Deployment 'profiler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'profiler' of Deployment 'profiler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'profiler' of Deployment 'profiler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "profiler" of deployment "profiler" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment profiler in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 profiler.yaml:4
────────────────────────────────────────
   4 [   name: profiler
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container profiler in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 profiler.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment profiler in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 profiler.yaml:15-18
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: profiler
  17 │         image: profiler:latest
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



profileservice-deployment.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'profile-microservice' of Deployment 'backend-hs-mern-himani' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'profile-microservice' of Deployment 'backend-hs-mern-himani' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'profile-microservice' of 'deployment' 'backend-hs-mern-himani' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'profile-microservice' of Deployment 'backend-hs-mern-himani' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'profile-microservice' of Deployment 'backend-hs-mern-himani' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'profile-microservice' of Deployment 'backend-hs-mern-himani' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'profile-microservice' of Deployment 'backend-hs-mern-himani' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'profile-microservice' of Deployment 'backend-hs-mern-himani' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'profile-microservice' of Deployment 'backend-hs-mern-himani' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'profile-microservice' of Deployment 'backend-hs-mern-himani' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'profile-microservice' of Deployment 'backend-hs-mern-himani' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'profile-microservice' of Deployment 'backend-hs-mern-himani' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "profile-microservice" of deployment "backend-hs-mern-himani" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment backend-hs-mern-himani in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 profileservice-deployment.yaml:4
────────────────────────────────────────
   4 [   name: backend-hs-mern-himani
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container backend-hs-mern-himani in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment backend-hs-mern-himani in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 profileservice-deployment.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container profile-microservice in deployment backend-hs-mern-himani (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 profileservice-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: profile-microservice
  17 │         image: us-central1-docker.pkg.dev/graphic-parsec-413206/profileservice/profile:latest
  18 │         ports:
  19 │         - containerPort: 3002
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: mongo-secret
  25 └               key: MONGO_URL
────────────────────────────────────────



project-darwin-manifest-ingress-homepage.yaml (kubernetes)
==========================================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'db' of Deployment 'db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'db' of Deployment 'db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'db' of 'deployment' 'db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'db' of Deployment 'db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'db' of Deployment 'db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'db' of Deployment 'db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'db' of Deployment 'db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'db' of Deployment 'db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'db' of Deployment 'db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'db' of Deployment 'db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'db' of Deployment 'db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'db' of Deployment 'db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "db" of deployment "db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:4
────────────────────────────────────────
   4 [   name: db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container db in deployment db (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/ddb
  17 │         name: db
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────



project-darwin-manifest-ingress-homepage_2.yaml (kubernetes)
============================================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dw' of Deployment 'dw' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dw' of Deployment 'dw' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dw' of 'deployment' 'dw' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dw' of Deployment 'dw' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dw' of Deployment 'dw' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'dw' of Deployment 'dw' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dw' of Deployment 'dw' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dw' of Deployment 'dw' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dw' of Deployment 'dw' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dw' of Deployment 'dw' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dw' of Deployment 'dw' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dw' of Deployment 'dw' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dw" of deployment "dw" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment dw in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:4
────────────────────────────────────────
   4 [   name: dw
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dw in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dw in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dw in deployment dw (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dw
  17 │         name: dw
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────



project-darwin-manifest-ingress-homepage_4.yaml (kubernetes)
============================================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dp' of Deployment 'dp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dp' of Deployment 'dp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dp' of 'deployment' 'dp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dp' of Deployment 'dp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dp' of Deployment 'dp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'dp' of Deployment 'dp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dp' of Deployment 'dp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dp' of Deployment 'dp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dp' of Deployment 'dp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dp' of Deployment 'dp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dp' of Deployment 'dp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dp' of Deployment 'dp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dp" of deployment "dp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment dp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:4
────────────────────────────────────────
   4 [   name: dp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dp in deployment dp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 project-darwin-manifest-ingress-homepage_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - image: samdroberts/dp
  17 │         name: dp
  18 │         ports:
  19 └         - containerPort: 8443
────────────────────────────────────────



project-earthflower.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'httpd' of Deployment 'project-earthflower' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'httpd' of Deployment 'project-earthflower' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'httpd' of 'deployment' 'project-earthflower' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'httpd' of Deployment 'project-earthflower' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'httpd' of Deployment 'project-earthflower' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'httpd' of Deployment 'project-earthflower' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'httpd' of Deployment 'project-earthflower' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'httpd' of Deployment 'project-earthflower' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'httpd' of Deployment 'project-earthflower' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'httpd' of Deployment 'project-earthflower' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'httpd' of Deployment 'project-earthflower' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "httpd" of deployment "project-earthflower" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment project-earthflower in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 project-earthflower.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: project-earthflower
   7 └   name: project-earthflower
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container project-earthflower in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 project-earthflower.yaml:25-30
────────────────────────────────────────
  25 ┌       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 │         - name: project-data
  29 │           mountPath: /tmp/project-data
  30 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment project-earthflower in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 project-earthflower.yaml:20-30
────────────────────────────────────────
  20 ┌       volumes:
  21 │       - name: project-data
  22 │         persistentVolumeClaim:
  23 │           claimName: earth-project-earthflower-pvc
  24 │       containers:
  25 │       - image: httpd:2.4.41-alpine
  26 │         name: httpd
  27 │         volumeMounts:
  28 └         - name: project-data
  ..   
────────────────────────────────────────



project.yaml.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'project' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'project' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'project' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'project' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'project' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'project' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'project' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'project' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'project' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'project' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'project' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "project" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 project.yaml.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-pod
   5 │   labels:
   6 └     app: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 project.yaml.yaml:8-13
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container project in pod my-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 project.yaml.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: project
  10 │     image: mayur4279/college_project:project_v1
  11 │     ports:
  12 │     - containerPort: 8000
  13 └       protocol: TCP
────────────────────────────────────────



project38.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container-0' of Deployment 'python-kube-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container-0' of Deployment 'python-kube-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container-0' of 'deployment' 'python-kube-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container-0' of Deployment 'python-kube-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container-0' of Deployment 'python-kube-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container-0' of Deployment 'python-kube-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container-0' of Deployment 'python-kube-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container-0' of Deployment 'python-kube-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container-0' of Deployment 'python-kube-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container-0' of Deployment 'python-kube-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container-0' of Deployment 'python-kube-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container-0' of Deployment 'python-kube-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container-0" of deployment "python-kube-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-kube-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 project38.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: python-kube-app
   6 │   name: python-kube-app
   7 └   namespace: default
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment python-kube-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-kube-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 project38.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-kube-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 project38.yaml:19-31
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: python-kube-app:latest
  21 │         imagePullPolicy: Always
  22 │         name: container-0
  23 │         ports:
  24 │         - containerPort: 80
  25 │           name: http
  26 │           protocol: TCP
  27 └         resources: {}
  ..   
────────────────────────────────────────



project_manager_deployment.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'project-manager-server' of Deployment 'project-manager-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 project_manager_deployment.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'project-manager-server' of Deployment 'project-manager-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 project_manager_deployment.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'project-manager-server' of Deployment 'project-manager-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 project_manager_deployment.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'project-manager-server' of Deployment 'project-manager-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 project_manager_deployment.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'project-manager-server' of Deployment 'project-manager-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 project_manager_deployment.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'project-manager-server' of Deployment 'project-manager-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 project_manager_deployment.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'project-manager-server' of Deployment 'project-manager-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 project_manager_deployment.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment project-manager-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 project_manager_deployment.yaml:5-7
────────────────────────────────────────
   5 ┌   name: project-manager-server
   6 │   labels:
   7 └     db: pgsql
────────────────────────────────────────



project_manager_deployment1.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'project-manager-server' of Deployment 'project-manager-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 project_manager_deployment1.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'project-manager-server' of Deployment 'project-manager-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 project_manager_deployment1.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'project-manager-server' of Deployment 'project-manager-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 project_manager_deployment1.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'project-manager-server' of Deployment 'project-manager-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 project_manager_deployment1.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'project-manager-server' of Deployment 'project-manager-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 project_manager_deployment1.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'project-manager-server' of Deployment 'project-manager-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 project_manager_deployment1.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'project-manager-server' of Deployment 'project-manager-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 project_manager_deployment1.yaml:18-70
────────────────────────────────────────
  18 ┌       - name: project-manager-server
  19 │         imagePullPolicy: IfNotPresent
  20 │         image: cloud-project_manager_server_image
  21 │         ports:
  22 │         - containerPort: 50300
  23 │           name: http2
  24 │         - containerPort: 50301
  25 │           name: metrics-http
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment project-manager-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 project_manager_deployment1.yaml:5-7
────────────────────────────────────────
   5 ┌   name: project-manager-server
   6 │   labels:
   7 └     db: pgsql
────────────────────────────────────────



projected-volume.yaml (kubernetes)
==================================
Tests: 147 (SUCCESSES: 97, FAILURES: 50)
Failures: 50 (UNKNOWN: 0, LOW: 31, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'project-volume-configmap' of Pod 'project-volume' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'project-volume-downwardapi' of Pod 'project-volume' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'project-volume-secret' of Pod 'project-volume' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'project-volume-configmap' of Pod 'project-volume' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'project-volume-downwardapi' of Pod 'project-volume' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'project-volume-secret' of Pod 'project-volume' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'project-volume-configmap' of 'pod' 'project-volume' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'project-volume-downwardapi' of 'pod' 'project-volume' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'project-volume-secret' of 'pod' 'project-volume' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'project-volume-configmap' of Pod 'project-volume' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'project-volume-downwardapi' of Pod 'project-volume' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'project-volume-secret' of Pod 'project-volume' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'project-volume-configmap' of Pod 'project-volume' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'project-volume-downwardapi' of Pod 'project-volume' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'project-volume-secret' of Pod 'project-volume' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'project-volume-configmap' of Pod 'project-volume' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'project-volume-downwardapi' of Pod 'project-volume' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'project-volume-secret' of Pod 'project-volume' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'project-volume-configmap' of Pod 'project-volume' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'project-volume-downwardapi' of Pod 'project-volume' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'project-volume-secret' of Pod 'project-volume' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'project-volume-configmap' of Pod 'project-volume' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'project-volume-downwardapi' of Pod 'project-volume' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'project-volume-secret' of Pod 'project-volume' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'project-volume-configmap' of Pod 'project-volume' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'project-volume-downwardapi' of Pod 'project-volume' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'project-volume-secret' of Pod 'project-volume' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'project-volume-configmap' of Pod 'project-volume' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'project-volume-downwardapi' of Pod 'project-volume' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'project-volume-secret' of Pod 'project-volume' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'project-volume-configmap' of Pod 'project-volume' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'project-volume-downwardapi' of Pod 'project-volume' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'project-volume-secret' of Pod 'project-volume' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'project-volume-configmap' of Pod 'project-volume' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'project-volume-downwardapi' of Pod 'project-volume' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'project-volume-secret' of Pod 'project-volume' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "project-volume-configmap" of pod "project-volume" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "project-volume-downwardapi" of pod "project-volume" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "project-volume-secret" of pod "project-volume" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod project-volume in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 projected-volume.yaml:4-8
────────────────────────────────────────
   4 ┌   name: project-volume
   5 │   labels:
   6 │     zone: us-est-coast
   7 │     cluster: test-cluster1
   8 └     rack: rack-22
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container project-volume in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 projected-volume.yaml:29-41
────────────────────────────────────────
  29 ┌     - name: project-volume-downwardapi
  30 │       image: busybox
  31 │       command: [ "sh", "-c" ]
  32 │       args:
  33 │         - while true; do
  34 │           if [[ -e /projected-volume-downwardapi/labels]];then
  35 │           echo -en '\n\n'; cat /projected-volume-downwardapi/labels; fi;
  36 │           sleep 5;
  37 └           done;
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container project-volume in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 projected-volume.yaml:20-28
────────────────────────────────────────
  20 ┌     - name: project-volume-configmap
  21 │       image: busybox
  22 │       args:
  23 │         - sleep
  24 │         - "86400"
  25 │       volumeMounts:
  26 │         - mountPath: "/projected-volume-configmap"
  27 │           name: configmap-volume
  28 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container project-volume in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 projected-volume.yaml:11-19
────────────────────────────────────────
  11 ┌     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 │           name: secret-volume
  19 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod project-volume in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 projected-volume.yaml:10-60
────────────────────────────────────────
  10 ┌   containers:
  11 │     - name: project-volume-secret
  12 │       image: busybox
  13 │       args:
  14 │         - sleep
  15 │         - "86400"
  16 │       volumeMounts:
  17 │         - mountPath: "/projected-volume-secret"
  18 └           name: secret-volume
  ..   
────────────────────────────────────────



projected.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'volumes-projected-container' of Pod 'volumes-projected-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volumes-projected-container' of Pod 'volumes-projected-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volumes-projected-container' of 'pod' 'volumes-projected-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volumes-projected-container' of Pod 'volumes-projected-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volumes-projected-container' of Pod 'volumes-projected-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volumes-projected-container' of Pod 'volumes-projected-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volumes-projected-container' of Pod 'volumes-projected-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volumes-projected-container' of Pod 'volumes-projected-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volumes-projected-container' of Pod 'volumes-projected-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volumes-projected-container' of Pod 'volumes-projected-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volumes-projected-container' of Pod 'volumes-projected-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volumes-projected-container' of Pod 'volumes-projected-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volumes-projected-container" of pod "volumes-projected-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volumes-projected-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 projected.yaml:6
────────────────────────────────────────
   6 [   name: volumes-projected-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volumes-projected-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 projected.yaml:9-17
────────────────────────────────────────
   9 ┌     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 │           mountPath: "/volumes-projected-volume-path"
  17 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volumes-projected-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 projected.yaml:8-41
────────────────────────────────────────
   8 ┌   containers:
   9 │     - command:
  10 │         - sleep
  11 │         - "3600"
  12 │       image: busybox
  13 │       name: volumes-projected-container
  14 │       volumeMounts:
  15 │         - name: volumes-projected-volume-mount
  16 └           mountPath: "/volumes-projected-volume-path"
  ..   
────────────────────────────────────────



projectmanager.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tango-projectmanager' of Deployment 'projectmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tango-projectmanager' of 'deployment' 'projectmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tango-projectmanager' of Deployment 'projectmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tango-projectmanager" of deployment "projectmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment projectmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 projectmanager.yaml:4
────────────────────────────────────────
   4 [   name: projectmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container projectmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 projectmanager.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment projectmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 projectmanager.yaml:14-54
────────────────────────────────────────
  14 ┌       nodeName: etri-1
  15 │       containers:
  16 │       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 └             memory: 2048Mi
  ..   
────────────────────────────────────────



projectmanager1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tango-projectmanager' of Deployment 'projectmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tango-projectmanager' of 'deployment' 'projectmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tango-projectmanager' of Deployment 'projectmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tango-projectmanager' of Deployment 'projectmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tango-projectmanager" of deployment "projectmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment projectmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 projectmanager1.yaml:4
────────────────────────────────────────
   4 [   name: projectmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container projectmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 projectmanager1.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /code
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment projectmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 projectmanager1.yaml:14-54
────────────────────────────────────────
  14 ┌       nodeName: etri-1
  15 │       containers:
  16 │       - name: tango-projectmanager
  17 │         image: tango_project_manager
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 1000m
  22 └             memory: 2048Mi
  ..   
────────────────────────────────────────



projet.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'pod-nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'pod-nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'pod-nginx' in 'projetdevopsk8s' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'pod-nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'pod-nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'pod-nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'pod-nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'pod-nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'pod-nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'pod-nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'pod-nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'pod-nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "pod-nginx" in "projetdevopsk8s" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-nginx in projetdevopsk8s namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 projet.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-nginx in projetdevopsk8s namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 projet.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: nginx
   9 └     image: nginx
────────────────────────────────────────



prom-deployment.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prom-deployment.yaml:18-38
────────────────────────────────────────
  18 ┌       serviceAccountName: prometheus
  19 │       containers:
  20 │         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prom-deployment.yaml:20-31
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus:v2.28.1  #v2.47.2
  22 │           args:
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 │           volumeMounts:
  28 └             - name: prometheus-config
  ..   
────────────────────────────────────────



prom-graf-sample-go-app.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sample-go' of Deployment 'sample-go' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 250m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sample-go' of Deployment 'sample-go' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 250m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sample-go' of 'deployment' 'sample-go' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 250m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sample-go' of Deployment 'sample-go' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 250m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sample-go' of Deployment 'sample-go' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 250m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sample-go' of Deployment 'sample-go' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 250m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sample-go' of Deployment 'sample-go' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 250m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 250m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sample-go" of deployment "sample-go" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 250m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 250m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment sample-go in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:4
────────────────────────────────────────
   4 [   name: sample-go
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sample-go in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 250m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment sample-go in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sample-go in deployment sample-go (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prom-graf-sample-go-app.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: sample-go
  18 │         image: chzbrgr71/sample-go:v1
  19 │         ports:
  20 │         - name: web
  21 │           containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 250m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────



prom-rbac.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prom-rbac.yaml:8-19
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - nodes
  12 │   - nodes/proxy
  13 │   - services
  14 │   - endpoints
  15 │   - pods
  16 └   verbs:
  ..   
────────────────────────────────────────



prom-statsd-sink_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'statsd-sink' of Deployment 'statsd-sink' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'statsd-sink' of Deployment 'statsd-sink' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'statsd-sink' of 'deployment' 'statsd-sink' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'statsd-sink' of Deployment 'statsd-sink' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'statsd-sink' of Deployment 'statsd-sink' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'statsd-sink' of Deployment 'statsd-sink' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'statsd-sink' of Deployment 'statsd-sink' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'statsd-sink' of Deployment 'statsd-sink' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'statsd-sink' of Deployment 'statsd-sink' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'statsd-sink' of Deployment 'statsd-sink' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'statsd-sink' of Deployment 'statsd-sink' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "statsd-sink" of deployment "statsd-sink" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment statsd-sink in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prom-statsd-sink_1.yaml:4-5
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 └   name: statsd-sink
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container statsd-sink in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment statsd-sink in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prom-statsd-sink_1.yaml:18-35
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 └           mountPath: /statsd-exporter/
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container statsd-sink in deployment statsd-sink (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prom-statsd-sink_1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: statsd-sink
  20 │         image: prom/statsd-exporter:v0.8.1
  21 │         args:
  22 │         - --statsd.listen-udp=:8125
  23 │         - --statsd.mapping-config=/statsd-exporter/mapping-config.yaml
  24 │         volumeMounts:
  25 │         - name: stats-exporter-mapping-config
  26 │           mountPath: /statsd-exporter/
  27 └           readOnly: true
────────────────────────────────────────



prome-rbac_1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prome-rbac_1.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - services
  11 │   - endpoints
  12 │   - pods
  13 │   - nodes/proxy
  14 └   - configmaps
  ..   
────────────────────────────────────────



prometheus-adapter-clusterRoleServerResources.yaml (kubernetes)
===============================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'resource-metrics-server-resources' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 prometheus-adapter-clusterRoleServerResources.yaml:11-16
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - metrics.k8s.io
  13 │   resources:
  14 │   - '*'
  15 │   verbs:
  16 └   - '*'
────────────────────────────────────────



prometheus-adapter-clusterRoleServerResources1.yaml (kubernetes)
================================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'resource-metrics-server-resources' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 prometheus-adapter-clusterRoleServerResources1.yaml:11-16
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - metrics.k8s.io
  13 │   resources:
  14 │   - '*'
  15 │   verbs:
  16 └   - '*'
────────────────────────────────────────



prometheus-adapter-clusterRoleServerResources2.yaml (kubernetes)
================================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'resource-metrics-server-resources' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 prometheus-adapter-clusterRoleServerResources2.yaml:11-16
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - metrics.k8s.io
  13 │   resources:
  14 │   - '*'
  15 │   verbs:
  16 └   - '*'
────────────────────────────────────────



prometheus-adapter-clusterRoleServerResources3.yaml (kubernetes)
================================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'resource-metrics-server-resources' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 prometheus-adapter-clusterRoleServerResources3.yaml:11-16
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - metrics.k8s.io
  13 │   resources:
  14 │   - '*'
  15 │   verbs:
  16 └   - '*'
────────────────────────────────────────



prometheus-adapter-clusterRoleServerResources4.yaml (kubernetes)
================================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'resource-metrics-server-resources' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 prometheus-adapter-clusterRoleServerResources4.yaml:11-16
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - metrics.k8s.io
  13 │   resources:
  14 │   - '*'
  15 │   verbs:
  16 └   - '*'
────────────────────────────────────────



prometheus-adapter-clusterRoleServerResources5.yaml (kubernetes)
================================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'resource-metrics-server-resources' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 prometheus-adapter-clusterRoleServerResources5.yaml:11-16
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - metrics.k8s.io
  13 │   resources:
  14 │   - '*'
  15 │   verbs:
  16 └   - '*'
────────────────────────────────────────



prometheus-adapter-deployment.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-adapter-deployment.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-adapter-deployment.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-adapter' of 'deployment' 'prometheus-adapter' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-adapter-deployment.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-adapter-deployment.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-adapter-deployment.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-adapter-deployment.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-adapter-deployment.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-adapter-deployment.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-adapter" of deployment "prometheus-adapter" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-adapter-deployment.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-adapter-deployment.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-adapter in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-adapter-deployment.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-adapter in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-adapter-deployment.yaml:30-70
────────────────────────────────────────
  30 ┌       containers:
  31 │       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 └         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  ..   
────────────────────────────────────────



prometheus-adapter-deployment1.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-adapter-deployment1.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-adapter-deployment1.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-adapter' of 'deployment' 'prometheus-adapter' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-adapter-deployment1.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-adapter-deployment1.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-adapter-deployment1.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-adapter-deployment1.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-adapter-deployment1.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-adapter-deployment1.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-adapter" of deployment "prometheus-adapter" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-adapter-deployment1.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-adapter-deployment1.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-adapter in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-adapter-deployment1.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-adapter in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-adapter-deployment1.yaml:30-70
────────────────────────────────────────
  30 ┌       containers:
  31 │       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 └         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  ..   
────────────────────────────────────────



prometheus-adapter-deployment2.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-adapter-deployment2.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-adapter-deployment2.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-adapter' of 'deployment' 'prometheus-adapter' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-adapter-deployment2.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-adapter-deployment2.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-adapter-deployment2.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-adapter-deployment2.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-adapter-deployment2.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-adapter-deployment2.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-adapter" of deployment "prometheus-adapter" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-adapter-deployment2.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-adapter-deployment2.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-adapter in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-adapter-deployment2.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-adapter in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-adapter-deployment2.yaml:30-70
────────────────────────────────────────
  30 ┌       containers:
  31 │       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 └         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  ..   
────────────────────────────────────────



prometheus-adapter-deployment3.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-adapter-deployment3.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-adapter-deployment3.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-adapter' of 'deployment' 'prometheus-adapter' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-adapter-deployment3.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-adapter-deployment3.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-adapter-deployment3.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-adapter-deployment3.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-adapter-deployment3.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-adapter-deployment3.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-adapter" of deployment "prometheus-adapter" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-adapter-deployment3.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-adapter-deployment3.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-adapter in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-adapter-deployment3.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-adapter in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-adapter-deployment3.yaml:30-70
────────────────────────────────────────
  30 ┌       containers:
  31 │       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 └         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  ..   
────────────────────────────────────────



prometheus-adapter-deployment4.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-adapter-deployment4.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-adapter-deployment4.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-adapter' of 'deployment' 'prometheus-adapter' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-adapter-deployment4.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-adapter-deployment4.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-adapter-deployment4.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-adapter-deployment4.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-adapter-deployment4.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-adapter-deployment4.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-adapter" of deployment "prometheus-adapter" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-adapter-deployment4.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-adapter-deployment4.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-adapter in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-adapter-deployment4.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-adapter in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-adapter-deployment4.yaml:30-70
────────────────────────────────────────
  30 ┌       containers:
  31 │       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc.cluster.local:9090/
  37 │         - --secure-port=6443
  38 └         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  ..   
────────────────────────────────────────



prometheus-adapter-deployment5.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-adapter-deployment5.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-adapter-deployment5.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-adapter' of 'deployment' 'prometheus-adapter' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-adapter-deployment5.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-adapter-deployment5.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-adapter-deployment5.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-adapter-deployment5.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-adapter' of Deployment 'prometheus-adapter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-adapter-deployment5.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-adapter-deployment5.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-adapter" of deployment "prometheus-adapter" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-adapter-deployment5.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-adapter-deployment5.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-adapter in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-adapter-deployment5.yaml:31-59
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  39 └         image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-adapter in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-adapter-deployment5.yaml:30-70
────────────────────────────────────────
  30 ┌       containers:
  31 │       - args:
  32 │         - --cert-dir=/var/run/serving-cert
  33 │         - --config=/etc/adapter/config.yaml
  34 │         - --logtostderr=true
  35 │         - --metrics-relist-interval=1m
  36 │         - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
  37 │         - --secure-port=6443
  38 └         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
  ..   
────────────────────────────────────────



prometheus-bundle_16.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 109, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 prometheus-bundle_16.yaml:32-38
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - configmaps
  36 │   - secrets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-bundle_16.yaml:26-31
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - apps
  28 │   resources:
  29 │   - statefulsets
  30 │   verbs:
  31 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-bundle_16.yaml:32-38
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - configmaps
  36 │   - secrets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-bundle_16.yaml:26-31
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - apps
  28 │   resources:
  29 │   - statefulsets
  30 │   verbs:
  31 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-bundle_16.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - pods
  43 │   verbs:
  44 │   - list
  45 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus-bundle_16.yaml:32-38
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - configmaps
  36 │   - secrets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 prometheus-bundle_16.yaml:46-56
────────────────────────────────────────
  46 ┌ - apiGroups:
  47 │   - ''
  48 │   resources:
  49 │   - services
  50 │   - services/finalizers
  51 │   - endpoints
  52 │   verbs:
  53 │   - get
  54 └   - create
  ..   
────────────────────────────────────────



prometheus-bundle_17.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-bundle_17.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --kubelet-service=kube-system/kubelet
  26 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.44.1
  27 │         image: quay.io/prometheus-operator/prometheus-operator:v0.44.1
  28 │         name: prometheus-operator
  29 │         ports:
  30 │         - containerPort: 8080
  31 │           name: http
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-operator' of 'deployment' 'prometheus-operator' in 'prometheus-monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-bundle_17.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --kubelet-service=kube-system/kubelet
  26 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.44.1
  27 │         image: quay.io/prometheus-operator/prometheus-operator:v0.44.1
  28 │         name: prometheus-operator
  29 │         ports:
  30 │         - containerPort: 8080
  31 │           name: http
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-bundle_17.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --kubelet-service=kube-system/kubelet
  26 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.44.1
  27 │         image: quay.io/prometheus-operator/prometheus-operator:v0.44.1
  28 │         name: prometheus-operator
  29 │         ports:
  30 │         - containerPort: 8080
  31 │           name: http
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-bundle_17.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --kubelet-service=kube-system/kubelet
  26 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.44.1
  27 │         image: quay.io/prometheus-operator/prometheus-operator:v0.44.1
  28 │         name: prometheus-operator
  29 │         ports:
  30 │         - containerPort: 8080
  31 │           name: http
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-bundle_17.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --kubelet-service=kube-system/kubelet
  26 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.44.1
  27 │         image: quay.io/prometheus-operator/prometheus-operator:v0.44.1
  28 │         name: prometheus-operator
  29 │         ports:
  30 │         - containerPort: 8080
  31 │           name: http
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-operator" of deployment "prometheus-operator" in "prometheus-monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-bundle_17.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --kubelet-service=kube-system/kubelet
  26 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.44.1
  27 │         image: quay.io/prometheus-operator/prometheus-operator:v0.44.1
  28 │         name: prometheus-operator
  29 │         ports:
  30 │         - containerPort: 8080
  31 │           name: http
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-bundle_17.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --kubelet-service=kube-system/kubelet
  26 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.44.1
  27 │         image: quay.io/prometheus-operator/prometheus-operator:v0.44.1
  28 │         name: prometheus-operator
  29 │         ports:
  30 │         - containerPort: 8080
  31 │           name: http
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-operator in deployment prometheus-operator (namespace: prometheus-monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-bundle_17.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --kubelet-service=kube-system/kubelet
  26 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.44.1
  27 │         image: quay.io/prometheus-operator/prometheus-operator:v0.44.1
  28 │         name: prometheus-operator
  29 │         ports:
  30 │         - containerPort: 8080
  31 │           name: http
  32 └         resources:
  ..   
────────────────────────────────────────



prometheus-cluster-role.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus-cluster-role.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups: [""]
   7 │   resources:
   8 │   - node
   9 │   - pod
  10 │   - service
  11 │   - endpoint
  12 │   - nodes
  13 │   - nodes/proxy
  14 └   - services
  ..   
────────────────────────────────────────



prometheus-cluster-role1.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus-cluster-role1.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - nodes
  11 │   - nodes/proxy
  12 │   - services
  13 │   - endpoints
  14 │   - pods
  15 └   verbs:
  ..   
────────────────────────────────────────



prometheus-cluster-roles.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus-cluster-roles.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - nodes
  11 │   - nodes/proxy
  12 │   - services
  13 │   - endpoints
  14 │   - pods
  15 └   verbs:
  ..   
────────────────────────────────────────



prometheus-clusterrole17.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus-clusterrole17.yaml:9-11
────────────────────────────────────────
   9 ┌ - apiGroups: [""]
  10 │   resources: ["nodes", "nodes/proxy"]
  11 └   verbs: ["get", "list", "watch"]
────────────────────────────────────────



prometheus-cr2.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-discovery' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 prometheus-cr2.yaml:9-18
────────────────────────────────────────
   9 ┌ - apiGroups: [""]
  10 │   resources:
  11 │   - nodes
  12 │   - nodes/metrics
  13 │   - services
  14 │   - endpoints
  15 │   - pods
  16 │   - configmaps
  17 │   - secrets
  18 └   verbs: ["get", "list", "watch"]
────────────────────────────────────────



prometheus-daemonset.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'node-exporter' of 'daemonset' 'node-exporter' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'node-exporter' of DaemonSet 'node-exporter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'node-exporter' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 prometheus-daemonset.yaml:10-55
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/component: exporter
  13 │       app.kubernetes.io/name: node-exporter
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         app.kubernetes.io/component: exporter
  18 └         app.kubernetes.io/name: node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "node-exporter" of daemonset "node-exporter" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container node-exporter in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset node-exporter in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-daemonset.yaml:20-55
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 └         name: node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset node-exporter in monitoring namespace shouldn't have volumes set to {"/", "/sys"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 prometheus-daemonset.yaml:10-55
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/component: exporter
  13 │       app.kubernetes.io/name: node-exporter
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         app.kubernetes.io/component: exporter
  18 └         app.kubernetes.io/name: node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container node-exporter in daemonset node-exporter (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-daemonset.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────



prometheus-daemonset1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'node-exporter' of 'daemonset' 'node-exporter' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'node-exporter' of DaemonSet 'node-exporter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'node-exporter' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 prometheus-daemonset1.yaml:10-55
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/component: exporter
  13 │       app.kubernetes.io/name: node-exporter
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         app.kubernetes.io/component: exporter
  18 └         app.kubernetes.io/name: node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "node-exporter" of daemonset "node-exporter" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container node-exporter in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset node-exporter in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-daemonset1.yaml:20-55
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 └         name: node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset node-exporter in monitoring namespace shouldn't have volumes set to {"/", "/sys"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 prometheus-daemonset1.yaml:10-55
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/component: exporter
  13 │       app.kubernetes.io/name: node-exporter
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         app.kubernetes.io/component: exporter
  18 └         app.kubernetes.io/name: node-exporter
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container node-exporter in daemonset node-exporter (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-daemonset1.yaml:21-48
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --path.sysfs=/host/sys
  23 │         - --path.rootfs=/host/root
  24 │         - --no-collector.wifi
  25 │         - --no-collector.hwmon
  26 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  27 │         - --collector.netclass.ignored-devices=^(veth.*)$
  28 │         name: node-exporter
  29 └         image: prom/node-exporter
  ..   
────────────────────────────────────────



prometheus-depl1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-depl1.yaml:4
────────────────────────────────────────
   4 [   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-depl1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-depl1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: realshinchoku/ddhc-prometheus
  18 │         ports:
  19 └         - containerPort: 9090
────────────────────────────────────────



prometheus-depl2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-depl2.yaml:4
────────────────────────────────────────
   4 [   name: prometheus-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-depl2.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 └           image: prom/prometheus
────────────────────────────────────────



prometheus-deploy.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deploy.yaml:4
────────────────────────────────────────
   4 [   name: prometheus-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deploy.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 └             - name: prometheus-storage
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deploy.yaml:16-24
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config
  22 │               mountPath: /etc/prometheus
  23 │             - name: prometheus-storage
  24 └               mountPath: /prometheus
────────────────────────────────────────



prometheus-deploy2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deploy2.yaml:4
────────────────────────────────────────
   4 [   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deploy2.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deploy2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-persistent-storage
  22 │           mountPath: /etc/prometheus
  23 │         args:
  24 └         - "--config.file=/etc/prometheus/prometheus.yml"
────────────────────────────────────────



prometheus-deployment.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment1.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment1.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment10.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment10.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment11.yaml (kubernetes)
=========================================
Tests: 133 (SUCCESSES: 98, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment11.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rules-git-sync' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment11.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment11.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rules-git-sync' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment11.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-permissions' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment11.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment11.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rules-git-sync' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment11.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment11.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rules-git-sync' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment11.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment11.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rules-git-sync' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment11.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment11.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment11.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment11.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rules-git-sync" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment11.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-permissions" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment11.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment11.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment11.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment11.yaml:21-109
────────────────────────────────────────
  21 ┌       initContainers:
  22 │         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 │               mountPath: /data
  28 │       containers:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment11.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rules-git-sync in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment11.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────



prometheus-deployment12.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment12.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment12.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment13.yaml:18-46
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment13.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────



prometheus-deployment14.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment14.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment14.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment15.yaml:18-46
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment15.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────



prometheus-deployment16.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 prometheus-deployment16.yaml:30
────────────────────────────────────────
  30 [          runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment16.yaml:26-53
────────────────────────────────────────
  26 ┌       containers:
  27 │       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 └           - '--config.file=/etc/prometheus/prometheus.yml'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment16.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────



prometheus-deployment17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment17.yaml:18-46
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment17.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────



prometheus-deployment18_3.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus-deployment18_3.yaml:12-26
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - nodes
  16 │   - nodes/proxy
  17 │   - nodes/metrics
  18 │   - services
  19 │   - endpoints
  20 └   - pods
  ..   
────────────────────────────────────────



prometheus-deployment18_6.yaml (kubernetes)
===========================================
Tests: 126 (SUCCESSES: 102, FAILURES: 24)
Failures: 24 (UNKNOWN: 0, LOW: 16, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment18_6.yaml:42-78
────────────────────────────────────────
  42 ┌       - name: prometheus-server
  43 │         image: prom/prometheus:v2.26.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         args:
  46 │         - --storage.tsdb.retention.time=15d
  47 │         - --config.file=/etc/config/prometheus.yml
  48 │         - --storage.tsdb.path=/data
  49 │         - --web.console.libraries=/etc/prometheus/console_libraries
  50 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment18_6.yaml:31-41
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment18_6.yaml:42-78
────────────────────────────────────────
  42 ┌       - name: prometheus-server
  43 │         image: prom/prometheus:v2.26.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         args:
  46 │         - --storage.tsdb.retention.time=15d
  47 │         - --config.file=/etc/config/prometheus.yml
  48 │         - --storage.tsdb.path=/data
  49 │         - --web.console.libraries=/etc/prometheus/console_libraries
  50 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment18_6.yaml:31-41
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment18_6.yaml:42-78
────────────────────────────────────────
  42 ┌       - name: prometheus-server
  43 │         image: prom/prometheus:v2.26.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         args:
  46 │         - --storage.tsdb.retention.time=15d
  47 │         - --config.file=/etc/config/prometheus.yml
  48 │         - --storage.tsdb.path=/data
  49 │         - --web.console.libraries=/etc/prometheus/console_libraries
  50 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server-configmap-reload' of 'deployment' 'prometheus' in 'istio-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment18_6.yaml:31-41
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment18_6.yaml:42-78
────────────────────────────────────────
  42 ┌       - name: prometheus-server
  43 │         image: prom/prometheus:v2.26.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         args:
  46 │         - --storage.tsdb.retention.time=15d
  47 │         - --config.file=/etc/config/prometheus.yml
  48 │         - --storage.tsdb.path=/data
  49 │         - --web.console.libraries=/etc/prometheus/console_libraries
  50 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment18_6.yaml:31-41
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment18_6.yaml:42-78
────────────────────────────────────────
  42 ┌       - name: prometheus-server
  43 │         image: prom/prometheus:v2.26.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         args:
  46 │         - --storage.tsdb.retention.time=15d
  47 │         - --config.file=/etc/config/prometheus.yml
  48 │         - --storage.tsdb.path=/data
  49 │         - --web.console.libraries=/etc/prometheus/console_libraries
  50 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment18_6.yaml:31-41
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment18_6.yaml:42-78
────────────────────────────────────────
  42 ┌       - name: prometheus-server
  43 │         image: prom/prometheus:v2.26.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         args:
  46 │         - --storage.tsdb.retention.time=15d
  47 │         - --config.file=/etc/config/prometheus.yml
  48 │         - --storage.tsdb.path=/data
  49 │         - --web.console.libraries=/etc/prometheus/console_libraries
  50 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment18_6.yaml:31-41
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment18_6.yaml:42-78
────────────────────────────────────────
  42 ┌       - name: prometheus-server
  43 │         image: prom/prometheus:v2.26.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         args:
  46 │         - --storage.tsdb.retention.time=15d
  47 │         - --config.file=/etc/config/prometheus.yml
  48 │         - --storage.tsdb.path=/data
  49 │         - --web.console.libraries=/etc/prometheus/console_libraries
  50 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment18_6.yaml:31-41
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment18_6.yaml:42-78
────────────────────────────────────────
  42 ┌       - name: prometheus-server
  43 │         image: prom/prometheus:v2.26.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         args:
  46 │         - --storage.tsdb.retention.time=15d
  47 │         - --config.file=/etc/config/prometheus.yml
  48 │         - --storage.tsdb.path=/data
  49 │         - --web.console.libraries=/etc/prometheus/console_libraries
  50 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-server-configmap-reload' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment18_6.yaml:31-41
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment18_6.yaml:42-78
────────────────────────────────────────
  42 ┌       - name: prometheus-server
  43 │         image: prom/prometheus:v2.26.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         args:
  46 │         - --storage.tsdb.retention.time=15d
  47 │         - --config.file=/etc/config/prometheus.yml
  48 │         - --storage.tsdb.path=/data
  49 │         - --web.console.libraries=/etc/prometheus/console_libraries
  50 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment18_6.yaml:31-41
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment18_6.yaml:42-78
────────────────────────────────────────
  42 ┌       - name: prometheus-server
  43 │         image: prom/prometheus:v2.26.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         args:
  46 │         - --storage.tsdb.retention.time=15d
  47 │         - --config.file=/etc/config/prometheus.yml
  48 │         - --storage.tsdb.path=/data
  49 │         - --web.console.libraries=/etc/prometheus/console_libraries
  50 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server-configmap-reload" of deployment "prometheus" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment18_6.yaml:31-41
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment18_6.yaml:31-41
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment18_6.yaml:42-78
────────────────────────────────────────
  42 ┌       - name: prometheus-server
  43 │         image: prom/prometheus:v2.26.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         args:
  46 │         - --storage.tsdb.retention.time=15d
  47 │         - --config.file=/etc/config/prometheus.yml
  48 │         - --storage.tsdb.path=/data
  49 │         - --web.console.libraries=/etc/prometheus/console_libraries
  50 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment18_6.yaml:42-78
────────────────────────────────────────
  42 ┌       - name: prometheus-server
  43 │         image: prom/prometheus:v2.26.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         args:
  46 │         - --storage.tsdb.retention.time=15d
  47 │         - --config.file=/etc/config/prometheus.yml
  48 │         - --storage.tsdb.path=/data
  49 │         - --web.console.libraries=/etc/prometheus/console_libraries
  50 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server-configmap-reload in deployment prometheus (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment18_6.yaml:31-41
────────────────────────────────────────
  31 ┌       - name: prometheus-server-configmap-reload
  32 │         image: jimmidyson/configmap-reload:v0.5.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - --volume-dir=/etc/config
  36 │         - --webhook-url=http://127.0.0.1:9090/-/reload
  37 │         resources: {}
  38 │         volumeMounts:
  39 └         - name: config-volume
  ..   
────────────────────────────────────────



prometheus-deployment19_2.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-server' of Deployment 'otel-prometheus-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment19_2.yaml:33-74
────────────────────────────────────────
  33 ┌       - name: prometheus-server
  34 │         image: quay.io/prometheus/prometheus:v2.47.2
  35 │         imagePullPolicy: IfNotPresent
  36 │         args:
  37 │         - --storage.tsdb.retention.time=15d
  38 │         - --config.file=/etc/config/prometheus.yml
  39 │         - --storage.tsdb.path=/data
  40 │         - --web.console.libraries=/etc/prometheus/console_libraries
  41 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-server' of Deployment 'otel-prometheus-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment19_2.yaml:33-74
────────────────────────────────────────
  33 ┌       - name: prometheus-server
  34 │         image: quay.io/prometheus/prometheus:v2.47.2
  35 │         imagePullPolicy: IfNotPresent
  36 │         args:
  37 │         - --storage.tsdb.retention.time=15d
  38 │         - --config.file=/etc/config/prometheus.yml
  39 │         - --storage.tsdb.path=/data
  40 │         - --web.console.libraries=/etc/prometheus/console_libraries
  41 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-server' of 'deployment' 'otel-prometheus-server' in 's-otel-demo' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment19_2.yaml:33-74
────────────────────────────────────────
  33 ┌       - name: prometheus-server
  34 │         image: quay.io/prometheus/prometheus:v2.47.2
  35 │         imagePullPolicy: IfNotPresent
  36 │         args:
  37 │         - --storage.tsdb.retention.time=15d
  38 │         - --config.file=/etc/config/prometheus.yml
  39 │         - --storage.tsdb.path=/data
  40 │         - --web.console.libraries=/etc/prometheus/console_libraries
  41 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-server' of Deployment 'otel-prometheus-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment19_2.yaml:33-74
────────────────────────────────────────
  33 ┌       - name: prometheus-server
  34 │         image: quay.io/prometheus/prometheus:v2.47.2
  35 │         imagePullPolicy: IfNotPresent
  36 │         args:
  37 │         - --storage.tsdb.retention.time=15d
  38 │         - --config.file=/etc/config/prometheus.yml
  39 │         - --storage.tsdb.path=/data
  40 │         - --web.console.libraries=/etc/prometheus/console_libraries
  41 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-server' of Deployment 'otel-prometheus-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment19_2.yaml:33-74
────────────────────────────────────────
  33 ┌       - name: prometheus-server
  34 │         image: quay.io/prometheus/prometheus:v2.47.2
  35 │         imagePullPolicy: IfNotPresent
  36 │         args:
  37 │         - --storage.tsdb.retention.time=15d
  38 │         - --config.file=/etc/config/prometheus.yml
  39 │         - --storage.tsdb.path=/data
  40 │         - --web.console.libraries=/etc/prometheus/console_libraries
  41 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-server' of Deployment 'otel-prometheus-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment19_2.yaml:33-74
────────────────────────────────────────
  33 ┌       - name: prometheus-server
  34 │         image: quay.io/prometheus/prometheus:v2.47.2
  35 │         imagePullPolicy: IfNotPresent
  36 │         args:
  37 │         - --storage.tsdb.retention.time=15d
  38 │         - --config.file=/etc/config/prometheus.yml
  39 │         - --storage.tsdb.path=/data
  40 │         - --web.console.libraries=/etc/prometheus/console_libraries
  41 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-server' of Deployment 'otel-prometheus-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment19_2.yaml:33-74
────────────────────────────────────────
  33 ┌       - name: prometheus-server
  34 │         image: quay.io/prometheus/prometheus:v2.47.2
  35 │         imagePullPolicy: IfNotPresent
  36 │         args:
  37 │         - --storage.tsdb.retention.time=15d
  38 │         - --config.file=/etc/config/prometheus.yml
  39 │         - --storage.tsdb.path=/data
  40 │         - --web.console.libraries=/etc/prometheus/console_libraries
  41 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment19_2.yaml:33-74
────────────────────────────────────────
  33 ┌       - name: prometheus-server
  34 │         image: quay.io/prometheus/prometheus:v2.47.2
  35 │         imagePullPolicy: IfNotPresent
  36 │         args:
  37 │         - --storage.tsdb.retention.time=15d
  38 │         - --config.file=/etc/config/prometheus.yml
  39 │         - --storage.tsdb.path=/data
  40 │         - --web.console.libraries=/etc/prometheus/console_libraries
  41 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-server" of deployment "otel-prometheus-server" in "s-otel-demo" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment19_2.yaml:33-74
────────────────────────────────────────
  33 ┌       - name: prometheus-server
  34 │         image: quay.io/prometheus/prometheus:v2.47.2
  35 │         imagePullPolicy: IfNotPresent
  36 │         args:
  37 │         - --storage.tsdb.retention.time=15d
  38 │         - --config.file=/etc/config/prometheus.yml
  39 │         - --storage.tsdb.path=/data
  40 │         - --web.console.libraries=/etc/prometheus/console_libraries
  41 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment19_2.yaml:33-74
────────────────────────────────────────
  33 ┌       - name: prometheus-server
  34 │         image: quay.io/prometheus/prometheus:v2.47.2
  35 │         imagePullPolicy: IfNotPresent
  36 │         args:
  37 │         - --storage.tsdb.retention.time=15d
  38 │         - --config.file=/etc/config/prometheus.yml
  39 │         - --storage.tsdb.path=/data
  40 │         - --web.console.libraries=/etc/prometheus/console_libraries
  41 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-server in deployment otel-prometheus-server (namespace: s-otel-demo) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment19_2.yaml:33-74
────────────────────────────────────────
  33 ┌       - name: prometheus-server
  34 │         image: quay.io/prometheus/prometheus:v2.47.2
  35 │         imagePullPolicy: IfNotPresent
  36 │         args:
  37 │         - --storage.tsdb.retention.time=15d
  38 │         - --config.file=/etc/config/prometheus.yml
  39 │         - --storage.tsdb.path=/data
  40 │         - --web.console.libraries=/etc/prometheus/console_libraries
  41 └         - --web.console.templates=/etc/prometheus/consoles
  ..   
────────────────────────────────────────



prometheus-deployment2.yaml (kubernetes)
========================================
Tests: 133 (SUCCESSES: 98, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment2.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rules-git-sync' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment2.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment2.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rules-git-sync' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment2.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-permissions' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment2.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment2.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rules-git-sync' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment2.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment2.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rules-git-sync' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment2.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment2.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rules-git-sync' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment2.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-permissions' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment2.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment2.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment2.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rules-git-sync" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment2.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-permissions" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment2.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment2.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment2.yaml:22-27
────────────────────────────────────────
  22 ┌         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment2.yaml:21-109
────────────────────────────────────────
  21 ┌       initContainers:
  22 │         - name: volume-permissions
  23 │           image: busybox:1.37
  24 │           command: [sh, -c, chown nobody:nobody /data]
  25 │           volumeMounts:
  26 │             - name: prometheus-storage-volume
  27 │               mountPath: /data
  28 │       containers:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment2.yaml:29-65
────────────────────────────────────────
  29 ┌         - name: prometheus
  30 │           image: prom/prometheus:v3.2.1
  31 │           args:
  32 │             - --config.file=/etc/prometheus/prometheus.yml
  33 │             - --storage.tsdb.path=/prometheus/
  34 │             - --storage.tsdb.retention.size=50GB
  35 │             - --enable-feature=auto-gomaxprocs,new-service-discovery-manager,memory-snapshot-on-shutdown
  36 │             - --web.external-url=https://prometheus.ing.k3s.brickyard.whitestar.systems
  37 └             - --web.enable-lifecycle
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rules-git-sync in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment2.yaml:66-93
────────────────────────────────────────
  66 ┌         - name: rules-git-sync
  67 │           image: registry.k8s.io/git-sync/git-sync:v4.4.0
  68 │           args:
  69 │             - --repo=https://github.com/tpaulus/kube-config.git
  70 │             - --root=/run/prometheus-rules
  71 │             - --link=kube-config
  72 │             - --period=1m
  73 │             - --webhook-url=http://127.0.0.1:9090/-/reload
  74 └             - --webhook-method=POST
  ..   
────────────────────────────────────────



prometheus-deployment20.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment20.yaml:4-6
────────────────────────────────────────
   4 ┌   name: prometheus-deployment
   5 │   labels:
   6 └     app: prometheus-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment20.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 └             hostPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment20.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: prometheus
  19 │         image: prom/prometheus:v2.35.0
  20 │         args:
  21 │           - "--config.file=/etc/prometheus/prometheus.yml"
  22 │           - "--storage.tsdb.path=/prometheus/"
  23 │         ports:
  24 │           - containerPort: 9090
  25 │             hostPort: 9090
  26 └             protocol: TCP
  ..   
────────────────────────────────────────



prometheus-deployment21.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'prometheus' of Deployment 'prometheus' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment21.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert -f compose.yaml
   6 │     kompose.version: 1.31.2 (a92241f79)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: prometheus
  10 └   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment21.yaml:28-50
────────────────────────────────────────
  28 ┌       containers:
  29 │         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment21.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────



prometheus-deployment22.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment22.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: prometheus
   6 └   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment22.yaml:17-31
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 └             - mountPath: /prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment22.yaml:18-26
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │           args:
  23 │             - --config.file=/etc/prometheus/prometheus.yml
  24 │           volumeMounts:
  25 │             - mountPath: /prometheus
  26 └               name: prom-data
────────────────────────────────────────



prometheus-deployment23.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'prometheus' of Deployment 'prometheus' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment23.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert
   6 │     kompose.version: 1.31.2 (a92241f79)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: prometheus
  10 └   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment23.yaml:28-50
────────────────────────────────────────
  28 ┌       containers:
  29 │         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment23.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────



prometheus-deployment24.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment24.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment24.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment25.yaml (kubernetes)
=========================================
Tests: 130 (SUCCESSES: 95, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-data-permission-fix' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-data-permission-fix' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-data-permission-fix' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-data-permission-fix' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus-data-permission-fix' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus-data-permission-fix' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-data-permission-fix' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-data-permission-fix' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-data-permission-fix' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-data-permission-fix' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus-data-permission-fix' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-data-permission-fix' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'prometheus' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 prometheus-deployment25.yaml:6-49
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: prometheus
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: prometheus
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-data-permission-fix" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment25.yaml:4
────────────────────────────────────────
   4 [   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment25.yaml:16-21
────────────────────────────────────────
  16 ┌         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 └             mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment25.yaml:15-49
────────────────────────────────────────
  15 ┌       initContainers:
  16 │         - name: prometheus-data-permission-fix
  17 │           image: busybox
  18 │           command: ["/bin/chmod","-R","777", "/prometheus"]
  19 │           volumeMounts:
  20 │           - name: prometheus-storage
  21 │             mountPath: /prometheus
  22 │       containers:
  23 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment25.yaml:23-38
────────────────────────────────────────
  23 ┌         - name: prometheus
  24 │           image: prom/prometheus:v2.30.3
  25 │           args:
  26 │             - --config.file=/etc/prometheus/prometheus.yml
  27 │             - --storage.tsdb.path=/prometheus
  28 │             - --web.console.libraries=/usr/share/prometheus/console_libraries
  29 │             - --web.console.templates=/usr/share/prometheus/consoles
  30 │           ports:
  31 └             - containerPort: 9090
  ..   
────────────────────────────────────────



prometheus-deployment26.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment26.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment26.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment27.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'prometheus' of Deployment 'prometheus' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment27.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert
   6 │     kompose.version: 1.31.2 (a92241f79)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: prometheus
  10 └   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment27.yaml:28-50
────────────────────────────────────────
  28 ┌       containers:
  29 │         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment27.yaml:29-42
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --config.file=/etc/prometheus/prometheus.yml
  31 │           image: prom/prometheus
  32 │           name: prometheus
  33 │           ports:
  34 │             - containerPort: 9090
  35 │               hostPort: 9090
  36 │               protocol: TCP
  37 └           resources: {}
  ..   
────────────────────────────────────────



prometheus-deployment28.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment28.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment28.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment29.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment29.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment29.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment3.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment3.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment30.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment30.yaml:4
────────────────────────────────────────
   4 [   name: prometheus-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment30.yaml:14-29
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 └         - name: prometheus-data-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment30.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: prometheus
  16 │         image: prom/prometheus:v2.31.0
  17 │         ports:
  18 │         - containerPort: 9090
  19 │         volumeMounts:
  20 │         - name: prometheus-config-volume
  21 │           mountPath: /etc/prometheus/
  22 │         - name: prometheus-data-volume
  23 └           mountPath: /prometheus/data/
────────────────────────────────────────



prometheus-deployment31.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment31.yaml:4-6
────────────────────────────────────────
   4 ┌   name: prometheus
   5 │   labels:
   6 └     app: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment31.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment31.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: prometheus
  19 │           image: prom/prometheus:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 9090
────────────────────────────────────────



prometheus-deployment32.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'prometheus' of Deployment 'prometheus' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment32.yaml:4
────────────────────────────────────────
   4 [   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment32.yaml:17-31
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 └             - mountPath: /etc/prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment32.yaml:18-26
────────────────────────────────────────
  18 ┌         - image: prom/prometheus:latest
  19 │           name: prometheus
  20 │           ports:
  21 │             - containerPort: 9090
  22 │               hostPort: 9090
  23 │               protocol: TCP
  24 │           volumeMounts:
  25 │             - mountPath: /etc/prometheus
  26 └               name: prometheus-configmap
────────────────────────────────────────



prometheus-deployment33.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'prometheus' of Deployment 'prometheus' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment33.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml
   6 │     kompose.version: 1.32.0 (765fde254)
   7 │   labels:
   8 │     io.kompose.service: prometheus
   9 └   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment33.yaml:26-40
────────────────────────────────────────
  26 ┌       containers:
  27 │         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 └             - mountPath: /etc/prometheus/prometheus.yml
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment33.yaml:27-35
────────────────────────────────────────
  27 ┌         - image: prom/prometheus
  28 │           name: prometheus
  29 │           ports:
  30 │             - containerPort: 9090
  31 │               hostPort: 9090
  32 │               protocol: TCP
  33 │           volumeMounts:
  34 │             - mountPath: /etc/prometheus/prometheus.yml
  35 └               name: prometheus-claim0
────────────────────────────────────────



prometheus-deployment34_1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment34_1.yaml:4
────────────────────────────────────────
   4 [   name: prometheus-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment34_1.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment34_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────



prometheus-deployment35.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0116 (LOW): deployment prometheus in monitoring namespace should set spec.securityContext.runAsGroup, spec.securityContext.supplementalGroups[*] and spec.securityContext.fsGroup to integer greater than 0
════════════════════════════════════════
According to pod security standard 'Non-root groups', containers should be forbidden from running with a root primary or supplementary GID.

See https://avd.aquasec.com/misconfig/ksv116
────────────────────────────────────────
 prometheus-deployment35.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment35.yaml:24-42
────────────────────────────────────────
  24 ┌         - name: prometheus
  25 │           image: prom/prometheus
  26 │           args:
  27 │             - "--config.file=/etc/prometheus/prometheus.yml"
  28 │             - "--storage.tsdb.path=/prometheus/"
  29 │           imagePullPolicy: IfNotPresent
  30 │           ports:
  31 │             - containerPort: 9090
  32 └               name: http-prometheus
  ..   
────────────────────────────────────────



prometheus-deployment36.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment36.yaml:4
────────────────────────────────────────
   4 [   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment36.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment36.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: prometheus
  17 │           image: prom/prometheus
  18 │           ports:
  19 │             - containerPort: 9090
  20 │           volumeMounts:
  21 │             - name: prometheus-config-volume
  22 │               mountPath: /etc/prometheus/prometheus.yml
  23 └               subPath: prometheus.yml
────────────────────────────────────────



prometheus-deployment37.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment37.yaml:47-61
────────────────────────────────────────
  47 ┌       - name: prometheus
  48 │         image: prom/prometheus
  49 │         imagePullPolicy: IfNotPresent
  50 │         args:
  51 │           - '--storage.tsdb.retention=6h'
  52 │           - '--storage.tsdb.path=/prometheus'
  53 │           - '--config.file=/etc/prometheus/prometheus.yml'
  54 │         ports:
  55 └         - name: web
  ..   
────────────────────────────────────────



prometheus-deployment38.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment38.yaml:18-44
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment38.yaml:19-37
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment39.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment39.yaml:4
────────────────────────────────────────
   4 [   name: prometheus-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment39.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment39.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         - name: prometheus-data-volume
  24 └           mountPath: /prometheus
────────────────────────────────────────



prometheus-deployment4.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment4.yaml:18-46
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────



prometheus-deployment40.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment40.yaml:4
────────────────────────────────────────
   4 [   name: prometheus-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment40.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment40.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:latest
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 └           mountPath: /etc/prometheus/prometheus.yml
────────────────────────────────────────



prometheus-deployment41.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment41.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment41.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment42.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment42.yaml:4-6
────────────────────────────────────────
   4 ┌   name: prometheus
   5 │   labels:
   6 └     app: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment42.yaml:18-31
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 └             - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment42.yaml:19-27
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │           ports:
  24 │             - containerPort: 9090
  25 │           volumeMounts:
  26 │             - name: config-volume
  27 └               mountPath: /etc/prometheus
────────────────────────────────────────



prometheus-deployment43.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment43.yaml:4-11
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o ./kubernetes/
   6 │     kompose.security-context.fsgroup: "1000"
   7 │     kompose.service.type: loadbalancer
   8 │     kompose.version: 1.34.0 (cbf2835db)
   9 │   labels:
  10 │     io.kompose.service: prometheus
  11 └   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment43.yaml:30-42
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --config.file=/etc/prometheus/prometheus.yml
  32 │             - --storage.tsdb.path=/prometheus
  33 │             - --web.console.libraries=/etc/prometheus/console_libraries
  34 │             - --web.console.templates=/etc/prometheus/consoles
  35 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/prometheus:latest
  36 │           name: prometheus
  37 │           ports:
  38 └             - containerPort: 9090
  ..   
────────────────────────────────────────



prometheus-deployment44.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment44.yaml:4
────────────────────────────────────────
   4 [   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment44.yaml:15-34
────────────────────────────────────────
  15 ┌       serviceAccountName: prometheus-service-account
  16 │       containers:
  17 │       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 └         - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment44.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - "--config.file=/etc/prometheus/prometheus.yml"
  21 │         - "--storage.tsdb.path=/prometheus"
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: config-volume
  ..   
────────────────────────────────────────



prometheus-deployment46.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment46.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment46.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment47.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment47.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment47.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment48.yaml (kubernetes)
=========================================
Tests: 131 (SUCCESSES: 95, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'prometheus' of Deployment 'prometheus' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'prometheus' of Deployment 'prometheus' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment48.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: ./kompose convert --out yamls
   6 │     kompose.version: 1.32.0 (765fde254)
   7 │   labels:
   8 │     io.kompose.service: prometheus
   9 └   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment48.yaml:27-40
────────────────────────────────────────
  27 ┌         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 │             ]
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment48.yaml:26-72
────────────────────────────────────────
  26 ┌       initContainers:
  27 │         - name: init-prometheus
  28 │           image: busybox:1.28
  29 │           command:
  30 │             [
  31 │               "sh",
  32 │               "-c",
  33 │               "cat /temp/prometheus.yml > /etc/prometheus/prometheus.yml",
  34 └             ]
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment48.yaml:42-58
────────────────────────────────────────
  42 ┌         - args:
  43 │             - --config.file=/etc/prometheus/prometheus.yml
  44 │             - --storage.tsdb.retention.time=2h
  45 │             - --storage.tsdb.retention.size=1KB
  46 │             - --storage.tsdb.path=/prometheus
  47 │           image: prom/prometheus
  48 │           name: prometheus
  49 │           ports:
  50 └             - containerPort: 9090
  ..   
────────────────────────────────────────



prometheus-deployment49.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'prometheus' of Deployment 'prometheus' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment49.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: ./kompose convert --out yamls
   6 │     kompose.version: 1.32.0 (765fde254)
   7 │   labels:
   8 │     io.kompose.service: prometheus
   9 └   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment49.yaml:26-47
────────────────────────────────────────
  26 ┌       containers:
  27 │         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment49.yaml:27-39
────────────────────────────────────────
  27 ┌         - args:
  28 │             - --config.file=/etc/prometheus/prometheus.yml
  29 │           image: prom/prometheus
  30 │           name: prometheus
  31 │           ports:
  32 │             - containerPort: 9090
  33 │               hostPort: 9090
  34 │               protocol: TCP
  35 └           volumeMounts:
  ..   
────────────────────────────────────────



prometheus-deployment5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment5.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment50.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus-deployment50.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs:
  ..   
────────────────────────────────────────



prometheus-deployment50_3.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment50_3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 │             memory: 256Mi
  29 │           limits:
  30 └             cpu: 150m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment50_3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 │             memory: 256Mi
  29 │           limits:
  30 └             cpu: 150m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment50_3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 │             memory: 256Mi
  29 │           limits:
  30 └             cpu: 150m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment50_3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 │             memory: 256Mi
  29 │           limits:
  30 └             cpu: 150m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment50_3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 │             memory: 256Mi
  29 │           limits:
  30 └             cpu: 150m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment50_3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 │             memory: 256Mi
  29 │           limits:
  30 └             cpu: 150m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment50_3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 │             memory: 256Mi
  29 │           limits:
  30 └             cpu: 150m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment50_3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 │             memory: 256Mi
  29 │           limits:
  30 └             cpu: 150m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment50_3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 │             memory: 256Mi
  29 │           limits:
  30 └             cpu: 150m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment50_3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 │             memory: 256Mi
  29 │           limits:
  30 └             cpu: 150m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment50_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: prometheus
   5 │   labels:
   6 └     app: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment50_3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 │             memory: 256Mi
  29 │           limits:
  30 └             cpu: 150m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment50_3.yaml:20-59
────────────────────────────────────────
  20 ┌       serviceAccountName: prometheus
  21 │       containers:
  22 │       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment50_3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: prometheus
  23 │         image: prom/prometheus:v2.32.1
  24 │         imagePullPolicy: IfNotPresent
  25 │         resources:
  26 │           requests:
  27 │             cpu: 100m
  28 │             memory: 256Mi
  29 │           limits:
  30 └             cpu: 150m
  ..   
────────────────────────────────────────



prometheus-deployment51.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment51.yaml:16-35
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment51.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: prometheus
  18 │         image: prom/prometheus
  19 │         args:
  20 │         - --config.file=/etc/prometheus/prometheus.yml
  21 │         - --storage.tsdb.path=/prometheus/
  22 │         ports:
  23 │         - containerPort: 9090
  24 │         volumeMounts:
  25 └         - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment52.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment52.yaml:16-38
────────────────────────────────────────
  16 ┌       nodeSelector: 
  17 │         kubernetes.io/hostname: "node3"
  18 │       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment52.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:latest
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment54.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment54.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment54.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment55.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment55.yaml:4
────────────────────────────────────────
   4 [   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment55.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment55.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus:v2.20.1
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config
  22 │           mountPath: /etc/prometheus/prometheus.yml
  23 └           subPath: prometheus.yml
────────────────────────────────────────



prometheus-deployment56.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-server' in 'prometheus' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-server" in "prometheus" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-server in prometheus namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-server in prometheus namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment56.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-server (namespace: prometheus) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment56.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 └               mountPath: /etc/prometheus
────────────────────────────────────────



prometheus-deployment57.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment57.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment57.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment58.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 prometheus-deployment58.yaml:33
────────────────────────────────────────
  33 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment58.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────



prometheus-deployment59.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'data' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "data" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in data namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in data namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment59.yaml:18-46
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: data) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment59.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │             - "--web.external-url=https://prometheus.48340.xyz"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────



prometheus-deployment6.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment6.yaml:18-46
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment6.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────



prometheus-deployment60.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment60.yaml:18-46
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment60.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────



prometheus-deployment61.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment61.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment61.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment63_2.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment63_2.yaml:4
────────────────────────────────────────
   4 [   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment63_2.yaml:15-43
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 └           mountPath: /etc/prometheus/alerts.yml
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment63_2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: ubuntu/prometheus:edge
  18 │         volumeMounts:
  19 │         - name: prometheus-config-volume
  20 │           mountPath: /etc/prometheus/prometheus.yml
  21 │           subPath: prometheus.yml
  22 │         - name: prometheus-config-volume
  23 │           mountPath: /etc/prometheus/alerts.yml
  24 └           subPath: alerts.yml
  ..   
────────────────────────────────────────



prometheus-deployment64_2.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'blog-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "blog-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in blog-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in blog-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment64_2.yaml:20-43
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: blog-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment64_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: prometheus
  22 │         image: prom/prometheus:v2.53.0
  23 │         args:
  24 │         - --storage.tsdb.retention.time=1m
  25 │         - --config.file=/prom-config/prometheus.yml
  26 │         - --storage.tsdb.path=/prometheus
  27 │         - --log.level=debug
  28 │         ports:
  29 └         - name: prometheus
  ..   
────────────────────────────────────────



prometheus-deployment65.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 prometheus-deployment65.yaml:33
────────────────────────────────────────
  33 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment65.yaml:19-31
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           volumeMounts:
  ..   
────────────────────────────────────────



prometheus-deployment67.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment67.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment67.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-deployment68.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-server' in 'prometheus' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-server" in "prometheus" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-server in prometheus namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-server in prometheus namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment68.yaml:16-29
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-server (namespace: prometheus) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment68.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus
  19 │           ports:
  20 │             - containerPort: 9090
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /etc/prometheus
  24 └               readOnly: true
────────────────────────────────────────



prometheus-deployment7.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 prometheus-deployment7.yaml:30
────────────────────────────────────────
  30 [          runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment7.yaml:26-53
────────────────────────────────────────
  26 ┌       containers:
  27 │       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 └           - '--config.file=/etc/prometheus/prometheus.yml'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment7.yaml:27-42
────────────────────────────────────────
  27 ┌       - name: prometheus
  28 │         image: prom/prometheus
  29 │         securityContext:
  30 │          runAsUser: 0
  31 │         args:
  32 │           - '--storage.tsdb.retention=6h'
  33 │           - '--storage.tsdb.path=/prometheus'
  34 │           - '--config.file=/etc/prometheus/prometheus.yml'
  35 └         ports:
  ..   
────────────────────────────────────────



prometheus-deployment70.yaml (kubernetes)
=========================================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'data-permission-fix' of Deployment 'chaos-prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'chaos-prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'data-permission-fix' of Deployment 'chaos-prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'chaos-prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'data-permission-fix' of 'deployment' 'chaos-prometheus' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'chaos-prometheus' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'data-permission-fix' of Deployment 'chaos-prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'chaos-prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'data-permission-fix' of Deployment 'chaos-prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'chaos-prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'data-permission-fix' of Deployment 'chaos-prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'chaos-prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'data-permission-fix' of Deployment 'chaos-prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'chaos-prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'data-permission-fix' of Deployment 'chaos-prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'chaos-prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'data-permission-fix' of Deployment 'chaos-prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'chaos-prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'data-permission-fix' of Deployment 'chaos-prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'chaos-prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'data-permission-fix' of Deployment 'chaos-prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'chaos-prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'data-permission-fix' of Deployment 'chaos-prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'chaos-prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "data-permission-fix" of deployment "chaos-prometheus" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "chaos-prometheus" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment70.yaml:34-58
────────────────────────────────────────
  34 ┌       - name: prometheus
  35 │         image: dynamic_parameters
  36 │         imagePullPolicy: dynamic_parameters
  37 │         resources: null
  38 │         args:
  39 │         - --storage.tsdb.path=/data
  40 │         - --storage.tsdb.retention.time=6h
  41 │         - --config.file=/etc/prometheus/prometheus.yml
  42 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container chaos-prometheus in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment70.yaml:23-32
────────────────────────────────────────
  23 ┌       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 │         - -R
  28 │         - '777'
  29 │         - /data
  30 │         volumeMounts:
  31 │         - name: data
  32 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment chaos-prometheus in dynamic_parameters namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment70.yaml:19-65
────────────────────────────────────────
  19 ┌       serviceAccount: dynamic_parameters
  20 │       priorityClassName: dynamic_parameters
  21 │       imagePullSecrets: dynamic_parameters
  22 │       initContainers:
  23 │       - name: data-permission-fix
  24 │         image: busybox
  25 │         command:
  26 │         - /bin/chmod
  27 └         - -R
  ..   
────────────────────────────────────────



prometheus-deployment71.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment71.yaml:16-29
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment71.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: prometheus
  18 │           image: prom/prometheus:latest
  19 │           args:
  20 │             - "--config.file=/etc/prometheus/prometheus.yml"
  21 │           ports:
  22 │             - containerPort: 9090
  23 │           volumeMounts:
  24 │             - name: prometheus-config-volume
  25 └               mountPath: /etc/prometheus
────────────────────────────────────────



prometheus-deployment73.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-server' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-server" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-server in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-server in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment73.yaml:19-30
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 │               mountPath: /etc/prometheus
  27 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-server (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment73.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: prometheus
  21 │           image: prom/prometheus
  22 │           ports:
  23 │             - containerPort: 9090
  24 │           volumeMounts:
  25 │             - name: config-volume
  26 └               mountPath: /etc/prometheus
────────────────────────────────────────



prometheus-deployment74.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment74.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment74.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment74.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment74.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment74.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment74.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment74.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment74.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment74.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment74.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment74.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment74.yaml:18-46
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment74.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus:v2.53.1
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────



prometheus-deployment75.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment75.yaml:4
────────────────────────────────────────
   4 [   name: prometheus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment75.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 └         - mountPath: /etc/prometheus
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment75.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: public.ecr.aws/ubuntu/prometheus:2.50.1-22.04_stable
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - mountPath: /prometheus
  22 │           name: prometheus-storage
  23 │         - mountPath: /etc/prometheus
  24 └           name: prometheus-volume
────────────────────────────────────────



prometheus-deployment76.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment prometheus-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-deployment76.yaml:4
────────────────────────────────────────
   4 [   name: prometheus-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment76.yaml:15-33
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment76.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: prometheus
  17 │         image: prom/prometheus
  18 │         ports:
  19 │         - containerPort: 9090
  20 │         volumeMounts:
  21 │         - name: prometheus-config-volume
  22 │           mountPath: /etc/prometheus/
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────



prometheus-deployment8.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment8.yaml:18-46
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 └             - containerPort: 9090
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment8.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--storage.tsdb.retention.time=12h"
  23 │             - "--config.file=/etc/prometheus/prometheus.yml"
  24 │             - "--storage.tsdb.path=/prometheus/"
  25 │           ports:
  26 │             - containerPort: 9090
  27 └           resources:
  ..   
────────────────────────────────────────



prometheus-deployment9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus' of 'deployment' 'prometheus-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus' of Deployment 'prometheus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus" of deployment "prometheus-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment prometheus-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-deployment9.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus in deployment prometheus-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-deployment9.yaml:19-30
────────────────────────────────────────
  19 ┌         - name: prometheus
  20 │           image: prom/prometheus
  21 │           args:
  22 │             - "--config.file=/etc/prometheus/prometheus.yml"
  23 │             - "--storage.tsdb.path=/prometheus/"
  24 │           ports:
  25 │             - containerPort: 9090
  26 │           volumeMounts:
  27 └             - name: prometheus-config-volume
  ..   
────────────────────────────────────────



prometheus-exporter.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 94, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-exporter' of DaemonSet 'prometheus-exporter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-exporter' of DaemonSet 'prometheus-exporter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-exporter' of 'daemonset' 'prometheus-exporter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'prometheus-exporter' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 prometheus-exporter.yaml:6-44
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: prometheus-exporter
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: prometheus-exporter
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'prometheus-exporter' of DaemonSet 'prometheus-exporter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus-exporter' of DaemonSet 'prometheus-exporter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'prometheus-exporter' of DaemonSet 'prometheus-exporter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-exporter' of DaemonSet 'prometheus-exporter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'prometheus-exporter' of DaemonSet 'prometheus-exporter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'prometheus-exporter' of DaemonSet 'prometheus-exporter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'prometheus-exporter' of DaemonSet 'prometheus-exporter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus-exporter' of DaemonSet 'prometheus-exporter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-exporter' of DaemonSet 'prometheus-exporter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'prometheus-exporter' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 prometheus-exporter.yaml:6-44
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: prometheus-exporter
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: prometheus-exporter
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-exporter" of daemonset "prometheus-exporter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset prometheus-exporter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-exporter.yaml:4
────────────────────────────────────────
   4 [   name: prometheus-exporter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container prometheus-exporter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset prometheus-exporter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-exporter.yaml:14-44
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 └             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-exporter in daemonset prometheus-exporter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-exporter.yaml:15-30
────────────────────────────────────────
  15 ┌         - name: prometheus-exporter
  16 │           image: quay.io/prometheus/node-exporter:latest
  17 │           ports:
  18 │             - containerPort: 9100
  19 │           args:
  20 │             - --path.procfs=/host/proc
  21 │             - --path.sysfs=/host/sys
  22 │             - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
  23 └             - --web.listen-address=:9100
  ..   
────────────────────────────────────────



prometheus-node-exporter.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'node-exporter' of 'daemonset' 'node-exporter' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'node-exporter' of DaemonSet 'node-exporter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "node-exporter" of daemonset "node-exporter" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container node-exporter in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset node-exporter in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-node-exporter.yaml:17-25
────────────────────────────────────────
  17 ┌       nodeSelector:
  18 │         app: node-exporter-target
  19 │       containers:
  20 │       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container node-exporter in daemonset node-exporter (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-node-exporter.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: prom/node-exporter
  21 │         name: node-exporter
  22 │         ports:
  23 │         - containerPort: 9100
  24 │           protocol: TCP
  25 └           name: http
────────────────────────────────────────



prometheus-node-exporter_1.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'node-exporter' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 prometheus-node-exporter_1.yaml:9-16
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: http
  11 │     port: 9100
  12 │     nodePort: 31672
  13 │     protocol: TCP
  14 │   type: NodePort
  15 │   selector:
  16 └     k8s-app: node-exporter
────────────────────────────────────────



prometheus-operator-clusterRole.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 109, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 prometheus-operator-clusterRole.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-operator-clusterRole.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-operator-clusterRole.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-operator-clusterRole.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-operator-clusterRole.yaml:40-46
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ""
  42 │   resources:
  43 │   - pods
  44 │   verbs:
  45 │   - list
  46 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus-operator-clusterRole.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 prometheus-operator-clusterRole.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ""
  49 │   resources:
  50 │   - services
  51 │   - services/finalizers
  52 │   - endpoints
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────



prometheus-operator-clusterRole1.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 109, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 prometheus-operator-clusterRole1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-operator-clusterRole1.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-operator-clusterRole1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-operator-clusterRole1.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-operator-clusterRole1.yaml:40-46
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ""
  42 │   resources:
  43 │   - pods
  44 │   verbs:
  45 │   - list
  46 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus-operator-clusterRole1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 prometheus-operator-clusterRole1.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ""
  49 │   resources:
  50 │   - services
  51 │   - services/finalizers
  52 │   - endpoints
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────



prometheus-operator-clusterRole2.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 109, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 prometheus-operator-clusterRole2.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-operator-clusterRole2.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-operator-clusterRole2.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-operator-clusterRole2.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-operator-clusterRole2.yaml:40-46
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ""
  42 │   resources:
  43 │   - pods
  44 │   verbs:
  45 │   - list
  46 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus-operator-clusterRole2.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 prometheus-operator-clusterRole2.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ""
  49 │   resources:
  50 │   - services
  51 │   - services/finalizers
  52 │   - endpoints
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────



prometheus-operator-clusterRole3.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 109, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 prometheus-operator-clusterRole3.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-operator-clusterRole3.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-operator-clusterRole3.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-operator-clusterRole3.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-operator-clusterRole3.yaml:40-46
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ""
  42 │   resources:
  43 │   - pods
  44 │   verbs:
  45 │   - list
  46 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus-operator-clusterRole3.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 prometheus-operator-clusterRole3.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ""
  49 │   resources:
  50 │   - services
  51 │   - services/finalizers
  52 │   - endpoints
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────



prometheus-operator-clusterRole4.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 109, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 prometheus-operator-clusterRole4.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-operator-clusterRole4.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-operator-clusterRole4.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-operator-clusterRole4.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-operator-clusterRole4.yaml:40-46
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ""
  42 │   resources:
  43 │   - pods
  44 │   verbs:
  45 │   - list
  46 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus-operator-clusterRole4.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 prometheus-operator-clusterRole4.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ""
  49 │   resources:
  50 │   - services
  51 │   - services/finalizers
  52 │   - endpoints
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────



prometheus-operator-clusterRole5.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 109, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 prometheus-operator-clusterRole5.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-operator-clusterRole5.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 prometheus-operator-clusterRole5.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-operator-clusterRole5.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 prometheus-operator-clusterRole5.yaml:40-46
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ""
  42 │   resources:
  43 │   - pods
  44 │   verbs:
  45 │   - list
  46 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 prometheus-operator-clusterRole5.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ""
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 prometheus-operator-clusterRole5.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ""
  49 │   resources:
  50 │   - services
  51 │   - services/finalizers
  52 │   - endpoints
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────



prometheus-operator-deployment.yaml (kubernetes)
================================================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-operator-deployment.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-operator-deployment.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-operator-deployment.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-operator-deployment.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-operator' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-operator-deployment.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-operator-deployment.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-operator-deployment.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-operator-deployment.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-operator-deployment.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-operator-deployment.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-operator-deployment.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-operator" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-operator-deployment.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-operator-deployment.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-operator-deployment.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-operator-deployment.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-operator in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-operator-deployment.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────



prometheus-operator-deployment2.yaml (kubernetes)
=================================================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-operator' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-operator" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-operator in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-operator-deployment2.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────



prometheus-operator-deployment4.yaml (kubernetes)
=================================================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-operator' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-operator" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-operator in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-operator-deployment4.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────



prometheus-operator-deployment5.yaml (kubernetes)
=================================================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-operator' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-operator" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-operator in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-operator-deployment5.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────



prometheus-operator-deployment6.yaml (kubernetes)
=================================================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-operator' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-operator" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-operator in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-operator-deployment6.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────



prometheus-operator-deployment8.yaml (kubernetes)
=================================================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-operator' of 'deployment' 'prometheus-operator' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-operator' of Deployment 'prometheus-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-operator" of deployment "prometheus-operator" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:46-66
────────────────────────────────────────
  46 ┌       - args:
  47 │         - --logtostderr
  48 │         - --secure-listen-address=:8443
  49 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  50 │         - --upstream=http://127.0.0.1:8080/
  51 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  52 │         name: kube-rbac-proxy
  53 │         ports:
  54 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-operator in deployment prometheus-operator (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-operator-deployment8.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --kubelet-service=kube-system/kubelet
  31 │         - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.49.0
  32 │         image: quay.io/prometheus-operator/prometheus-operator:v0.49.0
  33 │         name: prometheus-operator
  34 │         ports:
  35 │         - containerPort: 8080
  36 │           name: http
  37 └         resources:
  ..   
────────────────────────────────────────



prometheus-rbac2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus-rbac2.yaml:6-19
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - configmaps
  13 │   - endpoints
  14 └   - pods
  ..   
────────────────────────────────────────



prometheus-rbac4_1.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 prometheus-rbac4_1.yaml:6-25
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/metrics
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   - prometheusrules
  ..   
────────────────────────────────────────



prometheus-rbac5_1.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus-rbac5_1.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - services
  11 │   - endpoints
  12 │   - pods
  13 │   - nodes/proxy
  14 └   verbs:
  ..   
────────────────────────────────────────



prometheus-role.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'odh-prometheus-monitoring' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 prometheus-role.yaml:23-30
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - monitoring.coreos.com
  25 │   resources:
  26 │   - '*'
  27 │   verbs:
  28 │   - get
  29 │   - list
  30 └   - watch
────────────────────────────────────────



prometheus-role1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 prometheus-role1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups: [""]
   7 │   resources:
   8 │   - nodes
   9 │   - nodes/proxy
  10 │   - services
  11 │   - endpoints
  12 │   - pods
  13 └   verbs: ["get", "list", "watch"]
────────────────────────────────────────



prometheus-scrape.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello' of Pod 'hellopod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello' of Pod 'hellopod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello' of 'pod' 'hellopod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello' of Pod 'hellopod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello' of Pod 'hellopod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello' of Pod 'hellopod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello' of Pod 'hellopod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello' of Pod 'hellopod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello' of Pod 'hellopod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello' of Pod 'hellopod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello' of Pod 'hellopod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello" of pod "hellopod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hellopod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-scrape.yaml:4-6
────────────────────────────────────────
   4 ┌   annotations:
   5 │     prometheus.io/scrape: "false"
   6 └   name: hellopod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod hellopod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hellopod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hellopod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-scrape.yaml:8-13
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hello in pod hellopod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-scrape.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────



prometheus-scrape2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello' of Pod 'hellopod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello' of Pod 'hellopod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello' of 'pod' 'hellopod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello' of Pod 'hellopod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello' of Pod 'hellopod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello' of Pod 'hellopod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello' of Pod 'hellopod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello' of Pod 'hellopod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello' of Pod 'hellopod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello' of Pod 'hellopod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello' of Pod 'hellopod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello" of pod "hellopod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hellopod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 prometheus-scrape2.yaml:4-6
────────────────────────────────────────
   4 ┌   annotations:
   5 │     prometheus.io.scrape: "false"
   6 └   name: hellopod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod hellopod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hellopod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hellopod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 prometheus-scrape2.yaml:8-13
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hello in pod hellopod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 prometheus-scrape2.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: hello
  10 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  11 │       ports:
  12 │         - name: http
  13 └           containerPort: 80
────────────────────────────────────────


