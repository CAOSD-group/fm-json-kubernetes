
Report Summary

┌────────────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                           Target                           │    Type    │ Misconfigurations │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy-allow-tailscale-ingress.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy-allow-tailscale-ingress1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy-allow-traefik-ingress.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy-allow-traefik-ingress1.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy-allow-traefik-ingress2.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy-allow-upstream-tls-dns-egress.yaml           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy-argocd-application-controller.yaml           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy-argocd-dex-server.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy-argocd-redis.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy-argocd-repo-server.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy-argocd-server.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy229.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy284.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy285.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy339.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy87.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicyEgress.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_1.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_10.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_101.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_101_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_101_2.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_101_3.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_11.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_110.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_111.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_112.yaml                                     │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_113.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_113_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_12.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_121.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_13.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_131.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_131_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_14.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_15.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_16.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_17.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_18.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_19.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_2.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_21.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_210.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_211.yaml                                     │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_212.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_22.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_23.yaml                                      │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_24.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_25.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_26.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_27.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_28.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_29.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_3.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_31.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_310.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_311.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_312.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_32.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_33.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_34.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_35.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_36.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_37.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_38.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_39.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_4.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_41.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_410.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_42.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_43.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_44.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_45.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_46.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_47.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_48.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_49.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_5.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_51.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_52.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_52_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_52_2.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_53.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_54.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_55.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_56.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_57.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_58.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_6.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_61.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_62.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_63.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_64.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_65.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_7.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_71.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_72.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_73.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_74.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_74_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_75.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_8.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_81.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_83.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_84.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_9.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_91.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ NetworkPolicy_92.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Networkpolicy337.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Never1.yaml                                                │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Never2.yaml                                                │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Never3.yaml                                                │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Never5.yaml                                                │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Nextjs1.yaml                                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Nextjs11.yaml                                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Nextjs2.yaml                                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Nextjs21.yaml                                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Nextjs21_1.yaml                                            │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Nextjs21_2.yaml                                            │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Nextjs21_3.yaml                                            │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Nextjs2_1.yaml                                             │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Nextjs2_2.yaml                                             │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Nextjs2_3.yaml                                             │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny-all8.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny-all9.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny-imds.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny-imds_1.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-egress.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-egress1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-egress2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-egress3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-egress4.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-emailservice.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-emailservice1.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-emailservice2.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-emailservice3.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-emailservice4.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-emailservice5.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-emailservice6.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-emailservice7.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-emailservice8.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-excersice.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-frontend.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-frontend1.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-frontend2.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-frontend3.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-frontend4.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-frontend5.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-frontend6.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-frontend7.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-frontend8.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-grafana.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-ingress.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-ingress1.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-loadgenerator.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-loadgenerator1.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-loadgenerator2.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-loadgenerator3.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-loadgenerator4.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-loadgenerator5.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-loadgenerator6.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-loadgenerator7.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-loadgenerator8.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-mongo-to-api.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-paymentservice.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-paymentservice1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-paymentservice2.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-paymentservice3.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-paymentservice4.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-paymentservice5.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-paymentservice6.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-paymentservice7.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-paymentservice8.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-pod-namespace-db.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-pod-namespace-db1.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-pod-namespace.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-pod-namespace1.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-pod-port.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-pod-port1.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-pods.yaml                                   │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-pods_1.yaml                                 │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-postgres.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-postgres1.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-productcatalogservice.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-productcatalogservice1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-productcatalogservice2.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-productcatalogservice3.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-productcatalogservice4.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-productcatalogservice5.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-productcatalogservice6.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-productcatalogservice7.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-productcatalogservice8.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-prometheus-k8s.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-recommendationservice.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-recommendationservice1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-recommendationservice2.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-recommendationservice3.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-recommendationservice4.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-recommendationservice5.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-recommendationservice6.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-recommendationservice7.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-recommendationservice8.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-redis.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-redis1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-redis2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-redis3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-redis4.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-redis5.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-redis6.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-redis7.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-redis8.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-shippingservice.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-shippingservice1.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-shippingservice2.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-shippingservice3.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-shippingservice4.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-shippingservice5.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-shippingservice6.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-shippingservice7.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-shippingservice8.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-template.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-template_1.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy.yaml.verified.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy1.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy11.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy13.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy14.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy14_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy14_2.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy15.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy2.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy20.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy21.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy22.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy24.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy26.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy27.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy28.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy29.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy3.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy30.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy31.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy32.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy35.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy37.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy38.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy4.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy40.yaml                                      │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy40_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy40_2.yaml                                    │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy40_3.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy40_4.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy42.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy43.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy44.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy5.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy6.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy7.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policys.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policys_1.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network.yaml                                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network1.yaml                                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network11.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network2.yaml                                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network28.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network2_1.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network3.yaml                                              │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network3_1.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkPolicy158.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkPolicy336.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkPolicy336_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkPolicy336_2.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkPolicy40.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkPolicy451.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkPolicy464.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkPolicy475.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkPolicy82.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkPolicy89.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network_1.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network_policies.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network_policies1.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network_policies_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network_policies_2.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network_policies_3.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network_policy.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network_policy1.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network_policy3.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network_policy4.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network_policy5.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkchaos_editor_role.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkchaos_viewer_role.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkdefaultpolicy.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-mysql.yaml                                      │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-mysql1.yaml                                     │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-mysql1_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-mysql_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests.yaml                                      │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests1.yaml                                     │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests1_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests2.yaml                                     │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests2_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests3.yaml                                     │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests3_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests4.yaml                                     │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests4_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests5.yaml                                     │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests5_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests6.yaml                                     │ kubernetes │        14         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests6_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests6_2.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests6_3.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests7.yaml                                     │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests7_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests8.yaml                                     │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests8_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking-tests_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.amazon-vpc-routed-eni-k8s-1.161_2.yaml          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.amazon-vpc-routed-eni-k8s-1.161_3.yaml          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.amazon-vpc-routed-eni-k8s-1.161_4.yaml          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.amazon-vpc-routed-eni-k8s-1.161_5.yaml          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.amazon-vpc-routed-eni-k8s-1.16_2.yaml           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.amazon-vpc-routed-eni-k8s-1.16_3.yaml           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.amazon-vpc-routed-eni-k8s-1.16_4.yaml           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.amazon-vpc-routed-eni-k8s-1.16_5.yaml           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress1.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress10.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress11.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress12.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress13.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress14.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress15.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress16.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress17.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress18.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress19.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress2.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress20.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress21.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress22.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress23.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress24.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress25.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress26.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress27.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress28.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress29.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress3.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress33.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress34.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress35.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress36.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress37.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress38.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress39.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress4.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress40.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress41.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress42.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress43.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress44.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress45.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress46.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress47.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress48.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress49.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress5.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress50.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress6.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress7.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress8.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.Ingress9.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass.after_roundtrip.yaml     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass.after_roundtrip1.yaml    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass10.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass11.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass12.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass13.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass14.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass15.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass16.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass17.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass18.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass19.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass20.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass21.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass22.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass23.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass24.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass25.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass26.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass27.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass28.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass29.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass33.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass34.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass35.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass36.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass37.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass38.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass39.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass40.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass41.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass42.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass43.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass44.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass45.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass46.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass47.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass48.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass49.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass5.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass50.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass6.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass7.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass8.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.IngressClass9.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy.after_roundtrip.yaml    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy.after_roundtrip1.yaml   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy.after_roundtrip2.yaml   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy.after_roundtrip3.yaml   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy.after_roundtrip4.yaml   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy.after_roundtrip5.yaml   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy.after_roundtrip6.yaml   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy.after_roundtrip7.yaml   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy.after_roundtrip8.yaml   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy.after_roundtrip9.yaml   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy1.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy10.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy11.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy12.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy13.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy14.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy15.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy16.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy17.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy18.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy19.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy2.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy20.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy21.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy22.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy23.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy24.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy25.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy26.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy27.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy28.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy29.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy3.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy30.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy31.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy32.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy33.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy34.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy35.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy39.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy4.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy40.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy41.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy42.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy43.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy44.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy45.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy46.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy47.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy48.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy49.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy5.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy50.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy51.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy52.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy53.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy54.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy55.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy56.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy6.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy7.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy8.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1.NetworkPolicy9.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress.after_roundtrip.yaml  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress.after_roundtrip1.yaml │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress.after_roundtrip2.yaml │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress.after_roundtrip3.yaml │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress.after_roundtrip4.yaml │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress.after_roundtrip5.yaml │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress.after_roundtrip6.yaml │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress.after_roundtrip7.yaml │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress.after_roundtrip8.yaml │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress.after_roundtrip9.yaml │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress10.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress11.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress12.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress13.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress14.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress15.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress16.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress17.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress18.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress19.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress2.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress20.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress21.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress22.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress23.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress24.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress25.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress26.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress27.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress28.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress29.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress3.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress30.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress31.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress32.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress4.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress5.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress6.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress7.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress8.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.IPAddress9.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR10.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR11.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR12.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR13.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR14.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR15.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR16.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR17.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR18.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR19.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR2.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR20.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR21.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR22.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR3.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR4.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR5.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR6.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR7.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR8.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.k8s.io.v1alpha1.ServiceCIDR9.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking4.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking5.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networking6.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicies.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicies_1.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy-allow-all.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy-api.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy-api1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy-api2.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy-api3.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy-certman.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy-certman1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy-definition.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy-egress35.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy-ingress18.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy110.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy118.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy146.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy146_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy151.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy151_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy151_2.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy151_3.yaml                                    │ kubernetes │         6         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy157.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy230.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy251.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy252.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy333.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy338.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy449.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy476.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy546.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy_default.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy_default_1.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy_default_2.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy_default_3.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy_ping.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy_ping1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy_ping_egress.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networkpolicy_ping_egress1.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networks_3.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ networktool-deployment.yaml                                │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netwrokpolicy.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netwrokpolicy_1.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ neuro_ai_deployment.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ never-match-injector.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ never-ready.pod.yaml                                       │ kubernetes │        14         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ never-restart-policy.yaml                                  │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ never-restart.yaml                                         │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ never.yaml                                                 │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ never4.yaml                                                │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ neverpolicy.yaml                                           │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-catalog-db.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-catalog-db1.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-deploy.yaml                                            │ kubernetes │        16         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-deployment.yaml                                        │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-deployment1.yaml                                       │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-ing.yaml                                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-myapp.yaml                                             │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-tls-secret.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-tls-secret1.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-tls-secret2.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-tls-secret3.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_1.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_10.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_11.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_12.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_13.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_14.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_15.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_16.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_17.yaml                                        │ kubernetes │        14         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_18.yaml                                        │ kubernetes │        16         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_19.yaml                                        │ kubernetes │        16         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_2.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_20.yaml                                        │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_21.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_22.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_23.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_24.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_25.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_26.yaml                                        │ kubernetes │        49         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_28.yaml                                        │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_3.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_4.yaml                                         │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_5.yaml                                         │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_6.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_7.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_8.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new-version_9.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new1.yaml                                                  │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ new1_1.yaml                                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_1.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_10.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_11.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_12.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_13.yaml                                     │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_14.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_15.yaml                                     │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_16.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_17.yaml                                     │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_18.yaml                                     │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_2.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_3.yaml                                      │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_4.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_5.yaml                                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_6.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_7.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_8.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newIngressctrl_9.yaml                                      │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newapp-service.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newdep.yaml                                                │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newdeployment.yaml                                         │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_1.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_10.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_11.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_12.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_13.yaml                                    │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_14.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_15.yaml                                    │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_16.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_17.yaml                                    │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_18.yaml                                    │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_2.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_3.yaml                                     │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_4.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_5.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_6.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_7.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_8.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newingressctrl1_9.yaml                                     │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newnginx.yaml                                              │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newpod.yaml                                                │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newpod1.yaml                                               │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newrelic-daemonset.yaml                                    │ kubernetes │        24         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newrelic-daemonset1.yaml                                   │ kubernetes │        24         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newrelic-daemonset2.yaml                                   │ kubernetes │        24         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd.yaml                                              │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd1.yaml                                             │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd10.yaml                                            │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd11.yaml                                            │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd12.yaml                                            │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd2.yaml                                             │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd3.yaml                                             │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd4.yaml                                             │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd5.yaml                                             │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd6.yaml                                             │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd7.yaml                                             │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd8.yaml                                             │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-apd9.yaml                                             │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-cronjob.yaml                                          │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-portal-configmap.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-portal-deployment.yaml                                │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-portal-deployment1.yaml                               │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-portal-hpa.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-portal-replicaset.yaml                                │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-portal.yaml                                           │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-portal1.yaml                                          │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-portal2.yaml                                          │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-system-deployment.yaml                                │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-system-statefulset.yaml                               │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ news-system.yaml                                           │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newsaggregator_v1_hotnews.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newservice.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newservice1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ newservice2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ next-deployment-test.yaml                                  │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ next-deployment.yaml                                       │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ next-service.yaml                                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ next-service1.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ next-service1_1.yaml                                       │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ next-service1_2.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-apache-configmap.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-config-pvc.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-config-pvc1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-data-pvc.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-data-pvc1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deploy.yaml                                      │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment.yaml                                  │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment1.yaml                                 │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment1_1.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment1_2.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment2.yaml                                 │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment2_1.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment2_2.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment3.yaml                                 │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment3_1.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment3_2.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment4.yaml                                 │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment4_1.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment5.yaml                                 │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment5_1.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-deployment_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-service.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud-svc.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud1_1.yaml                                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud1_2.yaml                                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud1_3.yaml                                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud1_5.yaml                                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud2.yaml                                            │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud4_1.yaml                                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud4_2.yaml                                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud4_3.yaml                                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud4_5.yaml                                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextcloud5.yaml                                            │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextjs-deployment.yaml                                     │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextjs-deployment1.yaml                                    │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextjs-env.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextjs-service.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nextjs-service1.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nexus-deploy.yaml                                          │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nexus-deploy1.yaml                                         │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nexus-deploy_1.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nexus-deployment.yaml                                      │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nexus-namespace.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nexus-pvc.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nexus-pvc_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nexus-service.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nexus-svc.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nexus.yaml                                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nexus1.yaml                                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nexus2.yaml                                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-0001.yaml                                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-00011.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-0002.yaml                                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-00021.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-busybox-deployment.yaml                                │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-busybox-deployment1.yaml                               │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-busybox-deployment2.yaml                               │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-client-pod.yaml                                        │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-client-pod1.yaml                                       │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-client-provisioner.yaml                                │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-csi.nginx.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-csi.nginx_1.yaml                                       │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-csi.nginx_2.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-deleted-sc.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-deploy-svc.yaml                                        │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nfs-deploy-svc_1.yaml                                      │ kubernetes │         0         │
└────────────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


NetworkPolicy_112.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): NetworkPolicy 'coredns-metrics' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 NetworkPolicy_112.yaml:7-24
────────────────────────────────────────
   7 ┌   ingress:
   8 │   - from:
   9 │     - namespaceSelector:
  10 │         matchLabels:
  11 │           coredns-metrics-policy: allow
  12 │     - podSelector:
  13 │         matchLabels:
  14 │           coredns-metrics-policy: allow
  15 └     ports:
  ..   
────────────────────────────────────────



NetworkPolicy_211.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): NetworkPolicy 'coredns-metrics' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 NetworkPolicy_211.yaml:7-24
────────────────────────────────────────
   7 ┌   ingress:
   8 │   - from:
   9 │     - namespaceSelector:
  10 │         matchLabels:
  11 │           coredns-metrics-policy: allow
  12 │     - podSelector:
  13 │         matchLabels:
  14 │           coredns-metrics-policy: allow
  15 └   - ports:
  ..   
────────────────────────────────────────



NetworkPolicy_23.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): NetworkPolicy 'ksm-can-be-accessed-by-my-app' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 NetworkPolicy_23.yaml:7-17
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: kube-state-metrics
  10 │   ingress:
  11 │     - from:
  12 │       - podSelector:
  13 │           matchLabels:
  14 │             app: my-app-that-needs-access-to-ksm
  15 └       ports:
  ..   
────────────────────────────────────────



Never1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'manager' of Deployment 'controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'manager' of 'deployment' 'controller-manager' in 'system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "manager" of deployment "controller-manager" in "system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container controller-manager in system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Never1.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment controller-manager in system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Never1.yaml:10-12
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────



Never2.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'manager' of Deployment 'controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'manager' of 'deployment' 'controller-manager' in 'system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "manager" of deployment "controller-manager" in "system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container controller-manager in system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Never2.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment controller-manager in system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Never2.yaml:10-12
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────



Never3.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'manager' of Deployment 'controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'manager' of 'deployment' 'controller-manager' in 'system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "manager" of deployment "controller-manager" in "system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container controller-manager in system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Never3.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment controller-manager in system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Never3.yaml:10-12
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────



Never5.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'manager' of Deployment 'controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'manager' of 'deployment' 'controller-manager' in 'system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "manager" of deployment "controller-manager" in "system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container controller-manager in system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Never5.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment controller-manager in system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Never5.yaml:10-12
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: manager
  12 └           imagePullPolicy: Never
────────────────────────────────────────



Nextjs21_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nextjs' of 'deployment' 'skillpillweb-nextjs' in 'nextjs' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nextjs" of deployment "skillpillweb-nextjs" in "nextjs" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment skillpillweb-nextjs in nextjs namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container skillpillweb-nextjs in nextjs namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment skillpillweb-nextjs in nextjs namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Nextjs21_1.yaml:18-78
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 └           name: nextjs-port-80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nextjs in deployment skillpillweb-nextjs (namespace: nextjs) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Nextjs21_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────



Nextjs21_2.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'skillpillweb-nextjs-service' in 'nextjs' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



Nextjs21_3.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'skillpillweb-nextjs-service-80' in 'nextjs' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



Nextjs2_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nextjs' of 'deployment' 'skillpillweb-nextjs' in 'nextjs' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nextjs' of Deployment 'skillpillweb-nextjs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nextjs" of deployment "skillpillweb-nextjs" in "nextjs" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment skillpillweb-nextjs in nextjs namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container skillpillweb-nextjs in nextjs namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment skillpillweb-nextjs in nextjs namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Nextjs2_1.yaml:18-78
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 └           name: nextjs-port-80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nextjs in deployment skillpillweb-nextjs (namespace: nextjs) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Nextjs2_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: nextjs
  20 │         image: <account>/<repo>:skillpillweb-nextjs
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 443
  24 │           name: nextjs-port
  25 │         - containerPort: 80
  26 │           name: nextjs-port-80
  27 └         livenessProbe:
  ..   
────────────────────────────────────────



Nextjs2_2.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'skillpillweb-nextjs-service' in 'nextjs' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



Nextjs2_3.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'skillpillweb-nextjs-service-80' in 'nextjs' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



network-policy-pods.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx-pod' in 'network-policy' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx-pod" in "network-policy" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-pod in network-policy namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network-policy-pods.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: nginx
  11 └     image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-pod in network-policy namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network-policy-pods.yaml:9-11
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: nginx
  11 └     image: nginx
────────────────────────────────────────



network-policy-pods_1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox-pod' in 'network-policy' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox-pod" in "network-policy" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox-pod in network-policy namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox-pod in network-policy namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network-policy-pods_1.yaml:9-14
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container busybox in pod busybox-pod (namespace: network-policy) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 network-policy-pods_1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: busybox
  11 │     image: radial/busyboxplus:curl
  12 │     command:
  13 │     - sleep
  14 └     - '3600'
────────────────────────────────────────



network-policy2.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): NetworkPolicy 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 network-policy2.yaml:7-16
────────────────────────────────────────
   7 ┌   selector: k8s-app == "metrics-server"
   8 │   types:
   9 │     - Ingress
  10 │     - Egress
  11 │   ingress:
  12 │     - action: Allow
  13 │       source:
  14 │         namespaceSelector: name == "kube-system"
  15 │   egress:
  16 └     - action: Allow
────────────────────────────────────────


AVD-KSV-0038 (MEDIUM): Network policy should uses podSelector and/or the namespaceSelector to restrict ingress and egress traffic within the Pod network
════════════════════════════════════════
ensure that network policies selectors are applied to pods or namespaces to restricted ingress and egress traffic within the pod network

See https://avd.aquasec.com/misconfig/ksv038
────────────────────────────────────────
 network-policy2.yaml:7-16
────────────────────────────────────────
   7 ┌   selector: k8s-app == "metrics-server"
   8 │   types:
   9 │     - Ingress
  10 │     - Egress
  11 │   ingress:
  12 │     - action: Allow
  13 │       source:
  14 │         namespaceSelector: name == "kube-system"
  15 │   egress:
  16 └     - action: Allow
────────────────────────────────────────



network-policy40.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'backend' of Deployment 'backend-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'backend' of Deployment 'backend-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'backend' of 'deployment' 'backend-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'backend' of Deployment 'backend-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'backend' of Deployment 'backend-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'backend' of Deployment 'backend-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'backend' of Deployment 'backend-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'backend' of Deployment 'backend-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'backend' of Deployment 'backend-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'backend' of Deployment 'backend-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'backend' of Deployment 'backend-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'backend' of Deployment 'backend-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "backend" of deployment "backend-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment backend-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 network-policy40.yaml:4
────────────────────────────────────────
   4 [   name: backend-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment backend-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container backend-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network-policy40.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment backend-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network-policy40.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: backend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



network-policy40_2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend' of Deployment 'frontend-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend' of Deployment 'frontend-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend' of 'deployment' 'frontend-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend' of Deployment 'frontend-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend' of Deployment 'frontend-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend' of Deployment 'frontend-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend' of Deployment 'frontend-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend' of Deployment 'frontend-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend' of Deployment 'frontend-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend' of Deployment 'frontend-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend' of Deployment 'frontend-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend' of Deployment 'frontend-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend" of deployment "frontend-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 network-policy40_2.yaml:4
────────────────────────────────────────
   4 [   name: frontend-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment frontend-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network-policy40_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network-policy40_2.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: frontend
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



network-policy5.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): NetworkPolicy 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 network-policy5.yaml:7-16
────────────────────────────────────────
   7 ┌   selector: k8s-app == "metrics-server"
   8 │   types:
   9 │     - Ingress
  10 │     - Egress
  11 │   ingress:
  12 │     - action: Allow
  13 │       source:
  14 │         namespaceSelector: name == "kube-system"
  15 │   egress:
  16 └     - action: Allow
────────────────────────────────────────


AVD-KSV-0038 (MEDIUM): Network policy should uses podSelector and/or the namespaceSelector to restrict ingress and egress traffic within the Pod network
════════════════════════════════════════
ensure that network policies selectors are applied to pods or namespaces to restricted ingress and egress traffic within the pod network

See https://avd.aquasec.com/misconfig/ksv038
────────────────────────────────────────
 network-policy5.yaml:7-16
────────────────────────────────────────
   7 ┌   selector: k8s-app == "metrics-server"
   8 │   types:
   9 │     - Ingress
  10 │     - Egress
  11 │   ingress:
  12 │     - action: Allow
  13 │       source:
  14 │         namespaceSelector: name == "kube-system"
  15 │   egress:
  16 └     - action: Allow
────────────────────────────────────────



network3.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'pod-with-host-network' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'pod-with-host-network' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'pod-with-host-network' in 'deploy-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Pod 'pod-with-host-network' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 network3.yaml:7-14
────────────────────────────────────────
   7 ┌   hostNetwork: true
   8 │   containers:
   9 │   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'pod-with-host-network' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'pod-with-host-network' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'pod-with-host-network' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'pod-with-host-network' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'pod-with-host-network' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'pod-with-host-network' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'pod-with-host-network' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'pod-with-host-network' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'pod-with-host-network' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "pod-with-host-network" in "deploy-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-with-host-network in deploy-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-with-host-network in deploy-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network3.yaml:7-14
────────────────────────────────────────
   7 ┌   hostNetwork: true
   8 │   containers:
   9 │   - name: main
  10 │     resources: {}
  11 │     image: alpine
  12 │     command:
  13 │     - /bin/sleep
  14 └     - '999999'
────────────────────────────────────────



networking-mysql.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'udemy-k8s-aws-po-mysql' of 'pod' 'udemy-k8s-aws-po-mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "udemy-k8s-aws-po-mysql" of pod "udemy-k8s-aws-po-mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod udemy-k8s-aws-po-mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 networking-mysql.yaml:4-6
────────────────────────────────────────
   4 ┌   name: udemy-k8s-aws-po-mysql
   5 │   labels:
   6 └     label-app: udemy-k8s-aws-po-mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container udemy-k8s-aws-po-mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-mysql.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod udemy-k8s-aws-po-mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-mysql.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────



networking-mysql1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'udemy-k8s-aws-po-mysql' of 'pod' 'udemy-k8s-aws-po-mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'udemy-k8s-aws-po-mysql' of Pod 'udemy-k8s-aws-po-mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "udemy-k8s-aws-po-mysql" of pod "udemy-k8s-aws-po-mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod udemy-k8s-aws-po-mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 networking-mysql1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: udemy-k8s-aws-po-mysql
   5 │   labels:
   6 └     label-app: udemy-k8s-aws-po-mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container udemy-k8s-aws-po-mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-mysql1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod udemy-k8s-aws-po-mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-mysql1.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: udemy-k8s-aws-po-mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────



networking-tests.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 networking-tests.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────



networking-tests1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 networking-tests1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests1.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────



networking-tests2.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 networking-tests2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests2.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests2.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────



networking-tests3.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 networking-tests3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests3.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests3.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────



networking-tests4.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 networking-tests4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests4.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests4.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────



networking-tests5.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 networking-tests5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests5.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql in pod mysql (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 networking-tests5.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────



networking-tests6.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 networking-tests6.yaml:9-30
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 │       mountPath: /etc/mysql/conf.d
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 networking-tests6.yaml:9-30
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 │       mountPath: /etc/mysql/conf.d
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 networking-tests6.yaml:9-30
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 │       mountPath: /etc/mysql/conf.d
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 networking-tests6.yaml:9-30
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 │       mountPath: /etc/mysql/conf.d
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networking-tests6.yaml:9-30
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 │       mountPath: /etc/mysql/conf.d
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networking-tests6.yaml:9-30
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 │       mountPath: /etc/mysql/conf.d
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networking-tests6.yaml:9-30
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 │       mountPath: /etc/mysql/conf.d
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 networking-tests6.yaml:9-30
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 │       mountPath: /etc/mysql/conf.d
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 networking-tests6.yaml:9-30
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 │       mountPath: /etc/mysql/conf.d
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 networking-tests6.yaml:9-30
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 │       mountPath: /etc/mysql/conf.d
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 networking-tests6.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests6.yaml:9-30
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 │       mountPath: /etc/mysql/conf.d
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests6.yaml:8-37
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 └       mountPath: /etc/mysql/conf.d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mysql in pod mysql (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 networking-tests6.yaml:9-30
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql/mysql-server:8.0.23
  11 │     imagePullPolicy: IfNotPresent
  12 │     volumeMounts:
  13 │     - name: mysql-initdb
  14 │       mountPath: /docker-entrypoint-initdb.d
  15 │     - name: config-volume
  16 │       mountPath: /etc/mysql/conf.d
  17 └     env:
  ..   
────────────────────────────────────────



networking-tests7.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 networking-tests7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests7.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests7.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 └       value: fleetman
────────────────────────────────────────



networking-tests8.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 networking-tests8.yaml:9-22
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 │       value: fleetman
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 networking-tests8.yaml:9-22
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 │       value: fleetman
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 networking-tests8.yaml:9-22
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 │       value: fleetman
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 networking-tests8.yaml:9-22
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 │       value: fleetman
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networking-tests8.yaml:9-22
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 │       value: fleetman
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networking-tests8.yaml:9-22
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 │       value: fleetman
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networking-tests8.yaml:9-22
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 │       value: fleetman
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 networking-tests8.yaml:9-22
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 │       value: fleetman
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 networking-tests8.yaml:9-22
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 │       value: fleetman
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 networking-tests8.yaml:9-22
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 │       value: fleetman
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 networking-tests8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests8.yaml:9-22
────────────────────────────────────────
   9 ┌   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 │       value: fleetman
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networking-tests8.yaml:8-22
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mysql
  10 │     image: mysql:5
  11 │     env:
  12 │     - name: MYSQL_ROOT_PASSWORD
  13 │       value: password
  14 │     - name: MYSQL_DATABASE
  15 │       value: fleetman
  16 └     resources:
  ..   
────────────────────────────────────────



networkpolicy151_3.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 networkpolicy151_3.yaml:23-86
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'keycloak' of Deployment 'keycloak' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networkpolicy151_3.yaml:23-86
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 networkpolicy151_3.yaml:23-86
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networkpolicy151_3.yaml:23-86
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networkpolicy151_3.yaml:23-86
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container keycloak in deployment keycloak (namespace: test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 networkpolicy151_3.yaml:23-86
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────



networktool-deployment.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'networktool' of Deployment 'networktool-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'networktool' of Deployment 'networktool-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'networktool' of 'deployment' 'networktool-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'networktool' of Deployment 'networktool-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'networktool' of Deployment 'networktool-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'networktool' of Deployment 'networktool-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'networktool' of Deployment 'networktool-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'networktool' of Deployment 'networktool-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'networktool' of Deployment 'networktool-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'networktool' of Deployment 'networktool-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'networktool' of Deployment 'networktool-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'networktool' of Deployment 'networktool-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "networktool" of deployment "networktool-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment networktool-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 networktool-deployment.yaml:4
────────────────────────────────────────
   4 [   name: networktool-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container networktool-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment networktool-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 networktool-deployment.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container networktool in deployment networktool-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 networktool-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: networktool
  17 └           image: wbitt/network-multitool
────────────────────────────────────────



neuro_ai_deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'neuro-clash-ai' of Deployment 'neuro-clash-ai-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'neuro-clash-ai' of Deployment 'neuro-clash-ai-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'neuro-clash-ai' of 'deployment' 'neuro-clash-ai-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'neuro-clash-ai' of Deployment 'neuro-clash-ai-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'neuro-clash-ai' of Deployment 'neuro-clash-ai-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'neuro-clash-ai' of Deployment 'neuro-clash-ai-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'neuro-clash-ai' of Deployment 'neuro-clash-ai-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'neuro-clash-ai' of Deployment 'neuro-clash-ai-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'neuro-clash-ai' of Deployment 'neuro-clash-ai-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'neuro-clash-ai' of Deployment 'neuro-clash-ai-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'neuro-clash-ai' of Deployment 'neuro-clash-ai-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'neuro-clash-ai' of Deployment 'neuro-clash-ai-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "neuro-clash-ai" of deployment "neuro-clash-ai-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment neuro-clash-ai-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 neuro_ai_deployment.yaml:4
────────────────────────────────────────
   4 [   name: neuro-clash-ai-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container neuro-clash-ai-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment neuro-clash-ai-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neuro_ai_deployment.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 └             - name: NEURO_CLASH_API_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container neuro-clash-ai in deployment neuro-clash-ai-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 neuro_ai_deployment.yaml:16-32
────────────────────────────────────────
  16 ┌         - name: neuro-clash-ai
  17 │           image: ghcr.io/cognitivecontrollab/neuro-clash-ai:latest
  18 │           ports:
  19 │           - containerPort: 9090
  20 │           env:
  21 │             - name: NEURO_CLASH_API_HOST
  22 │               value: "neuro-clash-api-service"
  23 │             - name: NEURO_CLASH_API_PORT
  24 └               value: "80"
  ..   
────────────────────────────────────────



never-ready.pod.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alpine' of Pod 'never-ready-jackal-wait-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 never-ready.pod.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 │         memory: "64Mi"
  15 └         cpu: "250m"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alpine' of Pod 'never-ready-jackal-wait-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 never-ready.pod.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 │         memory: "64Mi"
  15 └         cpu: "250m"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alpine' of 'pod' 'never-ready-jackal-wait-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 never-ready.pod.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 │         memory: "64Mi"
  15 └         cpu: "250m"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alpine' of Pod 'never-ready-jackal-wait-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 never-ready.pod.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 │         memory: "64Mi"
  15 └         cpu: "250m"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alpine' of Pod 'never-ready-jackal-wait-test' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 never-ready.pod.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 │         memory: "64Mi"
  15 └         cpu: "250m"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alpine' of Pod 'never-ready-jackal-wait-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 never-ready.pod.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 │         memory: "64Mi"
  15 └         cpu: "250m"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alpine' of Pod 'never-ready-jackal-wait-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 never-ready.pod.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 │         memory: "64Mi"
  15 └         cpu: "250m"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alpine' of Pod 'never-ready-jackal-wait-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 never-ready.pod.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 │         memory: "64Mi"
  15 └         cpu: "250m"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 never-ready.pod.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 │         memory: "64Mi"
  15 └         cpu: "250m"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alpine" of pod "never-ready-jackal-wait-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 never-ready.pod.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 │         memory: "64Mi"
  15 └         cpu: "250m"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 never-ready.pod.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 │         memory: "64Mi"
  15 └         cpu: "250m"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod never-ready-jackal-wait-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 never-ready.pod.yaml:4
────────────────────────────────────────
   4 [   name: never-ready-jackal-wait-test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container never-ready-jackal-wait-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 never-ready.pod.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 │         memory: "64Mi"
  15 └         cpu: "250m"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod never-ready-jackal-wait-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 never-ready.pod.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: alpine
   8 │     image: alpine:latest
   9 │     command:
  10 │       - "sleep"
  11 │       - "infinity"
  12 │     resources:
  13 │       requests:
  14 └         memory: "64Mi"
  ..   
────────────────────────────────────────



never-restart-policy.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-busybox2' of Pod 'my-pod2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-busybox2' of Pod 'my-pod2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-busybox2' of 'pod' 'my-pod2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-busybox2' of Pod 'my-pod2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-busybox2' of Pod 'my-pod2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-busybox2' of Pod 'my-pod2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-busybox2' of Pod 'my-pod2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-busybox2' of Pod 'my-pod2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-busybox2' of Pod 'my-pod2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-busybox2' of Pod 'my-pod2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-busybox2' of Pod 'my-pod2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-busybox2' of Pod 'my-pod2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-busybox2" of pod "my-pod2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 never-restart-policy.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-pod2
   5 │   labels:
   6 └     type: web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 never-restart-policy.yaml:10-12
────────────────────────────────────────
  10 ┌   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 never-restart-policy.yaml:8-12
────────────────────────────────────────
   8 ┌   restartPolicy: Never
   9 │   containers:
  10 │   - name: my-busybox2
  11 │     image: busybox
  12 └     command: ["sh", "-c", "slleeep 10"]
────────────────────────────────────────



never-restart.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'always-never-app' of Pod 'restart-never-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'always-never-app' of Pod 'restart-never-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'always-never-app' of 'pod' 'restart-never-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'always-never-app' of Pod 'restart-never-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'always-never-app' of Pod 'restart-never-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'always-never-app' of Pod 'restart-never-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'always-never-app' of Pod 'restart-never-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'always-never-app' of Pod 'restart-never-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'always-never-app' of Pod 'restart-never-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'always-never-app' of Pod 'restart-never-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'always-never-app' of Pod 'restart-never-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'always-never-app' of Pod 'restart-never-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "always-never-app" of pod "restart-never-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod restart-never-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 never-restart.yaml:4-6
────────────────────────────────────────
   4 ┌   name: restart-never-pod
   5 │   labels:
   6 └     name: restart-never-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container restart-never-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 never-restart.yaml:10-12
────────────────────────────────────────
  10 ┌    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod restart-never-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 never-restart.yaml:8-12
────────────────────────────────────────
   8 ┌   restartPolicy: Never
   9 │   containers:
  10 │    - name: always-never-app
  11 │      image: alpine
  12 └      command: ["sleep", "20"]
────────────────────────────────────────



never.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'Never-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'Never-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'Never-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'Never-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'Never-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'Never-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'Never-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'Never-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'Never-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'Never-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'Never-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'Never-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "Never-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod Never-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 never.yaml:4
────────────────────────────────────────
   4 [   name: Never-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container Never-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 never.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod Never-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 never.yaml:6-13
────────────────────────────────────────
   6 ┌   restartPolicy: OnFailure
   7 │   containers:
   8 │   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────



never4.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'Never-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'Never-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'Never-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'Never-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'Never-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'Never-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'Never-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'Never-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'Never-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'Never-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'Never-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'Never-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "Never-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod Never-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 never4.yaml:4
────────────────────────────────────────
   4 [   name: Never-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container Never-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 never4.yaml:8-13
────────────────────────────────────────
   8 ┌   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod Never-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 never4.yaml:6-13
────────────────────────────────────────
   6 ┌   restartPolicy: OnFailure
   7 │   containers:
   8 │   - image: busybox
   9 │     name: busybox
  10 │     command:
  11 │     - "sh"
  12 │     - "-c"
  13 └     - "sleep 10 && randomefdf"
────────────────────────────────────────



neverpolicy.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'student-app' of Pod 'student-app-one' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'student-app' of Pod 'student-app-one' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'student-app' of 'pod' 'student-app-one' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'student-app' of Pod 'student-app-one' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'student-app' of Pod 'student-app-one' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'student-app' of Pod 'student-app-one' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'student-app' of Pod 'student-app-one' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'student-app' of Pod 'student-app-one' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'student-app' of Pod 'student-app-one' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'student-app' of Pod 'student-app-one' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'student-app' of Pod 'student-app-one' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'student-app' of Pod 'student-app-one' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "student-app" of pod "student-app-one" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod student-app-one in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 neverpolicy.yaml:4
────────────────────────────────────────
   4 [   name: student-app-one
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container student-app-one in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neverpolicy.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod student-app-one in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neverpolicy.yaml:8-13
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: student-app
  10 │       image: tomcat
  11 │       ports:
  12 │         - containerPort: 8080
  13 └       imagePullPolicy: Never
────────────────────────────────────────



new-deploy.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'httpd' of Deployment 'new-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'httpd' of Deployment 'new-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'httpd' of 'deployment' 'new-deploy' in 'test-1' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'httpd' of Deployment 'new-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'httpd' of Deployment 'new-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'httpd' of Deployment 'new-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'httpd' of Deployment 'new-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'httpd' of Deployment 'new-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'httpd' of Deployment 'new-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'httpd' of Deployment 'new-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "httpd" of deployment "new-deploy" in "test-1" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment new-deploy in test-1 namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container new-deploy in test-1 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-deploy.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment new-deploy in test-1 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-deploy.yaml:21-30
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: httpd
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         resources:
  27 │           requests:
  28 │             memory: 5Mi
  29 │           limits:
  30 └             memory: 10Mi
────────────────────────────────────────



new-deployment.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'httpd' of Deployment 'httpd-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'httpd' of 'deployment' 'httpd-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'httpd' of Deployment 'httpd-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'httpd' of Deployment 'httpd-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "httpd" of deployment "httpd-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment httpd-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: httpd-frontend 
   5 │   labels:
   6 └     app: httpd-frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container httpd-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment httpd-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-deployment.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────



new-deployment1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'httpd' of Deployment 'httpd-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'httpd' of 'deployment' 'httpd-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'httpd' of Deployment 'httpd-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'httpd' of Deployment 'httpd-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'httpd' of Deployment 'httpd-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "httpd" of deployment "httpd-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment httpd-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-deployment1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: httpd-frontend 
   5 │   labels:
   6 └     app: httpd-frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container httpd-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment httpd-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-deployment1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: httpd
  17 └           image: httpd:2.4-alpine
────────────────────────────────────────



new-myapp.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myapp' of Deployment 'myapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-myapp.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myapp
   5 │   labels:
   6 └     app: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-myapp.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 new-myapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: myapp
  19 │         image: kyubhinhan/myapp-green
  20 │         ports:
  21 └         - containerPort: 3000
────────────────────────────────────────



new-version_17.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ambassador' of Deployment 'ambassador' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new-version_17.yaml:20-47
────────────────────────────────────────
  20 ┌       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 │           requests:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ambassador' of Deployment 'ambassador' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new-version_17.yaml:20-47
────────────────────────────────────────
  20 ┌       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 │           requests:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ambassador' of 'deployment' 'ambassador' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new-version_17.yaml:20-47
────────────────────────────────────────
  20 ┌       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 │           requests:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ambassador' of Deployment 'ambassador' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new-version_17.yaml:20-47
────────────────────────────────────────
  20 ┌       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 │           requests:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ambassador' of Deployment 'ambassador' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new-version_17.yaml:20-47
────────────────────────────────────────
  20 ┌       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 │           requests:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ambassador' of Deployment 'ambassador' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new-version_17.yaml:20-47
────────────────────────────────────────
  20 ┌       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 │           requests:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ambassador' of Deployment 'ambassador' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new-version_17.yaml:20-47
────────────────────────────────────────
  20 ┌       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 │           requests:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new-version_17.yaml:20-47
────────────────────────────────────────
  20 ┌       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 │           requests:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ambassador" of deployment "ambassador" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new-version_17.yaml:20-47
────────────────────────────────────────
  20 ┌       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 │           requests:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new-version_17.yaml:20-47
────────────────────────────────────────
  20 ┌       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 │           requests:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ambassador in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-version_17.yaml:4-5
────────────────────────────────────────
   4 ┌   name: ambassador
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ambassador in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_17.yaml:20-47
────────────────────────────────────────
  20 ┌       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 │           requests:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ambassador in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_17.yaml:18-47
────────────────────────────────────────
  18 ┌       serviceAccountName: ambassador
  19 │       containers:
  20 │       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ambassador in deployment ambassador (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 new-version_17.yaml:20-47
────────────────────────────────────────
  20 ┌       - name: ambassador
  21 │         image: quay.io/datawire/ambassador:0.51.2
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 400Mi
  26 │           requests:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────



new-version_18.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'cache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'cache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'cache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'cache' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'cache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'redis' of Deployment 'cache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'cache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'cache' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'cache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'cache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "cache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-version_18.yaml:4-7
────────────────────────────────────────
   4 ┌   name: cache
   5 │   namespace: default
   6 │   labels:
   7 └     service: cache
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_18.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_18.yaml:18-26
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: redis
  20 │         image: redis
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │         ports:
  26 └         - containerPort: 6379
────────────────────────────────────────



new-version_19.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'db' of Deployment 'db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'db' of Deployment 'db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'db' of 'deployment' 'db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'db' of Deployment 'db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'db' of Deployment 'db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'db' of Deployment 'db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'db' of Deployment 'db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'db' of Deployment 'db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'db' of Deployment 'db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'db' of Deployment 'db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "db" of deployment "db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-version_19.yaml:4-7
────────────────────────────────────────
   4 ┌   name: db
   5 │   namespace: default
   6 │   labels:
   7 └     service: db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_19.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 │         resources:
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_19.yaml:18-31
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: db
  20 │         image: mysql
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 │           value: 'true'
  24 │         - name: MYSQL_DATABASE
  25 │           value: demo
  26 └         resources:
  ..   
────────────────────────────────────────



new-version_20.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats-box' of Deployment 'release-name-nats-box' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats-box' of Deployment 'release-name-nats-box' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats-box' of 'deployment' 'release-name-nats-box' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats-box' of Deployment 'release-name-nats-box' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats-box' of Deployment 'release-name-nats-box' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats-box' of Deployment 'release-name-nats-box' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats-box' of Deployment 'release-name-nats-box' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats-box' of Deployment 'release-name-nats-box' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats-box' of Deployment 'release-name-nats-box' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats-box' of Deployment 'release-name-nats-box' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats-box' of Deployment 'release-name-nats-box' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats-box" of deployment "release-name-nats-box" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment release-name-nats-box in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-version_20.yaml:4-8
────────────────────────────────────────
   4 ┌   name: release-name-nats-box
   5 │   namespace: default
   6 │   labels:
   7 │     app: release-name-nats-box
   8 └     chart: nats-0.15.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container release-name-nats-box in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment release-name-nats-box in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_20.yaml:19-31
────────────────────────────────────────
  19 ┌       volumes: null
  20 │       containers:
  21 │       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 └           value: release-name-nats
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nats-box in deployment release-name-nats-box (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 new-version_20.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nats-box
  22 │         image: natsio/nats-box:0.8.1
  23 │         imagePullPolicy: IfNotPresent
  24 │         resources: null
  25 │         env:
  26 │         - name: NATS_URL
  27 │           value: release-name-nats
  28 │         command:
  29 └         - tail
  ..   
────────────────────────────────────────



new-version_21.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment release-name-api in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-version_21.yaml:4-7
────────────────────────────────────────
   4 ┌   name: release-name-api
   5 │   namespace: default
   6 │   labels:
   7 └     version: v4
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment release-name-api in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_21.yaml:19-69
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: api
  21 │         image: denvasyliev/k8sdiy:build-802e329
  22 │         command:
  23 │         - ./app
  24 │         - -role
  25 │         - api
  26 │         - -server
  27 └         - nats-cluster
  ..   
────────────────────────────────────────



new-version_22.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment release-name-ascii in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-version_22.yaml:4-7
────────────────────────────────────────
   4 ┌   name: release-name-ascii
   5 │   namespace: default
   6 │   labels:
   7 └     version: v4
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment release-name-ascii in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_22.yaml:19-54
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: ascii
  21 │         image: denvasyliev/k8sdiy:build-802e329
  22 │         command:
  23 │         - ./app
  24 │         - -role
  25 │         - ascii
  26 │         - -server
  27 └         - nats-cluster
  ..   
────────────────────────────────────────



new-version_23.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment release-name-data in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-version_23.yaml:4-7
────────────────────────────────────────
   4 ┌   name: release-name-data
   5 │   namespace: default
   6 │   labels:
   7 └     version: v4
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment release-name-data in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_23.yaml:19-53
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: data
  21 │         image: denvasyliev/k8sdiy:build-802e329
  22 │         command:
  23 │         - ./app
  24 │         - -role
  25 │         - data
  26 │         - -server
  27 └         - nats-cluster
  ..   
────────────────────────────────────────



new-version_24.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment release-name-front in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-version_24.yaml:4-7
────────────────────────────────────────
   4 ┌   name: release-name-front
   5 │   namespace: default
   6 │   labels:
   7 └     version: 3.0.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment release-name-front in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_24.yaml:19-29
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: front
  21 │         image: denvasyliev/k8sdiy:build-802e329
  22 │         imagePullPolicy: Always
  23 │         resources:
  24 │           requests:
  25 │             cpu: 100m
  26 │             memory: 100Mi
  27 └         ports:
  ..   
────────────────────────────────────────



new-version_25.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment release-name-img in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-version_25.yaml:4-7
────────────────────────────────────────
   4 ┌   name: release-name-img
   5 │   namespace: default
   6 │   labels:
   7 └     version: v4
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment release-name-img in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_25.yaml:19-54
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: img
  21 │         image: denvasyliev/k8sdiy:build-802e329
  22 │         command:
  23 │         - ./app
  24 │         - -role
  25 │         - img
  26 │         - -r
  27 └         - '0.2'
  ..   
────────────────────────────────────────



new-version_26.yaml (kubernetes)
================================
Tests: 146 (SUCCESSES: 97, FAILURES: 49)
Failures: 49 (UNKNOWN: 0, LOW: 31, MEDIUM: 11, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics' of StatefulSet 'release-name-nats' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nats' of StatefulSet 'release-name-nats' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'reloader' of StatefulSet 'release-name-nats' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics' of StatefulSet 'release-name-nats' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of StatefulSet 'release-name-nats' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'reloader' of StatefulSet 'release-name-nats' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics' of 'statefulset' 'release-name-nats' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'statefulset' 'release-name-nats' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'reloader' of 'statefulset' 'release-name-nats' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics' of StatefulSet 'release-name-nats' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of StatefulSet 'release-name-nats' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'reloader' of StatefulSet 'release-name-nats' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metrics' of StatefulSet 'release-name-nats' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of StatefulSet 'release-name-nats' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'reloader' of StatefulSet 'release-name-nats' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metrics' of StatefulSet 'release-name-nats' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of StatefulSet 'release-name-nats' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'reloader' of StatefulSet 'release-name-nats' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics' of StatefulSet 'release-name-nats' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of StatefulSet 'release-name-nats' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'reloader' of StatefulSet 'release-name-nats' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics' of StatefulSet 'release-name-nats' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of StatefulSet 'release-name-nats' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'reloader' of StatefulSet 'release-name-nats' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics' of StatefulSet 'release-name-nats' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of StatefulSet 'release-name-nats' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'reloader' of StatefulSet 'release-name-nats' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics' of StatefulSet 'release-name-nats' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of StatefulSet 'release-name-nats' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'reloader' of StatefulSet 'release-name-nats' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics' of StatefulSet 'release-name-nats' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of StatefulSet 'release-name-nats' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'reloader' of StatefulSet 'release-name-nats' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics" of statefulset "release-name-nats" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of statefulset "release-name-nats" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "reloader" of statefulset "release-name-nats" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset release-name-nats in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-version_26.yaml:4-11
────────────────────────────────────────
   4 ┌   name: release-name-nats
   5 │   namespace: default
   6 │   labels:
   7 │     helm.sh/chart: nats-0.15.0
   8 │     app.kubernetes.io/name: nats
   9 │     app.kubernetes.io/instance: release-name
  10 │     app.kubernetes.io/version: 2.7.4
  11 └     app.kubernetes.io/managed-by: Helm
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container release-name-nats in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_26.yaml:40-100
────────────────────────────────────────
  40 ┌       - name: nats
  41 │         image: nats:2.7.4-alpine
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources: {}
  44 │         ports:
  45 │         - containerPort: 4222
  46 │           name: client
  47 │         - containerPort: 6222
  48 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container release-name-nats in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container release-name-nats in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset release-name-nats in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_26.yaml:31-130
────────────────────────────────────────
  31 ┌       volumes:
  32 │       - name: config-volume
  33 │         configMap:
  34 │           name: release-name-nats-config
  35 │       - name: pid
  36 │         emptyDir: {}
  37 │       shareProcessNamespace: true
  38 │       terminationGracePeriodSeconds: 60
  39 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics in statefulset release-name-nats (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 new-version_26.yaml:116-130
────────────────────────────────────────
 116 ┌       - name: metrics
 117 │         image: natsio/prometheus-nats-exporter:0.9.1
 118 │         imagePullPolicy: IfNotPresent
 119 │         resources: {}
 120 │         args:
 121 │         - -connz
 122 │         - -routez
 123 │         - -subz
 124 └         - -varz
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container reloader in statefulset release-name-nats (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 new-version_26.yaml:101-115
────────────────────────────────────────
 101 ┌       - name: reloader
 102 │         image: natsio/nats-server-config-reloader:0.6.3
 103 │         imagePullPolicy: IfNotPresent
 104 │         resources: null
 105 │         command:
 106 │         - nats-server-config-reloader
 107 │         - -pid
 108 │         - /var/run/nats/nats.pid
 109 └         - -config
 ...   
────────────────────────────────────────



new-version_28.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats-box' of Pod 'release-name-nats-test-request-reply' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats-box' of Pod 'release-name-nats-test-request-reply' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats-box' of 'pod' 'release-name-nats-test-request-reply' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats-box' of Pod 'release-name-nats-test-request-reply' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats-box' of Pod 'release-name-nats-test-request-reply' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nats-box' of Pod 'release-name-nats-test-request-reply' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats-box' of Pod 'release-name-nats-test-request-reply' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats-box' of Pod 'release-name-nats-test-request-reply' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats-box' of Pod 'release-name-nats-test-request-reply' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats-box' of Pod 'release-name-nats-test-request-reply' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats-box' of Pod 'release-name-nats-test-request-reply' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats-box' of Pod 'release-name-nats-test-request-reply' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats-box" of pod "release-name-nats-test-request-reply" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod release-name-nats-test-request-reply in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new-version_28.yaml:4-12
────────────────────────────────────────
   4 ┌   name: release-name-nats-test-request-reply
   5 │   labels:
   6 │     helm.sh/chart: nats-0.15.0
   7 │     app.kubernetes.io/name: nats
   8 │     app.kubernetes.io/instance: release-name
   9 │     app.kubernetes.io/version: 2.7.4
  10 │     app.kubernetes.io/managed-by: Helm
  11 │   annotations:
  12 └     helm.sh/hook: test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container release-name-nats-test-request-reply in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod release-name-nats-test-request-reply in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new-version_28.yaml:14-38
────────────────────────────────────────
  14 ┌   containers:
  15 │   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 └     - -ec
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nats-box in pod release-name-nats-test-request-reply (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 new-version_28.yaml:15-35
────────────────────────────────────────
  15 ┌   - name: nats-box
  16 │     image: synadia/nats-box
  17 │     env:
  18 │     - name: NATS_HOST
  19 │       value: release-name-nats
  20 │     command:
  21 │     - /bin/sh
  22 │     - -ec
  23 └     - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1" &
  ..   
────────────────────────────────────────



new-version_4.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'release-name-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



new-version_5.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ambassador' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 new-version_5.yaml:15-25
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - configmaps
  19 │   verbs:
  20 │   - create
  21 │   - update
  22 │   - patch
  23 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ambassador' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 new-version_5.yaml:26-33
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - ''
  28 │   resources:
  29 │   - secrets
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 └   - watch
────────────────────────────────────────



new1.yaml (kubernetes)
======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simulador-eventos' of Pod 'simulador-eventos' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simulador-eventos' of Pod 'simulador-eventos' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simulador-eventos' of 'pod' 'simulador-eventos' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simulador-eventos' of Pod 'simulador-eventos' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simulador-eventos' of Pod 'simulador-eventos' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'simulador-eventos' of Pod 'simulador-eventos' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simulador-eventos' of Pod 'simulador-eventos' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simulador-eventos' of Pod 'simulador-eventos' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simulador-eventos' of Pod 'simulador-eventos' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simulador-eventos' of Pod 'simulador-eventos' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simulador-eventos' of Pod 'simulador-eventos' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simulador-eventos' of Pod 'simulador-eventos' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simulador-eventos" of pod "simulador-eventos" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod simulador-eventos in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 new1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: simulador-eventos
   6 └   name: simulador-eventos
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container simulador-eventos in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod simulador-eventos in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 new1.yaml:8-17
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 │       name: logs
  14 │   volumes:
  15 │   - name: logs
  16 │     persistentVolumeClaim:
  17 └       claimName: claim-simulador-eventos
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simulador-eventos in pod simulador-eventos (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 new1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: kodekloud/event-simulator
  10 │     name: simulador-eventos
  11 │     volumeMounts:
  12 │     - mountPath: /log
  13 └       name: logs
────────────────────────────────────────



newIngressctrl_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 newIngressctrl_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



newIngressctrl_15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 newIngressctrl_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



newIngressctrl_17.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 newIngressctrl_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 newIngressctrl_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newIngressctrl_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newIngressctrl_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 newIngressctrl_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 newIngressctrl_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newIngressctrl_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newIngressctrl_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newIngressctrl_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newIngressctrl_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newIngressctrl_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 newIngressctrl_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



newIngressctrl_18.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 newIngressctrl_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 newIngressctrl_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newIngressctrl_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newIngressctrl_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 newIngressctrl_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 newIngressctrl_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newIngressctrl_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newIngressctrl_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newIngressctrl_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newIngressctrl_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newIngressctrl_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 newIngressctrl_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



newIngressctrl_3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 newIngressctrl_3.yaml:12-23
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   - namespaces
  ..   
────────────────────────────────────────



newIngressctrl_5.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 newIngressctrl_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 newIngressctrl_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 newIngressctrl_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



newIngressctrl_9.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 newIngressctrl_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newIngressctrl_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 newIngressctrl_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newIngressctrl_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newIngressctrl_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newIngressctrl_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newIngressctrl_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 newIngressctrl_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newIngressctrl_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newIngressctrl_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newIngressctrl_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



newdep.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'httpd-frontend' of Deployment 'http-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'httpd-frontend' of Deployment 'http-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'httpd-frontend' of 'deployment' 'http-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'httpd-frontend' of Deployment 'http-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'httpd-frontend' of Deployment 'http-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'httpd-frontend' of Deployment 'http-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'httpd-frontend' of Deployment 'http-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'httpd-frontend' of Deployment 'http-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'httpd-frontend' of Deployment 'http-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'httpd-frontend' of Deployment 'http-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'httpd-frontend' of Deployment 'http-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "httpd-frontend" of deployment "http-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment http-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 newdep.yaml:4
────────────────────────────────────────
   4 [    name: http-frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container http-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newdep.yaml:16-17
────────────────────────────────────────
  16 ┌        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment http-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newdep.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │        - name: httpd-frontend
  17 └          image: httpd:2.4-alpine
────────────────────────────────────────



newdeployment.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'new-dp-cont' of Deployment 'new-dp-cont' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'new-dp-cont' of Deployment 'new-dp-cont' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'new-dp-cont' of 'deployment' 'new-dp-cont' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'new-dp-cont' of Deployment 'new-dp-cont' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'new-dp-cont' of Deployment 'new-dp-cont' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'new-dp-cont' of Deployment 'new-dp-cont' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'new-dp-cont' of Deployment 'new-dp-cont' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'new-dp-cont' of Deployment 'new-dp-cont' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'new-dp-cont' of Deployment 'new-dp-cont' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "new-dp-cont" of deployment "new-dp-cont" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment new-dp-cont in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 newdeployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: new-dp-cont
   5 │   labels:
   6 └     brand: indian
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment new-dp-cont in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container new-dp-cont in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment new-dp-cont in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newdeployment.yaml:25-33
────────────────────────────────────────
  25 ┌       containers:
  26 │       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container new-dp-cont in deployment new-dp-cont (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 newdeployment.yaml:26-33
────────────────────────────────────────
  26 ┌       - name: new-dp-cont
  27 │         image: devopsinsiders/profile:v2
  28 │         resources:
  29 │           limits:
  30 │             memory: "128Mi"
  31 │             cpu: "500m"
  32 │         ports:
  33 └           - containerPort: 80
────────────────────────────────────────



newingressctrl1_13.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 newingressctrl1_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



newingressctrl1_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 newingressctrl1_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



newingressctrl1_17.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 newingressctrl1_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 newingressctrl1_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newingressctrl1_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newingressctrl1_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 newingressctrl1_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 newingressctrl1_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newingressctrl1_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newingressctrl1_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newingressctrl1_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newingressctrl1_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newingressctrl1_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 newingressctrl1_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



newingressctrl1_18.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 newingressctrl1_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 newingressctrl1_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newingressctrl1_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newingressctrl1_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 newingressctrl1_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 newingressctrl1_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newingressctrl1_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newingressctrl1_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newingressctrl1_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newingressctrl1_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newingressctrl1_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 newingressctrl1_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



newingressctrl1_3.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 newingressctrl1_3.yaml:12-23
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   - namespaces
  ..   
────────────────────────────────────────



newingressctrl1_5.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 newingressctrl1_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 newingressctrl1_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 newingressctrl1_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



newingressctrl1_9.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 newingressctrl1_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newingressctrl1_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 newingressctrl1_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newingressctrl1_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newingressctrl1_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newingressctrl1_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newingressctrl1_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 newingressctrl1_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newingressctrl1_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newingressctrl1_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newingressctrl1_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



newnginx.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'newnginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'newnginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'newnginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'newnginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'newnginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'newnginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'newnginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'newnginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'newnginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'newnginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'newnginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'newnginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "newnginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment newnginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 newnginx.yaml:4-8
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: newnginx
   7 │     type: canary
   8 └   name: newnginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container newnginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newnginx.yaml:23-28
────────────────────────────────────────
  23 ┌       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 └           mountPath: /usr/share/nginx/html/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment newnginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newnginx.yaml:22-32
────────────────────────────────────────
  22 ┌       containers:
  23 │       - image: nginx
  24 │         name: nginx
  25 │         resources: {}
  26 │         volumeMounts:
  27 │         - name: configfile
  28 │           mountPath: /usr/share/nginx/html/
  29 │       volumes:
  30 └       - name: configfile
  ..   
────────────────────────────────────────



newpod.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'democontainer' of Pod 'nginxwebserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'democontainer' of Pod 'nginxwebserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'democontainer' of 'pod' 'nginxwebserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'democontainer' of Pod 'nginxwebserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'democontainer' of Pod 'nginxwebserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'democontainer' of Pod 'nginxwebserver' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'democontainer' of Pod 'nginxwebserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'democontainer' of Pod 'nginxwebserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'democontainer' of Pod 'nginxwebserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'democontainer' of Pod 'nginxwebserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'democontainer' of Pod 'nginxwebserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'democontainer' of Pod 'nginxwebserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "democontainer" of pod "nginxwebserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginxwebserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 newpod.yaml:4
────────────────────────────────────────
   4 [   name: nginxwebserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginxwebserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newpod.yaml:9-10
────────────────────────────────────────
   9 ┌     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginxwebserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newpod.yaml:6-10
────────────────────────────────────────
   6 ┌   imagePullSecrets:
   7 │     - name: myregistrykey
   8 │   containers:
   9 │     - image: nginx
  10 └       name: democontainer
────────────────────────────────────────



newpod1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'c00' of Pod 'newpod1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'c00' of Pod 'newpod1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'c00' of 'pod' 'newpod1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'c00' of Pod 'newpod1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'c00' of Pod 'newpod1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'c00' of Pod 'newpod1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'c00' of Pod 'newpod1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'c00' of Pod 'newpod1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'c00' of Pod 'newpod1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'c00' of Pod 'newpod1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'c00' of Pod 'newpod1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'c00' of Pod 'newpod1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "c00" of pod "newpod1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod newpod1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 newpod1.yaml:5
────────────────────────────────────────
   5 [   name: newpod1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container newpod1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newpod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: c00
   9 │       image: ubuntu
  10 └       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod newpod1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newpod1.yaml:7-11
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: c00
   9 │       image: ubuntu
  10 │       command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
  11 └   restartPolicy: Never
────────────────────────────────────────



newrelic-daemonset.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 90, FAILURES: 24)
Failures: 24 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 8, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'newrelic' of 'daemonset' 'newrelic-agent' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0006 (HIGH): DaemonSet 'newrelic-agent' should not specify '/var/run/docker.socker' in 'spec.template.volumes.hostPath.path'
════════════════════════════════════════
Mounting docker.sock from the host can give the container full root access to the host.

See https://avd.aquasec.com/misconfig/ksv006
────────────────────────────────────────
 newrelic-daemonset.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0008 (HIGH): DaemonSet 'newrelic-agent' should not set 'spec.template.spec.hostIPC' to true
════════════════════════════════════════
Sharing the host’s IPC namespace allows container processes to communicate with processes on the host.

See https://avd.aquasec.com/misconfig/ksv008
────────────────────────────────────────
 newrelic-daemonset.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'newrelic-agent' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 newrelic-daemonset.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0010 (HIGH): DaemonSet 'newrelic-agent' should not set 'spec.template.spec.hostPID' to true
════════════════════════════════════════
Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.

See https://avd.aquasec.com/misconfig/ksv010
────────────────────────────────────────
 newrelic-daemonset.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'newrelic' of DaemonSet 'newrelic-agent' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'newrelic-agent' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 newrelic-daemonset.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "newrelic" of daemonset "newrelic-agent" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset newrelic-agent in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 newrelic-daemonset.yaml:4-8
────────────────────────────────────────
   4 ┌   name: newrelic-agent
   5 │   labels:
   6 │     tier: monitoring
   7 │     app: newrelic-agent
   8 └     version: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset newrelic-agent in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newrelic-daemonset.yaml:21-64
────────────────────────────────────────
  21 ┌       hostPID: true
  22 │       hostIPC: true
  23 │       hostNetwork: true
  24 │       containers:
  25 │         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 └             privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset newrelic-agent in default namespace shouldn't have volumes set to {"/dev", "/sys"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 newrelic-daemonset.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container newrelic in daemonset newrelic-agent (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 newrelic-daemonset.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────



newrelic-daemonset1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 90, FAILURES: 24)
Failures: 24 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 8, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'newrelic' of 'daemonset' 'newrelic-agent' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0006 (HIGH): DaemonSet 'newrelic-agent' should not specify '/var/run/docker.socker' in 'spec.template.volumes.hostPath.path'
════════════════════════════════════════
Mounting docker.sock from the host can give the container full root access to the host.

See https://avd.aquasec.com/misconfig/ksv006
────────────────────────────────────────
 newrelic-daemonset1.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0008 (HIGH): DaemonSet 'newrelic-agent' should not set 'spec.template.spec.hostIPC' to true
════════════════════════════════════════
Sharing the host’s IPC namespace allows container processes to communicate with processes on the host.

See https://avd.aquasec.com/misconfig/ksv008
────────────────────────────────────────
 newrelic-daemonset1.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'newrelic-agent' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 newrelic-daemonset1.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0010 (HIGH): DaemonSet 'newrelic-agent' should not set 'spec.template.spec.hostPID' to true
════════════════════════════════════════
Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.

See https://avd.aquasec.com/misconfig/ksv010
────────────────────────────────────────
 newrelic-daemonset1.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'newrelic' of DaemonSet 'newrelic-agent' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'newrelic-agent' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 newrelic-daemonset1.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "newrelic" of daemonset "newrelic-agent" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset newrelic-agent in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 newrelic-daemonset1.yaml:4-8
────────────────────────────────────────
   4 ┌   name: newrelic-agent
   5 │   labels:
   6 │     tier: monitoring
   7 │     app: newrelic-agent
   8 └     version: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset newrelic-agent in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newrelic-daemonset1.yaml:21-64
────────────────────────────────────────
  21 ┌       hostPID: true
  22 │       hostIPC: true
  23 │       hostNetwork: true
  24 │       containers:
  25 │         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 └             privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset newrelic-agent in default namespace shouldn't have volumes set to {"/dev", "/sys"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 newrelic-daemonset1.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container newrelic in daemonset newrelic-agent (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 newrelic-daemonset1.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────



newrelic-daemonset2.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 90, FAILURES: 24)
Failures: 24 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 8, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'newrelic' of 'daemonset' 'newrelic-agent' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0006 (HIGH): DaemonSet 'newrelic-agent' should not specify '/var/run/docker.socker' in 'spec.template.volumes.hostPath.path'
════════════════════════════════════════
Mounting docker.sock from the host can give the container full root access to the host.

See https://avd.aquasec.com/misconfig/ksv006
────────────────────────────────────────
 newrelic-daemonset2.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0008 (HIGH): DaemonSet 'newrelic-agent' should not set 'spec.template.spec.hostIPC' to true
════════════════════════════════════════
Sharing the host’s IPC namespace allows container processes to communicate with processes on the host.

See https://avd.aquasec.com/misconfig/ksv008
────────────────────────────────────────
 newrelic-daemonset2.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'newrelic-agent' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 newrelic-daemonset2.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0010 (HIGH): DaemonSet 'newrelic-agent' should not set 'spec.template.spec.hostPID' to true
════════════════════════════════════════
Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.

See https://avd.aquasec.com/misconfig/ksv010
────────────────────────────────────────
 newrelic-daemonset2.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'newrelic' of DaemonSet 'newrelic-agent' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'newrelic' of DaemonSet 'newrelic-agent' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'newrelic-agent' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 newrelic-daemonset2.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "newrelic" of daemonset "newrelic-agent" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset newrelic-agent in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 newrelic-daemonset2.yaml:4-8
────────────────────────────────────────
   4 ┌   name: newrelic-agent
   5 │   labels:
   6 │     tier: monitoring
   7 │     app: newrelic-agent
   8 └     version: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset newrelic-agent in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 newrelic-daemonset2.yaml:21-64
────────────────────────────────────────
  21 ┌       hostPID: true
  22 │       hostIPC: true
  23 │       hostNetwork: true
  24 │       containers:
  25 │         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 └             privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset newrelic-agent in default namespace shouldn't have volumes set to {"/dev", "/sys"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 newrelic-daemonset2.yaml:10-64
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       name: newrelic
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         name: newrelic
  17 │     spec:
  18 └       # Filter to specific nodes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container newrelic in daemonset newrelic-agent (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 newrelic-daemonset2.yaml:25-47
────────────────────────────────────────
  25 ┌         - resources:
  26 │             requests:
  27 │               cpu: 0.15
  28 │           securityContext:
  29 │             privileged: true
  30 │           env:
  31 │             - name: NRSYSMOND_logfile
  32 │               value: "/var/log/nrsysmond.log"
  33 └           image: newrelic/nrsysmond
  ..   
────────────────────────────────────────



news-apd.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-apd1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd1.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd1.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd1.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-apd10.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd10.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd10.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd10.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-apd11.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd11.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd11.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd11.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-apd12.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd12.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd12.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd12.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-apd2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd2.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd2.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd2.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-apd3.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd3.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd3.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd3.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-apd4.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd4.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd4.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd4.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-apd5.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd5.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd5.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd5.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-apd6.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd6.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd6.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd6.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-apd7.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd7.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd7.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd7.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-apd8.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd8.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd8.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd8.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-apd9.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-apd-container' of 'deployment' 'news-apd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-apd-container' of Deployment 'news-apd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-apd-container" of deployment "news-apd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-apd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-apd9.yaml:5
────────────────────────────────────────
   5 [   name: news-apd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-apd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd9.yaml:17-22
────────────────────────────────────────
  17 ┌       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-apd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-apd9.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: news-apd-container
  18 │         image: busybox:1.28
  19 │         command:
  20 │          - sh
  21 │          - -c
  22 └          - "sleeeep 45000"
────────────────────────────────────────



news-cronjob.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-consumer' of CronJob 'news-consumer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-consumer' of CronJob 'news-consumer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-consumer' of 'cronjob' 'news-consumer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-consumer' of CronJob 'news-consumer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-consumer' of CronJob 'news-consumer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'news-consumer' of CronJob 'news-consumer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-consumer' of CronJob 'news-consumer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-consumer' of CronJob 'news-consumer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-consumer' of CronJob 'news-consumer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-consumer' of CronJob 'news-consumer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-consumer' of CronJob 'news-consumer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-consumer' of CronJob 'news-consumer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-consumer" of cronjob "news-consumer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob news-consumer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-cronjob.yaml:4
────────────────────────────────────────
   4 [   name: news-consumer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-consumer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-cronjob.yaml:12-13
────────────────────────────────────────
  12 ┌           - name: news-consumer
  13 └             image: news-consumer:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob news-consumer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-cronjob.yaml:11-14
────────────────────────────────────────
  11 ┌           containers:
  12 │           - name: news-consumer
  13 │             image: news-consumer:latest
  14 └           restartPolicy: OnFailure
────────────────────────────────────────



news-portal-deployment.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-portal-container' of 'deployment' 'news-portal-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-portal-container" of deployment "news-portal-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-portal-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-portal-deployment.yaml:4
────────────────────────────────────────
   4 [   name: news-portal-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment news-portal-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-portal-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-portal-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-portal-deployment.yaml:12-19
────────────────────────────────────────
  12 ┌       containers:
  13 │         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container news-portal-container in deployment news-portal-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 news-portal-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: portal-configmap
────────────────────────────────────────



news-portal-deployment1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-portal-container' of 'deployment' 'news-portal-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-portal-container' of Deployment 'news-portal-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-portal-container" of deployment "news-portal-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-portal-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-portal-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: news-portal-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment news-portal-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-portal-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-portal-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-portal-deployment1.yaml:12-36
────────────────────────────────────────
  12 ┌       containers:
  13 │         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 └           livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container news-portal-container in deployment news-portal-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 news-portal-deployment1.yaml:13-36
────────────────────────────────────────
  13 ┌         - name: news-portal-container
  14 │           image: aluracursos/portal-noticias:1
  15 │           ports:
  16 │             - containerPort: 80
  17 │           envFrom:
  18 │             - configMapRef:
  19 │                 name: portal-configmap
  20 │           livenessProbe:
  21 └             httpGet:
  ..   
────────────────────────────────────────



news-portal-replicaset.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-portal' of ReplicaSet 'news-portal-replicaset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-portal' of ReplicaSet 'news-portal-replicaset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-portal' of 'replicaset' 'news-portal-replicaset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-portal' of ReplicaSet 'news-portal-replicaset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-portal' of ReplicaSet 'news-portal-replicaset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-portal' of ReplicaSet 'news-portal-replicaset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-portal' of ReplicaSet 'news-portal-replicaset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-portal' of ReplicaSet 'news-portal-replicaset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-portal' of ReplicaSet 'news-portal-replicaset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-portal' of ReplicaSet 'news-portal-replicaset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-portal' of ReplicaSet 'news-portal-replicaset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-portal" of replicaset "news-portal-replicaset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset news-portal-replicaset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-portal-replicaset.yaml:4
────────────────────────────────────────
   4 [   name: news-portal-replicaset
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset news-portal-replicaset in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-portal-replicaset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset news-portal-replicaset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-portal-replicaset.yaml:12-19
────────────────────────────────────────
  12 ┌       containers:
  13 │       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container news-portal in replicaset news-portal-replicaset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 news-portal-replicaset.yaml:13-19
────────────────────────────────────────
  13 ┌       - name: news-portal
  14 │         image: aluracursos/portal-noticias:1
  15 │         ports:
  16 │           - containerPort: 80
  17 │         envFrom:
  18 │           - configMapRef:
  19 └               name: portal-configmap
────────────────────────────────────────



news-portal.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-portal-container' of Pod 'news-portal' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-portal-container' of 'pod' 'news-portal' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-portal-container" of pod "news-portal" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod news-portal in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-portal.yaml:4-6
────────────────────────────────────────
   4 ┌   name: news-portal
   5 │   labels:
   6 └     app: news-portal
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod news-portal in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-portal in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod news-portal in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-portal.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container news-portal-container in pod news-portal (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 news-portal.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-portal-container
  10 │       image: aluracursos/portal-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: portal-configmap
────────────────────────────────────────



news-portal1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-portal-container' of Pod 'news-portal' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-portal-container' of 'pod' 'news-portal' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-portal-container" of pod "news-portal" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod news-portal in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-portal1.yaml:4
────────────────────────────────────────
   4 [   name: news-portal
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-portal in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod news-portal in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-portal1.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container news-portal-container in pod news-portal (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 news-portal1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: news-portal-container
   8 └       image: aluracursos/portal-noticias:1
────────────────────────────────────────



news-portal2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-portal-container' of Pod 'news-portal' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-portal-container' of 'pod' 'news-portal' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-portal-container' of Pod 'news-portal' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-portal-container" of pod "news-portal" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod news-portal in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-portal2.yaml:4
────────────────────────────────────────
   4 [   name: news-portal
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod news-portal in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-portal in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod news-portal in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-portal2.yaml:7-14
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container news-portal-container in pod news-portal (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 news-portal2.yaml:8-14
────────────────────────────────────────
   8 ┌     - name: news-portal-container
   9 │       image: aluracursos/portal-noticias:1
  10 │       ports:
  11 │         - containerPort: 80
  12 │       envFrom:
  13 │         - configMapRef:
  14 └           name: news-portal-configmap
────────────────────────────────────────



news-system-deployment.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-system-container' of Deployment 'news-system-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-system-container' of Deployment 'news-system-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-system-container' of 'deployment' 'news-system-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-system-container' of Deployment 'news-system-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-system-container' of Deployment 'news-system-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-system-container' of Deployment 'news-system-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-system-container' of Deployment 'news-system-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-system-container' of Deployment 'news-system-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-system-container' of Deployment 'news-system-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-system-container' of Deployment 'news-system-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-system-container' of Deployment 'news-system-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-system-container" of deployment "news-system-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment news-system-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-system-deployment.yaml:4
────────────────────────────────────────
   4 [   name: news-system-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-system-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment news-system-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-system-deployment.yaml:12-19
────────────────────────────────────────
  12 ┌       containers:
  13 │         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container news-system-container in deployment news-system-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 news-system-deployment.yaml:13-19
────────────────────────────────────────
  13 ┌         - name: news-system-container
  14 │           image: aluracursos/sistema-noticias:1
  15 │           ports:
  16 │             - containerPort: 8080
  17 │           envFrom:
  18 │             - configMapRef:
  19 └                 name: system-configmap
────────────────────────────────────────



news-system-statefulset.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-system-container' of StatefulSet 'news-system-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-system-container' of StatefulSet 'news-system-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-system-container' of 'statefulset' 'news-system-statefulset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-system-container' of StatefulSet 'news-system-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-system-container' of StatefulSet 'news-system-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-system-container' of StatefulSet 'news-system-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-system-container' of StatefulSet 'news-system-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-system-container' of StatefulSet 'news-system-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-system-container' of StatefulSet 'news-system-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-system-container' of StatefulSet 'news-system-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-system-container' of StatefulSet 'news-system-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-system-container" of statefulset "news-system-statefulset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset news-system-statefulset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-system-statefulset.yaml:4
────────────────────────────────────────
   4 [   name: news-system-statefulset
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset news-system-statefulset in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-system-statefulset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset news-system-statefulset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-system-statefulset.yaml:13-46
────────────────────────────────────────
  13 ┌       containers:
  14 │         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container news-system-container in statefulset news-system-statefulset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 news-system-statefulset.yaml:14-39
────────────────────────────────────────
  14 ┌         - name: news-system-container
  15 │           image: aluracursos/sistema-noticias:1
  16 │           ports:
  17 │             - containerPort: 80
  18 │           envFrom:
  19 │             - configMapRef:
  20 │                 name: system-configmap
  21 │           volumeMounts:
  22 └             - name: images
  ..   
────────────────────────────────────────



news-system.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'news-system-container' of Pod 'news-system' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'news-system-container' of Pod 'news-system' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'news-system-container' of 'pod' 'news-system' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'news-system-container' of Pod 'news-system' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'news-system-container' of Pod 'news-system' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'news-system-container' of Pod 'news-system' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'news-system-container' of Pod 'news-system' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'news-system-container' of Pod 'news-system' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'news-system-container' of Pod 'news-system' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'news-system-container' of Pod 'news-system' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'news-system-container' of Pod 'news-system' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "news-system-container" of pod "news-system" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod news-system in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 news-system.yaml:4-6
────────────────────────────────────────
   4 ┌   name: news-system
   5 │   labels:
   6 └     app: news-system
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod news-system in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container news-system in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod news-system in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 news-system.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container news-system-container in pod news-system (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 news-system.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: news-system-container
  10 │       image: aluracursos/sistema-noticias:1
  11 │       ports:
  12 │         - containerPort: 80
  13 │       envFrom:
  14 │         - configMapRef:
  15 └             name: system-configmap
────────────────────────────────────────



next-deployment-test.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'next' of Deployment 'next-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'next' of Deployment 'next-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'next' of 'deployment' 'next-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'next' of Deployment 'next-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'next' of Deployment 'next-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'next' of Deployment 'next-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'next' of Deployment 'next-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'next' of Deployment 'next-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'next' of Deployment 'next-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'next' of Deployment 'next-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'next' of Deployment 'next-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "next" of deployment "next-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment next-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 next-deployment-test.yaml:4-6
────────────────────────────────────────
   4 ┌   name: next-deployment
   5 │   labels:
   6 └     app: next
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container next-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment next-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 next-deployment-test.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container next in deployment next-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 next-deployment-test.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 └             - containerPort: 3000
────────────────────────────────────────



next-deployment.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'next' of Deployment 'next-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'next' of Deployment 'next-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'next' of 'deployment' 'next-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'next' of Deployment 'next-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'next' of Deployment 'next-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'next' of Deployment 'next-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'next' of Deployment 'next-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'next' of Deployment 'next-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'next' of Deployment 'next-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'next' of Deployment 'next-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'next' of Deployment 'next-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'next' of Deployment 'next-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "next" of deployment "next-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment next-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 next-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: next-deployment
   5 │   labels:
   6 └     app: next
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container next-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment next-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 next-deployment.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container next in deployment next-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 next-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: next
  19 │           image: windsnow1025/next
  20 │           ports:
  21 └             - containerPort: 3000
────────────────────────────────────────



next-service1_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-frontend' of Deployment 'next-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-frontend' of Deployment 'next-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-frontend' of 'deployment' 'next-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-frontend' of Deployment 'next-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-frontend' of Deployment 'next-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-frontend' of Deployment 'next-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-frontend' of Deployment 'next-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-frontend' of Deployment 'next-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-frontend' of Deployment 'next-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-frontend' of Deployment 'next-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-frontend" of deployment "next-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment next-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 next-service1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: next-deployment
   5 │   labels:
   6 └     app: next
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container next-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment next-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 next-service1_1.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-frontend in deployment next-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 next-service1_1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: kubernetes-frontend
  18 │         image: domhall/kubernetes-frontend:latest
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: API_URL
  23 │           value: http://api-service
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────



nextcloud-deploy.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nextcloud' of 'deployment' 'nextcloud' in 'nextcloud' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nextcloud" of deployment "nextcloud" in "nextcloud" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nextcloud in nextcloud namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nextcloud in nextcloud namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deploy.yaml:19-67
────────────────────────────────────────
  19 ┌         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 │ 
  27 └             - name: MYSQL_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nextcloud in nextcloud namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deploy.yaml:18-67
────────────────────────────────────────
  18 ┌       containers:
  19 │         - image: nextcloud
  20 │           name: nextcloud 
  21 │           ports:
  22 │             - containerPort: 80
  23 │           env:
  24 │             - name: REDIS_HOST
  25 │               value: redis
  26 └ 
  ..   
────────────────────────────────────────



nextcloud-deployment.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nextcloud-deployment.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nextcloud' of Deployment 'nextcloud-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nextcloud-deployment.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nextcloud' of 'deployment' 'nextcloud-app' in 'nextcloud' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nextcloud-deployment.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nextcloud-deployment.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nextcloud-deployment.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nextcloud-deployment.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nextcloud-deployment.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nextcloud-deployment.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nextcloud" of deployment "nextcloud-app" in "nextcloud" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nextcloud-deployment.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nextcloud-deployment.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nextcloud-app in nextcloud namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nextcloud-app in nextcloud namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deployment.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nextcloud-app in nextcloud namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deployment.yaml:23-82
────────────────────────────────────────
  23 ┌       affinity:
  24 │         nodeAffinity:
  25 │           preferredDuringSchedulingIgnoredDuringExecution:
  26 │           - weight: 1
  27 │             preference:
  28 │               matchExpressions:
  29 │               - key: node-role.kubernetes.io/APP
  30 │                 operator: In
  31 └                 values:
  ..   
────────────────────────────────────────



nextcloud-deployment1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nextcloud-deployment1.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nextcloud' of Deployment 'nextcloud-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nextcloud-deployment1.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nextcloud' of 'deployment' 'nextcloud-app' in 'nextcloud' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nextcloud-deployment1.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nextcloud-deployment1.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nextcloud-deployment1.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nextcloud-deployment1.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nextcloud-deployment1.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nextcloud-deployment1.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nextcloud" of deployment "nextcloud-app" in "nextcloud" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nextcloud-deployment1.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nextcloud-deployment1.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nextcloud-app in nextcloud namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deployment1.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nextcloud-app in nextcloud namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deployment1.yaml:29-88
────────────────────────────────────────
  29 ┌       affinity:
  30 │         nodeAffinity:
  31 │           preferredDuringSchedulingIgnoredDuringExecution:
  32 │           - weight: 1
  33 │             preference:
  34 │               matchExpressions:
  35 │               - key: node-role.kubernetes.io/APP
  36 │                 operator: In
  37 └                 values:
  ..   
────────────────────────────────────────



nextcloud-deployment2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nextcloud-deployment2.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nextcloud' of Deployment 'nextcloud-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nextcloud-deployment2.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nextcloud' of 'deployment' 'nextcloud-app' in 'nextcloud' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nextcloud-deployment2.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nextcloud-deployment2.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nextcloud-deployment2.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nextcloud-deployment2.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nextcloud-deployment2.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nextcloud-deployment2.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nextcloud" of deployment "nextcloud-app" in "nextcloud" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nextcloud-deployment2.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nextcloud-deployment2.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nextcloud-app in nextcloud namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nextcloud-app in nextcloud namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deployment2.yaml:41-82
────────────────────────────────────────
  41 ┌       - image: nextcloud:27.0.0-apache
  42 │         name: nextcloud
  43 │         imagePullPolicy: Always
  44 │         resources:
  45 │           requests:
  46 │             memory: 250Mi
  47 │             cpu: 355m
  48 │           limits:
  49 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nextcloud-app in nextcloud namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deployment2.yaml:23-82
────────────────────────────────────────
  23 ┌       affinity:
  24 │         nodeAffinity:
  25 │           preferredDuringSchedulingIgnoredDuringExecution:
  26 │           - weight: 1
  27 │             preference:
  28 │               matchExpressions:
  29 │               - key: node-role.kubernetes.io/APP
  30 │                 operator: In
  31 └                 values:
  ..   
────────────────────────────────────────



nextcloud-deployment3.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nextcloud-deployment3.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nextcloud' of Deployment 'nextcloud-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nextcloud-deployment3.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nextcloud' of 'deployment' 'nextcloud-app' in 'nextcloud' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nextcloud-deployment3.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nextcloud-deployment3.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nextcloud-deployment3.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nextcloud-deployment3.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nextcloud' of Deployment 'nextcloud-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nextcloud-deployment3.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nextcloud-deployment3.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nextcloud" of deployment "nextcloud-app" in "nextcloud" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nextcloud-deployment3.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nextcloud-deployment3.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nextcloud-app in nextcloud namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deployment3.yaml:47-88
────────────────────────────────────────
  47 ┌       - image: nextcloud:27.0.1-fpm-alpine
  48 │         name: nextcloud
  49 │         imagePullPolicy: Always
  50 │         resources:
  51 │           requests:
  52 │             memory: 250Mi
  53 │             cpu: 355m
  54 │           limits:
  55 └             memory: 670Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nextcloud-app in nextcloud namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deployment3.yaml:29-88
────────────────────────────────────────
  29 ┌       affinity:
  30 │         nodeAffinity:
  31 │           preferredDuringSchedulingIgnoredDuringExecution:
  32 │           - weight: 1
  33 │             preference:
  34 │               matchExpressions:
  35 │               - key: node-role.kubernetes.io/APP
  36 │                 operator: In
  37 └                 values:
  ..   
────────────────────────────────────────



nextcloud-deployment4.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nextcloud' of 'deployment' 'nextcloud' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nextcloud" of deployment "nextcloud" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nextcloud in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nextcloud-deployment4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nextcloud
   5 │   labels:
   6 └     app: nextcloud
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nextcloud in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nextcloud in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deployment4.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 │         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  26 └           value: 4G
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nextcloud in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deployment4.yaml:17-57
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nextcloud
  19 │         image: nextcloud
  20 │         env:
  21 │         - name: TZ
  22 │           value: Europe/Amsterdam
  23 │         - name: NEXTCLOUD_URL
  24 │           value: https://nextcloud.teutostack.io
  25 └         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
  ..   
────────────────────────────────────────



nextcloud-deployment5.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nextcloud' of 'deployment' 'nextcloud' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nextcloud" of deployment "nextcloud" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nextcloud in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nextcloud-deployment5.yaml:4
────────────────────────────────────────
   4 [   name: nextcloud
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nextcloud in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nextcloud in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deployment5.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nextcloud in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud-deployment5.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nextcloud
  17 │         image: nextcloud:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



nextcloud2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nextcloud' of 'deployment' 'nextcloud' in 'nextcloud' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nextcloud" of deployment "nextcloud" in "nextcloud" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nextcloud in nextcloud namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nextcloud in nextcloud namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud2.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nextcloud in nextcloud namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud2.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 └             - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────



nextcloud5.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nextcloud' of 'deployment' 'nextcloud' in 'nextcloud' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nextcloud' of Deployment 'nextcloud' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nextcloud" of deployment "nextcloud" in "nextcloud" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nextcloud in nextcloud namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nextcloud in nextcloud namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud5.yaml:17-38
────────────────────────────────────────
  17 ┌         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 │             - name: MYSQL_DATABASE
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nextcloud in nextcloud namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextcloud5.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: nextcloud
  18 │           image: nextcloud:27.1.4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: MYSQL_HOST
  23 │               value: "nextcloud-db"
  24 └             - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────



nextjs-deployment.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-nextjs-app' of 'deployment' 'my-nextjs-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-nextjs-app" of deployment "my-nextjs-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-nextjs-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nextjs-deployment.yaml:4
────────────────────────────────────────
   4 [   name: my-nextjs-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-nextjs-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-nextjs-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextjs-deployment.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-nextjs-app in deployment my-nextjs-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nextjs-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────



nextjs-deployment1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-nextjs-app' of 'deployment' 'my-nextjs-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-nextjs-app' of Deployment 'my-nextjs-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-nextjs-app" of deployment "my-nextjs-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-nextjs-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nextjs-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: my-nextjs-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-nextjs-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-nextjs-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nextjs-deployment1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-nextjs-app in deployment my-nextjs-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nextjs-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-nextjs-app
  17 └         image: hoangminhabc11/mywebsite:new
────────────────────────────────────────



nexus-deploy.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nexus-container' of Deployment 'nexus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nexus-container' of Deployment 'nexus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nexus-container' of 'deployment' 'nexus-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nexus-container' of Deployment 'nexus-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nexus-container' of Deployment 'nexus-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nexus-container' of Deployment 'nexus-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nexus-container' of Deployment 'nexus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nexus-container' of Deployment 'nexus-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nexus-container' of Deployment 'nexus-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nexus-container' of Deployment 'nexus-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nexus-container' of Deployment 'nexus-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nexus-container' of Deployment 'nexus-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nexus-container" of deployment "nexus-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nexus-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nexus-deploy.yaml:4
────────────────────────────────────────
   4 [   name: nexus-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nexus-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nexus-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nexus-deploy.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 │           mountPath: /nexus-data
  23 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nexus-container in deployment nexus-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nexus-deploy.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nexus-container
  17 │         image: sonatype/nexus3:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: nexus-data
  22 └           mountPath: /nexus-data
────────────────────────────────────────



nexus-deploy1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nexus' of Deployment 'nexus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nexus' of Deployment 'nexus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nexus' of 'deployment' 'nexus' in 'nexus' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nexus' of Deployment 'nexus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nexus' of Deployment 'nexus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nexus' of Deployment 'nexus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nexus' of Deployment 'nexus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nexus' of Deployment 'nexus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nexus' of Deployment 'nexus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nexus' of Deployment 'nexus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nexus' of Deployment 'nexus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nexus' of Deployment 'nexus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nexus" of deployment "nexus" in "nexus" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nexus in nexus namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nexus in nexus namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nexus-deploy1.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 │               mountPath: /nexus-data
  24 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nexus in deployment nexus (namespace: nexus) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nexus-deploy1.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: nexus
  18 │           image: sonatype/nexus3:latest
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           volumeMounts:
  22 │             - name: nexus-data
  23 └               mountPath: /nexus-data
────────────────────────────────────────



nexus-deployment.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nexus' of Deployment 'nexus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nexus' of Deployment 'nexus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nexus' of 'deployment' 'nexus' in 'nexus' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nexus' of Deployment 'nexus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nexus' of Deployment 'nexus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nexus' of Deployment 'nexus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nexus' of Deployment 'nexus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nexus' of Deployment 'nexus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nexus' of Deployment 'nexus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nexus' of Deployment 'nexus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nexus' of Deployment 'nexus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nexus' of Deployment 'nexus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nexus" of deployment "nexus" in "nexus" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 nexus-deployment.yaml:27
────────────────────────────────────────
  27 [           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────


AVD-KSV-0116 (LOW): deployment nexus in nexus namespace should set spec.securityContext.runAsGroup, spec.securityContext.supplementalGroups[*] and spec.securityContext.fsGroup to integer greater than 0
════════════════════════════════════════
According to pod security standard 'Non-root groups', containers should be forbidden from running with a root primary or supplementary GID.

See https://avd.aquasec.com/misconfig/ksv116
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nexus in deployment nexus (namespace: nexus) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nexus-deployment.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nexus
  20 │         image: sonatype/nexus3:latest
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         volumeMounts:
  24 │         - name: nexus-data
  25 │           mountPath: /nexus-data
  26 │         securityContext:
  27 └           runAsUser: 0  # Nexus container'ının çalışacağı kullanıcı kimliği
────────────────────────────────────────



nfs-busybox-deployment.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'deployment' 'nfs-busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Deployment 'nfs-busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of deployment "nfs-busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nfs-busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nfs-busybox-deployment.yaml:7
────────────────────────────────────────
   7 [   name: nfs-busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nfs-busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-busybox-deployment.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nfs-busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-busybox-deployment.yaml:18-33
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 └         volumeMounts:
  ..   
────────────────────────────────────────



nfs-busybox-deployment1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'deployment' 'nfs-busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Deployment 'nfs-busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of deployment "nfs-busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nfs-busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:7
────────────────────────────────────────
   7 [   name: nfs-busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nfs-busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nfs-busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-busybox-deployment1.yaml:18-33
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 └         volumeMounts:
  ..   
────────────────────────────────────────



nfs-busybox-deployment2.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'deployment' 'nfs-busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Deployment 'nfs-busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Deployment 'nfs-busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of deployment "nfs-busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nfs-busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:7
────────────────────────────────────────
   7 [   name: nfs-busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nfs-busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:19-29
────────────────────────────────────────
  19 ┌       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 │         volumeMounts:
  27 └           # name must match the volume name below
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nfs-busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-busybox-deployment2.yaml:18-33
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox
  20 │         command:
  21 │           - sh
  22 │           - -c
  23 │           - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: busybox
  26 └         volumeMounts:
  ..   
────────────────────────────────────────



nfs-client-pod.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nfs-client-provisioner' of 'deployment' 'nfs-client-provisioner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0028 (LOW): Deployment 'nfs-client-provisioner' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 nfs-client-pod.yaml:9-39
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: nfs-client-provisioner
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nfs-client-provisioner" of deployment "nfs-client-provisioner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nfs-client-provisioner in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nfs-client-pod.yaml:4-7
────────────────────────────────────────
   4 ┌   name: nfs-client-provisioner
   5 │   labels:
   6 │     app: nfs-client-provisioner
   7 └   namespace: default #与RBAC文件中的namespace保持一致
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nfs-client-provisioner in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nfs-client-provisioner in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-client-pod.yaml:20-39
────────────────────────────────────────
  20 ┌       serviceAccountName: nfs-client-provisioner #与RBAC文件中的namespace保持一致
  21 │       containers:
  22 │         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nfs-client-provisioner in deployment nfs-client-provisioner (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nfs-client-pod.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────



nfs-client-pod1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nfs-client-provisioner' of 'deployment' 'nfs-client-provisioner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0028 (LOW): Deployment 'nfs-client-provisioner' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 nfs-client-pod1.yaml:9-39
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: nfs-client-provisioner
  13 │   strategy:
  14 │     type: Recreate
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nfs-client-provisioner" of deployment "nfs-client-provisioner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nfs-client-provisioner in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nfs-client-pod1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: nfs-client-provisioner
   5 │   labels:
   6 │     app: nfs-client-provisioner
   7 └   namespace: default #与RBAC文件中的namespace保持一致
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nfs-client-provisioner in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nfs-client-provisioner in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-client-pod1.yaml:20-39
────────────────────────────────────────
  20 ┌       serviceAccountName: nfs-client-provisioner #与RBAC文件中的namespace保持一致
  21 │       containers:
  22 │         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nfs-client-provisioner in deployment nfs-client-provisioner (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nfs-client-pod1.yaml:22-34
────────────────────────────────────────
  22 ┌         - name: nfs-client-provisioner
  23 │           image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0
  24 │           imagePullPolicy: IfNotPresent
  25 │           volumeMounts:
  26 │             - name: nfs-client-root
  27 │               mountPath: /persistentvolumes
  28 │           env:
  29 │             - name: PROVISIONER_NAME
  30 └               value: nfs-client-provisioner
  ..   
────────────────────────────────────────



nfs-client-provisioner.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nfs-client-provisioner' of 'deployment' 'nfs-client-provisioner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nfs-client-provisioner' of Deployment 'nfs-client-provisioner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0028 (LOW): Deployment 'nfs-client-provisioner' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 nfs-client-provisioner.yaml:10-40
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app: nfs-client-provisioner
  14 │   strategy:
  15 │     type: Recreate
  16 │   template:
  17 │     metadata:
  18 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nfs-client-provisioner" of deployment "nfs-client-provisioner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nfs-client-provisioner in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nfs-client-provisioner.yaml:4-8
────────────────────────────────────────
   4 ┌   name: nfs-client-provisioner
   5 │   labels:
   6 │     app: nfs-client-provisioner
   7 │   # replace with namespace where provisioner is deployed
   8 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nfs-client-provisioner in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nfs-client-provisioner in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-client-provisioner.yaml:21-40
────────────────────────────────────────
  21 ┌       serviceAccountName: nfs-client-provisioner
  22 │       containers:
  23 │         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nfs-client-provisioner in deployment nfs-client-provisioner (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nfs-client-provisioner.yaml:23-35
────────────────────────────────────────
  23 ┌         - name: nfs-client-provisioner
  24 │           #image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-subdir-external-provisioner:v4.0.0
  25 │           image: registry.cn-shenzhen.aliyuncs.com/hoby/nfs-client-provisioner:v3.1.0
  26 │           volumeMounts:
  27 │             - name: nfs-client-root
  28 │               mountPath: /persistentvolumes
  29 │           env:
  30 │             - name: PROVISIONER_NAME
  31 └               value: qgg-nfs-storage
  ..   
────────────────────────────────────────



nfs-csi.nginx_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-nfs-csi-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-nfs-csi-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-nfs-csi-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-nfs-csi-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-nfs-csi-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-nfs-csi-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-nfs-csi-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-nfs-csi-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-nfs-csi-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-nfs-csi-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-nfs-csi-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-nfs-csi-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-nfs-csi-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-nfs-csi-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:4
────────────────────────────────────────
   4 [   name: nginx-nfs-csi-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-nfs-csi-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-nfs-csi-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: webcontent
  27 └           mountPath: /usr/share/nginx/html/web-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-nfs-csi-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-csi.nginx_1.yaml:15-27
────────────────────────────────────────
  15 ┌       volumes:
  16 │       - name: webcontent
  17 │         persistentVolumeClaim:
  18 │           claimName: pvc-nfs-csi
  19 │       containers:
  20 │       - name: nginx
  21 │         image: nginx
  22 │         imagePullPolicy: Never
  23 └         ports:
  ..   
────────────────────────────────────────



nfs-deploy-svc.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nfs-server-container' of Deployment 'nfs-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nfs-server-container' of Deployment 'nfs-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nfs-server-container' of 'deployment' 'nfs-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nfs-server-container' of Deployment 'nfs-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nfs-server-container' of Deployment 'nfs-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nfs-server-container' of Deployment 'nfs-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nfs-server-container' of Deployment 'nfs-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nfs-server-container' of Deployment 'nfs-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'nfs-server-container' of Deployment 'nfs-deployment' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nfs-server-container' of Deployment 'nfs-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nfs-server-container' of Deployment 'nfs-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nfs-server-container' of Deployment 'nfs-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'nfs-deployment' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 nfs-deploy-svc.yaml:6-35
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       role: nfs-server
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         role: nfs-server
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nfs-server-container" of deployment "nfs-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nfs-deploy-svc.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 │         - name: rpcbind
  23 └           containerPort: 111
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nfs-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nfs-deploy-svc.yaml:4
────────────────────────────────────────
   4 [   name: nfs-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nfs-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nfs-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nfs-deploy-svc.yaml:14-35
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: nfs-server-container
  16 │         image: gcr.io/google_containers/volume-nfs:0.8
  17 │         ports:
  18 │         - name: nfs
  19 │           containerPort: 2049
  20 │         - name: mountd
  21 │           containerPort: 20048
  22 └         - name: rpcbind
  ..   
────────────────────────────────────────


